<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackChouMine</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://JackChouMine.github.io/"/>
  <updated>2020-07-29T13:03:01.707Z</updated>
  <id>https://JackChouMine.github.io/</id>
  
  <author>
    <name>JackChouMine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年总结</title>
    <link href="https://JackChouMine.github.io/2020/01/21/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://JackChouMine.github.io/2020/01/21/2019年总结/</id>
    <published>2020-01-21T12:44:59.000Z</published>
    <updated>2020-07-29T13:03:01.707Z</updated>
    
    <content type="html"><![CDATA[<p>2019年过去，今年第一次跳槽，也完成了一些其他事情，想写一年的总结，记录当前的想法。</p><a id="more"></a><hr><p><ul class="markdownIt-TOC"><li><a href="#%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B7%B3%E6%A7%BD">第一次跳槽</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E4%BA%86%E4%BF%A1%E7%94%A8%E6%8A%A5%E5%91%8A">查询了信用报告</a></li><li><a href="#%E6%89%8B%E6%9C%AF">手术</a></li><li><a href="#%E4%BA%86%E8%A7%A3%E4%B8%AD%E5%8C%BB">了解中医</a></li><li><a href="#%E5%BC%9F%E5%BC%9F%E9%AB%98%E4%B8%89%E9%80%80%E5%AD%A6">弟弟高三退学</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></p><p><strong>我完成了哪些事情</strong></p><p>2019年我完成了一些对我来说，比较大的事情吧：</p><ul><li>第一次跳槽</li><li>查询了信用报告</li><li>做了一个手术</li><li>了解中医和现代医学</li><li>对弟弟在高三退学，感到失望</li></ul><h2 id="第一次跳槽"><a class="markdownIt-Anchor" href="#第一次跳槽"></a> 第一次跳槽</h2><p>毕业就进入长虹工作，感觉长虹在管理上还是挺好的，虽然算是国企，也没有感受到人家说的国企的官僚主义啊、人浮于事啊什么的，也许是我太小虾米或者待的时间才两年吧。感觉在管理上挺好的，偶尔周末加班，没有996，领导也好，有事找领导也是很快找到，就是工资没有外面有竞争者力，然后7月份就离职了。这个月本来要发季度奖的，然后离职就没有了，当时没有考虑到这个问题，但是又预约了一个手术，不想让更多人知道，奖金没有也离职了。看来以后离职要选恰当的时机，不然可能该得的福利，企业不会给你。长虹的缺点是，薪资低，亲戚说我读了大学还蹲在电子厂，还那么点工资，就千方百计催我考公务员，跳槽后薪水涨了，极少提公务员了。</p><p>在长虹工作，只有我一个人写前端，前期使用<strong>jQuery</strong>、<strong>BS</strong>等传统技术开发，同时维护老系统，需求不复杂，开发起来挺好的，高效，再者这些技术后台同事比较了解一些，有个吧需求，他们也能够实现。后来使用<code>vue</code>开发新的项目，就只有我一个人弄了，没人懂前端框架。vue 使用丝滑，纯数据驱动，高效，复杂的需求比<code>jQuery</code>容易实现多了。前后端分离开发，混合部署，隐约感觉我们的开发流程很有问题，比较容易扯皮，和网上流行的分离开发、持续部署等开发流程感觉还差很多，但是我们都不没有这种开发模式的经验，再加上我的 vue 经验少，每次和后台对接，都扯皮啊，后台在绵阳，沟通起来，太难了。完成了第一期，然后发现第二期和第一期关系不太大，没有需求文档，比较难以明确，甚至接口文档也不完善。后台写的接口文档，也毫无章法，不具备语义，后来我使用 <strong>RESTful</strong>,写了文档，有一个大概的共识，才开始写代码。</p><p>悲剧的是，后来长虹优化人员，后台项目让成都同事接手，才发现使用的技术太陈旧了，难以调试和阅读，后台了解需求什么的，又扯皮了几天。经过20多天，总算达到测试状态了，打通了和电视端的功能。</p><p>在长虹工作两年，也随便做了一些和智能家居相关的项目，对智能家居和语音交互等有点点感性的认识，还处在探索阶段，像智能手机一样达到很好的体验，市场认可，还要不少时间吧，未来凡是通电的，都会通网，交互方式也会改变。</p><p>找工作时，面了一些公司，都会问你对 996 的看法，赶项目进度啥的，看来加班是普遍的情况，我之前还以为能遇到一些加班不那么严重的公司。而且，给的待遇没有达到期望，所以拒了。也面蚂蚁金服，面试比较接地气，没玩什么虚的，技术没到期望，over 了。第一次跳槽，发现外包公司很多啊，各种给打电话，而且待遇还可以，比要你996，待遇还不满意的小团队公司好些，就冲着工资去面试了几个。最后入职一家离我很近，不要搬家的，在业务方的开发流程、工具的都做得不错的公司。入职后，发现这样的开发流程比在长虹要舒服得多，他们的工具链做得很完善，文档、代码规范啥的，做得挺好的，也有在百度、阿里、IBM工作过的大佬评审代码。</p><p>第一次跳槽，感觉学历还是那么重要啊，很多职位要求985、211的。学历就这样了，只能加强一下技术深度什么的了。</p><h2 id="查询了信用报告"><a class="markdownIt-Anchor" href="#查询了信用报告"></a> 查询了信用报告</h2><p>因为想看看用了网贷的表弟的信用报告，就去学习查询了一下自己的信用报告，信用良好，在支付宝的借贷记录都在里面了，有空专门写一下。</p><h2 id="手术"><a class="markdownIt-Anchor" href="#手术"></a> 手术</h2><p><s>离职也是因为一个手术的原因，所以没有提前找下家。离职后待业两个月，做了手术再去找的工作。第一次做这么大手术，担心出什么意外可咋整，而且几乎没告诉任何人。没想到，手术很快，医生技术不错，术后没有不适，很快好了。</s></p><h2 id="了解中医"><a class="markdownIt-Anchor" href="#了解中医"></a> 了解中医</h2><p>因为<code>谭秦东事件</code>，注意到中药。之前我从来没思考过中药到底有没有效果，或者如何判断药物有无效果的问题，然后顺便了解中医和现代医学，惊讶地发现中医理论和风水理论有交集，太荒谬了，接着又看了中医争议的百年历史，了解一些我们国家现代医药的发展现状。2020年了，还用这些伪科学或者不科学的医学来治病，难怪现代医药发展慢，算时代的悲哀。</p><p>了解中医，会随着了解很多问题，比如我们的民族文化中的糟粕，我们的教育，国人的科学素养，儒家思想的禁锢等。中医使我第一次比较认真得思考世界观、人生观、科学、宗教等之前没特别关注过的，因为中医和我读了这么多年的“科学”非常冲突，起码中医理论和科学是格格不入的，理清楚中医和文化、中医和儒家、中医理论的起源等才会明白中医为何如何荒谬且崇古不变。</p><h2 id="弟弟高三退学"><a class="markdownIt-Anchor" href="#弟弟高三退学"></a> 弟弟高三退学</h2><p>高三退学，太不明智了。不好好学习，沉迷直播，以为能赚大钱了，还自我感觉良好了。让其好好学习，别搞什么音乐，因为那条路他难以走通，却不听，说什么牛顿、爱因斯坦当时xxx的，学历有什么重要的，我学历比马云高，没马云赚钱什么的，感觉好无知，完全不是一个高三学生说的。在他看来，读书完全是为了赚钱，被那点直播赚的零花钱蒙蔽了双眼，任何人的话都听不进去。</p><p>深入思考这些问题，发现这和我家的家庭教育很相关，父母从来没有告诉过孩子读书为了什么，在教育孩子方面，他们是无能为力的，甚至很多做法是错误的。后来一联想她姐说北大的垃圾，我考一本垃圾，一个高三学生，还觉得北大垃圾，妈妈没感到震惊，反而护短，因此弟弟也这样，一点也不奇怪了。后来高考，她只能读专科，还是不好的专科，还想复读，后来还是去了，又想退学啥的，父母能让她折腾的机会不多了，我也不会对她说什么，反正我即使能读一本，现在无房无车，还是垃圾。现在她读专科，看她还能不能腆着大脸说别人垃圾。我12岁才和他们生活，父母对我的影响比较小。童年也比小的兄妹要艰苦一点，因此，就非常渴望读书，读书也还算努力，曾经立志做孙逸仙那样的人。小时候的玩伴都在初中或者小学辍学了，而我侥幸能上完大学。大学后发现孙逸仙真特么不好当，放弃幻想，做一个咸鱼算了。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>今年总体比较满意。以后继续加强学习，要出去多走走，练习一下摄影。然后继续了解中医，希望更多的人能来关注和了解中医和现代医学，不会被中医的阴阳虚实，正气淫气忽悠住。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年过去，今年第一次跳槽，也完成了一些其他事情，想写一年的总结，记录当前的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="阶段性总结" scheme="https://JackChouMine.github.io/categories/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="工作" scheme="https://JackChouMine.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>阴阳五行之来历</title>
    <link href="https://JackChouMine.github.io/2020/01/18/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C%E4%B9%8B%E6%9D%A5%E5%8E%86/"/>
    <id>https://JackChouMine.github.io/2020/01/18/阴阳五行之来历/</id>
    <published>2020-01-18T15:52:31.000Z</published>
    <updated>2020-07-29T13:03:01.711Z</updated>
    
    <content type="html"><![CDATA[<p>因为谭秦东被鸿茅药酒“跨省抓捕”事件，开始注意到中药，然后了解到中医，才发现中医的荒谬。这篇文章是梁启超1921年批判阴阳五行的，然作为中医的基本理论，有必要了解它的来历。我在360图书馆找到，<a href="http://www.360doc.com/showwebdoc/0/0/882999442.aspx" target="_blank" rel="noopener">梁启超：阴阳五行说之来历</a>, 识图软件扫描提取文字，批注一些生涩的词语，可能有误，欢迎指正。格式可能乱了，<a href="https://pan.baidu.com/s/1XWbZ-z5CgtogYcipwP2Vkg" target="_blank" rel="noopener">百度网盘获取原文</a> 提取码：wpf6</p><a id="more"></a><hr><p><ul class="markdownIt-TOC"><li><a href="#%E9%98%B4%E9%98%B3%E4%BA%8C%E5%AD%97%E8%AF%AD%E6%84%8F%E4%B9%8B%E5%8F%98%E8%BF%81">阴阳二字语意之变迁</a></li><li><a href="#%E4%BA%94%E8%A1%8C%E4%BA%8C%E5%AD%97%E8%AF%AD%E6%84%8F%E4%B9%8B%E5%8F%98%E8%BF%81">五行二字语意之变迁</a></li><li><a href="#%E9%98%B4%E9%98%B3%E5%AE%B6%E4%B9%8B%E6%88%90%E7%AB%8B%E5%8F%8A%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C%E8%AF%B4%E4%B9%8B%E4%BC%A0%E6%92%AD">阴阳家之成立及阴阳五行说之传播</a></li></ul></p><h1 id="阴阳五行说之来历"><a class="markdownIt-Anchor" href="#阴阳五行说之来历"></a> 阴阳五行说之来历<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h1><p><img src="https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C.jpg" alt="阴阳五行"></p><p>​<strong>阴阳五行说，为二千年来迷信之大本营，直至今日，在社会上犹有莫大势力今当辞而辟之，故考其来历如次。</strong></p><h2 id="阴阳二字语意之变迁"><a class="markdownIt-Anchor" href="#阴阳二字语意之变迁"></a> 阴阳二字语意之变迁</h2><p>​阴阳两字义之见于《说文》者，《阜部》云：“陰，阖也。水之南，山之北也。从月，侌<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>声。”，“陽，高明也。从日，昜声。“  ，然阜（fù）旁<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>乃孳乳后起<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，其原字实为侌昜。《雲部》云：“黔，云覆日也。从雲，今声。侌，古文。”《勿部》云：“昜，开也。从日、一、勿。一曰飞扬，一曰长也，一曰疆者众兒。”  侌字所从之 “云”，即古雲字，侌为云覆日，此其本义。引申为凡覆蔽之义。覆蔽必阖，因又引申为阖义。背日之地必阖，城市多倚北而背日，因又引申为背面、或里面、或北方之义。此  “陰” 字 字义变迁之大凡也。昜，从日从一者，日在地上，即日出之意。从勿者，《说文》云：“勿，州里所建旗象。……”  日出地上而建旗焉，气象极发扬，此其本义。引申以表日之光彩，故日称太阳，朝日称朝阳，夕日称夕阳。日出则暖，故又引申谓和暖之气为阳气。向日乃能见阳光，故又引申为正面、或表面、或南方之义。此 ”陽“ 字字义变迁之大凡也。南北向背相对待，故阴阳二字连用，常以表南北或表里外<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>之义。</p><p>​阴阳两字相连属成一名辞，表示无形无象之两种对待的性质，盖自孔子或老子始。孔、老以前之书确实可信者，一日《诗经》，二曰《书经》，三日《仪礼》，四曰《易经》之卦辞爻辞<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>。《仪礼》全书中无阴阳二字，可置勿论。其他三经所有阴字、阳字之文句及意义，列举诠释如下：</p><p>《诗经》<br>“其阴，虺虺<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>其雷。”（《卫风·终风）<br>“习习谷风，以阴以雨。”（《卫风·谷风》）<br>“阴续。”（《秦风·小》）<br>“黍苗，阴雨之”（《曹风·下泉》）<br>“迨天之未阴雨”（《豳风·鸦》）<br>“二之日，纳于凌阴。”（豳风·七月》）<br>“又窘阴雨。”（《小雅·正月》）<br>“既之阴女，反我赫”（大雅·桑柔））<br>“其雷，在南山之阳。”《《周南·殷其需》<br>“君子阳阳，左执簧，右招我由房。”（《王风·君子扬扬》）<br>“我送舅氏，曰至渭阳。”《秦风·渭阳》）<br>“春日载阳。”（《豳风·七月》）<br>“载立载黄，我朱孔阳。”（同上）<br>“湛湛露斯，匪阳不晞。”（《小雅·湛露》）<br>“日归归，岁亦阳止。”（《小雅·采薇》）<br>“日月阳止，女心伤止。”（《小雅·杕杜》）<br>“在洽之阳。”（《大雅·大明》）<br>“居岐之阳。”（《大雅·皇矣》）<br>“度其夕阳，豳居允荒。”（《大雅·公刘》）<br>“桐梧生矣，于彼朝阳。”（《大雅·卷阿》）<br>“龙阳阳。”（《周颂·载见》）<br>“居岐之阳。”（《鲁颂·宫》<br>“既景乃冈，相其阴阳。”（《大雅·公刘》</p><p>《书经》：<br>“阳鸟攸居。”（《禹贡》）<br>“华阳黑水惟梁州。”（同上）<br>“岷山之阳。”（同上）<br>“南至于华阴。”（同上）<br>“惟天阴下民。”（《洪范》）<br>“乃或亮阴，三年不言。”（《无逸》）</p><p>《易》<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>爻辞：<br>“鹤鸣在阴，其子和之。”（《中孚》九二）</p><pre><code>右[^9]《诗经》言阴者八，阳者十四，言阴阳者一。《书经）言阴言阳各三。最奇者《易经》一书，庄子所谓  “《易》以道阴阳“ 者，卦辞爻辞中，仅有此“中孚[^10]九二[^11]之一条，单举一阴字。右列诸文中阴字，《谷风》、《下泉》、《鸱》、《正月》之 “阴雨“ 及《终风》之 ”瞪瞪其阴“，皆用“云覆日”之义，即最初本义也《桑柔》之“既之阴女”，孔疏云：“往阴覆汝”。《洪范》之 “惟天阴骘（zhì）[^12]下民”，马注云：“阴，覆也。“  皆用覆蔽之引申义。“阴靷鋈（wù）续”，《毛诗》云：“阴靷（yǐn），掩轨也。”  掩亦覆义。《无逸》之 “亮阴”,《尚书大传》作 “梁阖”，言凶庐之阖也，即《说文》以释阴之义。《七月）之“纳于凌阴”，《毛诗》云：”凌阴，冰室也。”，盖深邃黑暗之室。《中孚》之 “鹤鸣在阴”，谓鹤鸣于其子所不及见之处，而其子能和之也，亦覆蔽之引申义。《禹》之“华阴”，谓华山之背面，亦从阖覆义引申来。凡三经所有阴字，意义尽于此。</code></pre><p>​          其阳字，《闷官》之“龙族阳阳”，正昜字从勿之本义，谓在日下飞扬也。“君子阳阳<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>” 者，《史记·晏子传》：“意气阳阳甚自得”。亦如日下旗，神气飞扬也。此皆最初之义，《湛露》之“匪阳不晞”，《卷阿》之 “于彼朝阳”，《公刘》之“度其夕阳”，皆节彼日在地上之义，直以阳为日。《七月》之“我朱孔阳”，言朱色之光如日，亦同前解。《七月》之“春日载阳”，《采薇》之”岁亦阳止”，《杜》之“日月阳止”，《禹贡》之 “阳鸟攸居”，皆用向日和暖之引申义。《殷其雷》之“南山之阳”，《渭阳》之“曰至渭阳”，《大明》之“在洽之阳”，《皇矣》，《闷官》之 “居岐之阳”，《禹贡》之“华阳”、“岷山之阳”，皆言某山某水之正面、或表面、或南方，盖从向日之一面得名也。凡三经所有阳字，意义尽于此。</p><p>​         阴阳二字连用者，惟《公刘》“既景乃冈，相其阴阳” 一语，谓在山冈上测日影，察其向背云尔，与后世所谓阴阳之义迥别。</p><p>​由此观之，**商周以前所谓阴阳者，不过自然界中一种粗浅微末之现象，绝不含有何等深邃之意义。**阴阳二字意义之剧变，盖自老子始。老子曰：“<em>万物负阴而抱阳。</em>”<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> 此语当作何解，未易断言<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>，抑<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>固有以异于古所云矣。虽然，五千言中言阴阳者只此一句，且亦非书中重要语。故谓老子与阴阳说有何等关系，吾未敢承。</p><p>​庄子言“《易》以道阴阳”，《易》卦辞、爻辞皆未尝言阴阳，既如前述。然则此语只能作孔子所赞之《易》解耳。今所传《十翼》，其确出孔子手著最可信者，莫如《彖传》、《象传》，然此两传中，惟《乾》初九《象传》云：“潜龙勿用，阳在下也。”《坤》初六《象传》云：“履霜坚冰，阴始凝也。”《彖》、《象》两传中，刚柔、内外、上下、大小等对待名词，几于<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup>无卦不有，独阴阳二字仅于此两卦各一见，可谓大奇。至《系辞》、《说卦》、《文言》诸传，则言之较多。今列举其文如下：</p><p>​“一阴一阳之谓道。”</p><p>​“阳卦多阴，阴卦多阳。其故何也？阳卦奇，阴卦偶。”</p><p>​“乾，阳物也；坤，阴物也。阴阳合德，而刚柔有体。”</p><p>​“阴阳之义配日月，易简之善配至德。”（以上《系辞传》）</p><p>​“观变于阴阳而立卦。”</p><p>​“立天之道，曰阴与阳。立地之道，曰柔与刚。立人之道，曰仁与义。”（以上《说卦传》）</p><p>​“潜龙勿用，阳气潜藏。”</p><p>​“阴虽有美含之。”</p><p>​“阴疑于阳必战，为其嫌于无阳也，故称龙焉。”（以上《文言传》）</p><p>​<a href="https://baike.baidu.com/item/%E7%B3%BB%E8%BE%9E" target="_blank" rel="noopener">《系辞》</a>、<a href="https://baike.baidu.com/item/%E6%96%87%E8%A8%80%E4%BC%A0" target="_blank" rel="noopener">《文言》</a>诸传，不敢遂认为直接出孔子手。因传中多有“子曰”字样，论体例应为七十子后学者所记也。姑置不论，即将以上诸条全认为孔子学说，其所谓阴阳者亦不过如此。盖孔子之哲学，谓宇宙间有两种力相对待，相摩荡，如电气之有正负，斯为万有之缘起。此两种力难于表示，故以种种对待名辞形容之，如刚柔、动静、消息、屈伸、往来、进退、翕辟<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>等皆是，而阴阳亦其一也。就中言阴阳者，远不如言刚柔、消息、往来者之多。与其谓《易》以道阴阳，母宁<sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup>谓《易》以道刚柔，道消息也。**要之阴阳两字，不过孔子“二元哲学”之一种符号，而其所用符号，又并不止此一种，其中并不含有何等神秘意味，与矫诬<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup>之术数更相远。**故谓后世之阴阳说导源于孔子，吾亦未敢承<sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup>。</p><h2 id="五行二字语意之变迁"><a class="markdownIt-Anchor" href="#五行二字语意之变迁"></a> 五行二字语意之变迁</h2><pre><code>五行二字最初见于经典者，则《尚书·甘誓》，云：“有扈氏威侮五行，怠弃三正。”[^22]此语作何解，颇难臆断。后世注家，多指五行为金、木、水、火、土，三正为建子、建丑、建寅。然据彼辈所信，子、丑、寅建，分配周、商、夏。《甘誓》为夏书，则时无子、丑二建，何得云三正？且金、木、水、火、土之五行，何得言威侮，又何从而威侮者？窃疑此文应解为威侮五种应行之道[^23]，怠弃三种正义。其何者为五，何者为三，固无可考。然与后世五行说绝不相蒙，盖无疑。</code></pre><p>​次则为《洪范》。自汉人作《洪范五行传》后，于是言五行者必联想《洪范》，此两名词几成不可离之关系。虽然，实际上《洪范》所谓五行果有何等神秘意味否耶？请勘视原文：</p><p>​“我闻在昔，鲧（gǔn）堙（yīn）洪水，汩陈其五行。”</p><p>​“一五行：一曰水，二曰火，三曰木，四曰金，五曰土。水曰润下，火曰炎上，木曰曲直，金曰从革，土爱稼稿。润下作咸，炎上作苦，曲直作酸，从革作辛，稼作甘。“<sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup></p><p>​此不过将物质区分为五类，言其功用及性质耳，何尝有丝毫哲学的或术数的意味？ &quot; 鲧湮洪水，汩陈其五行 ” 者，言因湮水之故，致一切物质不能供人用。若谓汩乱五行原理，则与堙水何关耶？<strong>《洪范》本为政治书，其九畴先列五行者，因其为物质的要素，人与经济所攸命耳。</strong>《左传》所谓 **“天生五材，民并用之”，即此义也。然则《洪范》本意，并非以此一畴统贯生八畴甚明，后世愚儒，欲取凡百事物皆纳入五行中，于是首将第二畴之五事貌、言、视、听、思分配水、火、木、金、土。**试问，第四畴之五纪，第九畴之五福，数固同为五，然有法分配否？ 第三畴之八政，第六畴之三德，数不止五，或不及五者，又有法分配否？ 第五畴之皇极，第七畴之稽疑，第八畴之庶，并无数目者，又有法分配否？以一贯八，而所贯者亦仅一而止。愚儒之心劳日拙，大可怜也。</p><p>​  除《书经》此两文外，《诗经》、《仪礼》、《易》经传乃至《老子》、《论语》、《孟子》皆不见有以五行二字连文者。（此凭吾记忆所及耳，读者如有所发见望指正） 惟《墨子·经下》及《经说下》云：“五行毋常胜，说在宜。”   “五合，水火土，火离然。火烁金，火多也。金靡炭，金多也。合之府水，木离木。……”  此确与《洪范》所言五行为同物，且其言“无常胜”之义，注家或以后世五行生说解之。实则胜训贵，意谓此五种物质无常贵，但适宜应需则为贵，其说甚平实，不待穿凿也。</p><p>​《荀子·非十二子篇》，其非子思、孟轲也，有颇奇异之数语。曰：“案往旧造说，谓之<strong>五行</strong>，甚僻违而无类，幽隐而无说，闭约而无解。案饰其辞而衹敬之，曰：此真先君子之言也。子思唱之，孟轲和之。”</p><p>​此五行不知作何解，若谓即《洪范》之五行耶？子思、孟轲书中只字未尝道及。《中庸》以君臣、父子、兄弟、夫妇、朋友五者为天下之达道，道有行义，五行或指此耶？然此为儒家常言，非思、轲所创，且无所谓“僻违、幽隐、闭约”。杨倞注释为仁、义、礼、智、信之五常<sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup>，或者近是然子思说虽无可考，或《中庸》外尚有著述。孟子则恒言仁义礼智，未尝以信与之并列也。此文何指，姑勿深论但决非如后世之五行说，则可断言耳。</p><p>​古籍中可信者，其言五行之说，以吾记忆所及，尽于是矣。此外，尚有应怀疑者一段，则《左传》昭二十五年记郑子大叔与晋赵简子问答语：</p><p>​“吉也闻诸先大夫子产日：天地之经，而民实则之…用其五行气为五味，发为五色，章为五声。……”<sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup></p><p>​此与后世所谓“《洪范》五行”者甚相类。此文如可信，则是孔子之先辈子产时已有此说矣。然《左传》真伪，在学界久成问题，藉日非全伪，然其作者最早应为战国时人，且最少有一部分为汉人窜乱，此殆无可讳者。谓子产有是言，吾以当时所有学说旁证之，不能置信也。</p><p>​五行说之极怪诞而有组织者，始见于《吕氏春秋》之十二览。其后《小戴礼记》采之，即《月令篇），《淮南子》又采之，其说略如下：</p><p>​“孟春之月……其日甲乙，其帝太皞，其神句芒，其虫鳞，其音角……其味酸，其臭，其祀户，祭先脾。……天子居青阳左个，驾苍龙，载青旂，衣青衣，服青玉，食麦与羊。……“</p><p>​如此将一年四季分配五行：春木、夏火、秋金，冬水，所余之土无可归，则于夏秋交界时为拓一位置。于是五方之东、西、、北、中，五色之青、赤、黄、白、黑，五声之宫、商、角、、羽，五味之酸、苦、咸、甘，五虫之毛、介、鳞、羽、倮，五祀之井、灶、行，户、中，五谷之黍、稷、稻、麦、，五畜之马、牛、羊、犬、豕，五脏之心、肝、肺、脾、肾，五帝之太皞（hào）、炎帝、黄帝、少昊、颛顼，五神之句芒、祝融、后上、蓐收、玄冥，皆一一如法分配。《洪范》五事抑未编入。<strong>乃至如十天、六律、六吕等数目不与五符者，亦割裂以隶<sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup>之。如是将宇宙间无量无数之物象事理<sup class="footnote-ref"><a href="#fn22" id="fnref22">[22]</a></sup>，皆硬分为五类，而以纳诸所谓五行者之中，此种诡异之组织遂<sup class="footnote-ref"><a href="#fn23" id="fnref23">[23]</a></sup>二千年蟠据全国人之心理，且支配全国人之行事。嘻！吾辈死生关系之医药，皆此种观念之产物，吾辈最爱敬之中华民国国旗，实为此种观念最显著之表象，他更何论也。</strong></p><h2 id="阴阳家之成立及阴阳五行说之传播"><a class="markdownIt-Anchor" href="#阴阳家之成立及阴阳五行说之传播"></a> 阴阳家之成立及阴阳五行说之传播</h2><p>​<strong>由此观之，春秋战国以前，所谓阴阳，所谓五行，其语甚希见，其义极平淡，且此二事从未尝并为一谈。 请经及孔、老、墨、孟、韩诸大哲皆未尝齿及。</strong> 然则造此邪说以惑世诬民者谁耶？其始起于燕、齐方士<sup class="footnote-ref"><a href="#fn24" id="fnref24">[24]</a></sup>。而其建设之，传播之，宜负罪责者三人焉：日邹衍，曰董仲舒，曰刘向。</p><p>​《史记·孟子荀卿列传》云：“邹衍乃深观阴阳消息而作迁怪之变，《终始》、《大圣》之篇十余万言。”  又云：“ 称引天地剖判以来，五德转移，治各有宜，而符应若兹。”   又《封禅书》云：“齐威、宣之时，驺子<sup class="footnote-ref"><a href="#fn25" id="fnref25">[25]</a></sup>之徒，论著终始五德之运，及秦帝，齐人奏<sup class="footnote-ref"><a href="#fn26" id="fnref26">[26]</a></sup>之。” 《文选·魏都赋》注引《七略》云：“邹子有终始五德，从所不胜，土德后木德继之，金德次之，火德次之，水德次之。”  邹衍之书，见于《汉书·艺文志》者，有《邹子》四十九篇、《邹子终始》五十六篇，今虽已佚，然据《史记》及《七略》所说，可知其概。<strong>妖言之作俑者，实此人也。</strong></p><p>​**衍倡此妖言，乘秦、汉间学术颓废之隙，遂以万斛<sup class="footnote-ref"><a href="#fn27" id="fnref27">[27]</a></sup>狂澜之势，横领思想界之全部。**司马谈<sup class="footnote-ref"><a href="#fn28" id="fnref28">[28]</a></sup>作《六家要旨》，以阴阳家与儒、道、墨、名、法并列，其势力可想。今将《汉书·艺文志》所著录此类书，照录如下：书目下括中文字皆《汉书》原注：</p><p>《宋司星子韦》三篇（景公之史）</p><p>《公生终始》十四篇（传邹爽终始书）</p><p>《公孙发》二十二篇（六国时）</p><p>《子》四十九篇（名衍，齐人，为燕昭王师居稷下，号“谈天衍”）《邹子终始》五十六篇</p><p>《乘丘子》五篇（六国时）</p><p>《杜文公》五篇（六国时）</p><p>《黄帝秦素》二十篇（六国时，韩请公子所作）</p><p>《南公》三十一篇（六国时）</p><p>《容成子》十四篇</p><p>《张苍》十六篇（承相北平侯）</p><p>《邹爽子》十二篇（齐人，号曰“雕龙爽”）</p><p>《间丘子》十三篇（名快，魏人，在南公前）</p><p>《冯促》十三篇（郑人）</p><p>《将巨子》五（六国时，先南公，南公称之）</p><p>《五曹官制》五篇（汉制，似贾谊所条）</p><p>《周伯》十一篇（齐人，六国时）</p><p>《卫侯官》十二篇（近世，不知作者）</p><p>《于长天下忠臣）九篇（平阴人，近世）</p><p>《公孙浑邪》十五篇（平）</p><p>《阴阳》三十八篇（不知作者）</p><p>《公孙浑邪》十五（平曲侯）</p><p>《杂阴阳》三十八篇（不知作者）</p><p>右《诸子略》阴阳家二十一家三百大十九篇   《大壹兵法》一篇<sup class="footnote-ref"><a href="#fn29" id="fnref29">[29]</a></sup></p><p>《天一兵法》三十五篇</p><p>《神农兵法》一篇</p><p>《黄帝》十六篇（图三卷）</p><p>《封胡》五篇（黄帝臣，依讬也）</p><p>《风后》十三篇（图二卷黄帝臣，依讬也）</p><p>《力牧》十五篇（黄帝臣，依讬也）</p><p>《冶子》一篇（图一卷）</p><p>《鬼容区》三篇（图一卷，黄帝臣，依讬也）</p><p>《地典》六篇</p><p>《孟子》一篇</p><p>《东父》三十一篇</p><p>《师旷》八篇（晋平公臣）</p><p>《弘》十五篇（周史）</p><p>《别成子望军气》六篇（图三卷）</p><p>《辟兵威胜方》七十篇</p><p>右《兵书略》阴阳家十六家二百四十九篇《泰一阴阳》二十三卷</p><p>《黄帝阴阳》二十五卷</p><p>《诸王子论阴阳》二十五卷</p><p>《大元阴阳》二十六卷</p><p>《三典阴阳谈论》二十七卷</p><p>《神农大幽五行》二十七卷</p><p>《四时五行经》二十六卷</p><p>《猛子昭》二十五卷</p><p>《阴阳五行时令》十九卷</p><p>《堪舆金》四卷</p><p>《务成子灾异应》十四卷</p><p>《十二典灾异应》十二卷</p><p>《钟律灾异》二十六卷</p><p>《钟律丛辰日苑》二十三卷</p><p>《钟律消息》二十九卷</p><p>《黄钟》七卷</p><p>《天一》六卷</p><p>《泰一》二十九卷</p><p>《刑德》七卷</p><p>《风鼓六甲》二十四卷</p><p>《风后孤虚》二十卷</p><p>《六合随典》二十五卷</p><p>《转位十二神》二十五卷</p><p>《羡门式法》二十卷</p><p>《门式》二十卷</p><p>《文解六甲》十八卷</p><p>《文解二十八宿》二十八卷</p><p>《五音奇腋用兵》二十三卷</p><p>《五音奇胲刑德》二十一卷</p><p>《五音定名》十五卷</p><p>右《数术略）五行家三十一家六百五十二卷 【上面所列的总结】</p><p>​此外，如《数术略》医经、房中<sup class="footnote-ref"><a href="#fn30" id="fnref30">[30]</a></sup>两门，亦大抵属此类，观今所传《黄帝内经》可知也。即以此三门论，为书一千三百余篇，对于《艺文志》总数万三千二百六十九卷，已占十分一而强。其实细绎全志目录，揣度其与此等书同性质者，恐占四分之一乃至三分之一。嘻！学术界之耻辱，莫此为甚矣。</p><p>​邹衍书及他诸书皆不可见，可见者有董仲舒之《春秋繁露》，仲舒二千年来受醇儒之徽号<sup class="footnote-ref"><a href="#fn31" id="fnref31">[31]</a></sup>，然其书祖述<sup class="footnote-ref"><a href="#fn32" id="fnref32">[32]</a></sup>阴阳家言者几居半。今无暇一一胪列内容，但举其篇目：</p><p>《五行对》第三十八</p><p>《五行之义》第四十二</p><p>《阴尊阳卑》第四十三</p><p>《王道通三》第四十四</p><p>《天辨在人》第四十六</p><p>《阴阳位》第四十七</p><p>《阴阳终始》第四十八</p><p>《阴阳义》第四十九</p><p>《阴阳出入》第五十</p><p>《天道无二》第五十</p><p>《暖敦多》第五十二</p><p>《基义》第五十三</p><p>《同类相动》第五十七</p><p>《五行相胜》第五十九</p><p>《五行逆顺》第六十</p><p>《治水五行》第六十一</p><p>《治乱五行》第六十二</p><p>《五行变救》第六十三</p><p>《五行五事》第六十四</p><p>《天地之行》第七十八</p><p>《如天之为》第八十</p><p>《天地阴阳》第八十一</p><p>​以上二十三篇，皆言阴阳五行，殆占全书之半。其中，所含精深之哲理固甚多，要之半袭阴阳家言，最少亦受其影响，而绝非孔、孟、荀以来之学术，则可断言也。**仲舒以儒家大师，而态度如此，故一时经学家皆从风而靡。**仲舒自以此术治《春秋》，京房、焦赣之徒以此术治《易》，夏侯胜、李寻之徒以此术治《书》，翼奉、孟之徒以此术治《诗》，王史氏之徒以此术治《礼》。于是庄严纯洁之六经被邹衍余毒所蹂躏，无复完肤矣。《艺文志·六艺略》所著录之书，其属于此类者以吾所推度，最少有如下之各种：</p><p>《易》：</p><p>《古五子》十八篇（自甲子至壬子说《易》阴阳）</p><p>《淮南道训》二篇（淮南王安聘明《易》者九人，号九师说）《杂灾异》三十五篇</p><p>《神输》五篇（师古曰，刘向《别录》云，神输者，王道失则灾害生得则四海输之祥瑞）</p><p>《孟氏京房》十一篇</p><p>《灾异孟氏京房》六十六篇</p><p>《京氏段嘉》十二篇</p><p>《书》：</p><p>刘向《五行传记》十一卷</p><p>许商《五行传记》一卷</p><p>《诗》：</p><p>《齐后氏传》三十九卷</p><p>《齐孙氏传》二十八卷</p><p>《齐杂记》十八卷</p><p>《礼》：</p><p>《明堂阴阳》三十三篇</p><p>《王史氏》二十一篇（？）</p><p>《明堂阴阳说》五篇</p><p>《古封群祀》二十二篇</p><p>《封禅议对》十九篇</p><p>《汉封样群祀》三十六篇</p><p>《春秋》：</p><p>《公羊外传》五十篇（？）</p><p>《谷梁外传》二十篇（？）</p><p>《公羊杂记》八十三篇（？）</p><p>《诸子略》儒家</p><p>《董仲舒》百二十三篇（？）</p><p>​右诸书虽什九<sup class="footnote-ref"><a href="#fn33" id="fnref33">[33]</a></sup>已佚，然经近人辑出，尚多能得其梗概。要之，两汉所谓今文家经说，其能脱阴阳五行臭味者，什无二三，大率自仲舒启之。</p><p>​《汉书·五行志》云：“汉兴，承秦灭学之后，景武之世，董仲舒治《公羊春秋》，始推阴阳，为儒者宗。宣、元之世，刘向治《谷梁春秋》，数其祸福，傅以《洪范》，与仲舒错<sup class="footnote-ref"><a href="#fn34" id="fnref34">[34]</a></sup>。至向子歆，……言《五行传》，又颇不同。是以揽仲舒、别向、歆……所陈行事，……著于篇。”  <strong>据此知汉儒阴阳五行之学，开于仲舒而成于向、歆父子。</strong>《五行志》所载，大抵即刘向《洪范·五行传》之言也。吾侪试一籀<sup class="footnote-ref"><a href="#fn35" id="fnref35">[35]</a></sup>读，当审其内容为何如。<strong>而后此所谓正史者，大率皆列此一篇，千余年莫之易呜呼！ 禨<sup class="footnote-ref"><a href="#fn36" id="fnref36">[36]</a></sup>祥灾之迷信，深中于士大夫，智日以昏，而志日以偷，谁之咎也。吾故略疏证其来历如右，俾诵法<sup class="footnote-ref"><a href="#fn37" id="fnref37">[37]</a></sup>孔子之君子得省览焉。</strong></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>说明：梁启超写于1921年，由知 <a href="https://www.zhihu.com/people/JackZhouMine/activities" target="_blank" rel="noopener">乎用户Jack Lei</a> 校对，批注。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>侌：yīn，古同阴。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>阜旁：耳朵旁。 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>孳乳后起：派生而来。 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>外：原文没有外，认为作者笔误。 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p>卦辞爻辞：卦辞，说明《易经》六十四卦要义的文字，即占卜是解释卦象的文字。爻（yaó）辞，占卜时用以解释爻的文字，一卦有六爻。阳爻称之为九，阴爻称为六。从上到下，初九（六），九二（六二），九三（六三），九四（六四），九五（六五），上九（上六）。 <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p>虺虺：拼音（huǐ huǐ ） , 表雷声。 <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p>《易》：《易经》的简称，下同。 <a href="#fnref8" class="footnote-backref">↩︎</a></p></li><li id="fn9" class="footnote-item"><p>阳阳：今作“扬扬”。 <a href="#fnref9" class="footnote-backref">↩︎</a></p></li><li id="fn10" class="footnote-item"><p>中医因此说中医起源于道。 <a href="#fnref10" class="footnote-backref">↩︎</a></p></li><li id="fn11" class="footnote-item"><p>断言:可以肯定地说。 <a href="#fnref11" class="footnote-backref">↩︎</a></p></li><li id="fn12" class="footnote-item"><p>抑：语气词，在句首，无义。 <a href="#fnref12" class="footnote-backref">↩︎</a></p></li><li id="fn13" class="footnote-item"><p>几于：几乎。 <a href="#fnref13" class="footnote-backref">↩︎</a></p></li><li id="fn14" class="footnote-item"><p>翕辟：开合。 <a href="#fnref14" class="footnote-backref">↩︎</a></p></li><li id="fn15" class="footnote-item"><p>母宁：毋宁，作者笔误。 <a href="#fnref15" class="footnote-backref">↩︎</a></p></li><li id="fn16" class="footnote-item"><p>矫诬：故弄玄虚。 <a href="#fnref16" class="footnote-backref">↩︎</a></p></li><li id="fn17" class="footnote-item"><p>承：奉也，受也，接受。 <a href="#fnref17" class="footnote-backref">↩︎</a></p></li><li id="fn18" class="footnote-item"><p>五味：五行配五味出现了。 <a href="#fnref18" class="footnote-backref">↩︎</a></p></li><li id="fn19" class="footnote-item"><p>五常：五常配五行，有别于儒家的五德。 <a href="#fnref19" class="footnote-backref">↩︎</a></p></li><li id="fn20" class="footnote-item"><p>五声：五声配五行。 <a href="#fnref20" class="footnote-backref">↩︎</a></p></li><li id="fn21" class="footnote-item"><p>隶：通 “离”，动词，使之离，离开，废弃之意。 <a href="#fnref21" class="footnote-backref">↩︎</a></p></li><li id="fn22" class="footnote-item"><p>物象事理：事物的现象，事物的原理，指自然运行的原理。 <a href="#fnref22" class="footnote-backref">↩︎</a></p></li><li id="fn23" class="footnote-item"><p>遂：竟然。 <a href="#fnref23" class="footnote-backref">↩︎</a></p></li><li id="fn24" class="footnote-item"><p>方士：术士，修习方术的人，包括占卜、预言、法术、气功、炼丹等，达到趋吉避凶、<a href="https://www.wikiwand.com/zh-hans/%E9%80%9A%E9%9D%88" target="_blank" rel="noopener">通灵</a>、<a href="https://www.wikiwand.com/zh-hans/%E9%95%B7%E7%94%9F%E4%B8%8D%E8%80%81" target="_blank" rel="noopener">长生不老</a>、<a href="https://www.wikiwand.com/zh-hans/%E7%BE%BD%E5%8C%96" target="_blank" rel="noopener">羽化飞升</a>等目的。 <a href="#fnref24" class="footnote-backref">↩︎</a></p></li><li id="fn25" class="footnote-item"><p>驺子：邹衍的尊称。 <a href="#fnref25" class="footnote-backref">↩︎</a></p></li><li id="fn26" class="footnote-item"><p>奏：奉上，上奏。 <a href="#fnref26" class="footnote-backref">↩︎</a></p></li><li id="fn27" class="footnote-item"><p>万斛（hú）: 容量之多。斛，体积单位，十斗或五斗为一斛。 <a href="#fnref27" class="footnote-backref">↩︎</a></p></li><li id="fn28" class="footnote-item"><p>司马谈：司马迁的父亲。 <a href="#fnref28" class="footnote-backref">↩︎</a></p></li><li id="fn29" class="footnote-item"><p>上面所列的总结，下同。 <a href="#fnref29" class="footnote-backref">↩︎</a></p></li><li id="fn30" class="footnote-item"><p>房中：房中术，包括优学、性学和性保健，御女之术，多由男性对女性实施。女性对男性实施的，又叫媚术。 <a href="#fnref30" class="footnote-backref">↩︎</a></p></li><li id="fn31" class="footnote-item"><p>醇儒之徽号：醇儒，纯在的儒生。徽号，尊号。 <a href="#fnref31" class="footnote-backref">↩︎</a></p></li><li id="fn32" class="footnote-item"><p>祖述：效法前人。 <a href="#fnref32" class="footnote-backref">↩︎</a></p></li><li id="fn33" class="footnote-item"><p>什九：十之九。 <a href="#fnref33" class="footnote-backref">↩︎</a></p></li><li id="fn34" class="footnote-item"><p>错：打磨。 <a href="#fnref34" class="footnote-backref">↩︎</a></p></li><li id="fn35" class="footnote-item"><p>籀（zhòu）：读书。 <a href="#fnref35" class="footnote-backref">↩︎</a></p></li><li id="fn36" class="footnote-item"><p>禨（jī）：迷信鬼神，向鬼神求福。 <a href="#fnref36" class="footnote-backref">↩︎</a></p></li><li id="fn37" class="footnote-item"><p>诵法：称颂并效法。 <a href="#fnref37" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为谭秦东被鸿茅药酒“跨省抓捕”事件，开始注意到中药，然后了解到中医，才发现中医的荒谬。这篇文章是梁启超1921年批判阴阳五行的，然作为中医的基本理论，有必要了解它的来历。我在360图书馆找到，&lt;a href=&quot;http://www.360doc.com/showwebdoc/0/0/882999442.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;梁启超：阴阳五行说之来历&lt;/a&gt;, 识图软件扫描提取文字，批注一些生涩的词语，可能有误，欢迎指正。格式可能乱了，&lt;a href=&quot;https://pan.baidu.com/s/1XWbZ-z5CgtogYcipwP2Vkg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度网盘获取原文&lt;/a&gt; 提取码：wpf6&lt;/p&gt;
    
    </summary>
    
      <category term="中医" scheme="https://JackChouMine.github.io/categories/%E4%B8%AD%E5%8C%BB/"/>
    
    
      <category term="中医" scheme="https://JackChouMine.github.io/tags/%E4%B8%AD%E5%8C%BB/"/>
    
      <category term="阴阳五行" scheme="https://JackChouMine.github.io/tags/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C/"/>
    
      <category term="伪科学" scheme="https://JackChouMine.github.io/tags/%E4%BC%AA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Windows7下的包管理器Chocolatey的安装及使用</title>
    <link href="https://JackChouMine.github.io/2019/10/07/Windows7%E4%B8%8B%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8Chocolatey%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://JackChouMine.github.io/2019/10/07/Windows7下的包管理器Chocolatey的安装及使用/</id>
    <published>2019-10-07T13:16:39.000Z</published>
    <updated>2020-07-29T13:03:01.708Z</updated>
    
    <content type="html"><![CDATA[<p>以前安装过 chocolatey，win7 下报错，试了几次都没成功，今天学习 electron，又安装了一次，居然成功了。记录一下安装和使用。</p><a id="more"></a><hr><p><ul class="markdownIt-TOC"><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li><li><a href="#%E4%BD%BF%E7%94%A8-gui">使用 gui</a></li><li><a href="#%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95">其他用法</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>win7 终端下，或者cmder下，输入下面的字符串，然后回车:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="string">"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe"</span> -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span><br></pre></td></tr></table></figure><p>没有错就显示安装信息了，安装成功后可能会报警告，别管它，然后检查是否安装成功：<br>在 git bash 或者 cmder 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco</span><br></pre></td></tr></table></figure><p>显示版本号等信息，就表示安装成功了。</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p><code>choco -h</code> 可查看常用命令，这里记录常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">choco &lt;<span class="built_in">command</span>&gt; -h <span class="comment"># 查看命令帮助 choco list -h  查看 list 用法</span></span><br><span class="line">choco list &lt;filter&gt; <span class="comment"># 搜索本地或者远程的安装包  clist 简写 search / find 和 list 功能相同</span></span><br><span class="line">choco list -li <span class="comment"># 查看本地安装的软件</span></span><br><span class="line">choco list -lo <span class="comment"># 列出已安装</span></span><br><span class="line">choco list --<span class="built_in">local</span> <span class="comment"># 查看本地通过 choco 安装的软件</span></span><br><span class="line">choco info &lt;pkg&gt; <span class="comment"># 查看安装包信息</span></span><br><span class="line"></span><br><span class="line">choco install &lt;pkg1&gt; &lt;pkg2&gt; <span class="comment"># 安装</span></span><br><span class="line">choco install --yes &lt;pkg1&gt; &lt;pkg2&gt; <span class="comment"># 安装时无需确认</span></span><br><span class="line">choco install &lt;pkg&gt; -y <span class="comment"># 同上</span></span><br><span class="line">cinst &lt;pkg&gt; -y --dir DIR <span class="comment"># 指定 DIR 为安装路径</span></span><br><span class="line">cinst &lt;pkg&gt; --version n <span class="comment">#指定版本号安装</span></span><br><span class="line">choco uninstall &lt;pkg&gt; <span class="comment"># 卸载软件</span></span><br><span class="line">cuninst &lt;pkg&gt; <span class="comment"># 卸载</span></span><br><span class="line"></span><br><span class="line">choco outdated <span class="comment"># 查看可更新的软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">choco upgrade &lt;pkg|all&gt; [&lt;pkg&gt;] <span class="comment"># 更新所有或多个软件</span></span><br><span class="line">cup &lt;pkg|all&gt; [&lt;pkg&gt;] <span class="comment"># 更新所有或多个软件</span></span><br><span class="line">cup &lt;pkg&gt; --version 1.0.0 <span class="comment"># 更新某个版本</span></span><br></pre></td></tr></table></figure><h2 id="使用-gui"><a class="markdownIt-Anchor" href="#使用-gui"></a> 使用 gui</h2><p>使用命令不习惯，还可以使用 gui。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cinst chocolateygui -y <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><p>在<code>所有程序</code>里搜索<code>choco</code> ，点击启动gui了。</p><p>还可在 <a href="https://chocolatey.org/packages" target="_blank" rel="noopener">chocolatey商店</a> 查找软件。</p><h2 id="其他用法"><a class="markdownIt-Anchor" href="#其他用法"></a> 其他用法</h2><p>修改安装的默认路径：</p><ul><li>花钱使用高级版本；</li><li>修改注册表，谨慎操作，修改了，可能会导致某些软件运行报错，比如firefox。</li></ul><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://blog.csdn.net/u013253924/article/details/83149821" target="_blank" rel="noopener">Windows7下的包管理器Chocolatey的安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/57663273" target="_blank" rel="noopener">Window上更方便的软件安装方式 — Chocolatey</a></li><li><a href="https://blog.tdccc.com.tw/319/" target="_blank" rel="noopener">Chocolatey软体管理神器</a></li><li><a href="https://blog.csdn.net/vrmogui/article/details/88593365" target="_blank" rel="noopener">设置软件默认安装路径（一劳永逸）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前安装过 chocolatey，win7 下报错，试了几次都没成功，今天学习 electron，又安装了一次，居然成功了。记录一下安装和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://JackChouMine.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="数码产品" scheme="https://JackChouMine.github.io/tags/%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo + github搭建个人主页</title>
    <link href="https://JackChouMine.github.io/2019/10/06/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://JackChouMine.github.io/2019/10/06/hexo搭建博客/</id>
    <published>2019-10-05T18:02:19.000Z</published>
    <updated>2019-10-05T18:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>大学时搭建过 github 博客，但是后来没怎么弄了。感觉有点折腾，就没有继续维护了，今天再来重新搭建一个博客。本文记录搭建操作。</p><a id="more"></a><hr><p><ul class="markdownIt-TOC"><li><a href="#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86">预备知识：</a></li><li><a href="#%E5%AE%89%E8%A3%85-hexo">安装 hexo</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BB%93%E5%BA%93">创建托管博客的仓库</a></li><li><a href="#%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E5%88%B0-gitbub">部署本地博客到 gitbub</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">创建文章</a></li><li><a href="#%E7%BB%99-markdown-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87">给 markdown 文章加入图片</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E8%AF%B4%E6%98%8E">高级主题[^说明]</a><ul><li><a href="#%E6%B8%B2%E6%9F%93%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95toc">渲染文章目录(TOC)</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD">增加评论功能</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1">增加访客统计</a></li><li><a href="#%E5%A2%9E%E5%8A%A0-stackoverflow-%E6%8A%80%E6%9C%AF%E5%AA%92%E4%BD%93">增加 stackoverflow 技术媒体</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E">增加版权声明</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB">增加推荐阅读</a></li></ul></li><li><a href="#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">写在最后</a></li></ul></p><h2 id="预备知识"><a class="markdownIt-Anchor" href="#预备知识"></a> 预备知识：</h2><ul><li>npm 命令；</li><li>git 命令</li><li>github 常见操作</li></ul><p>环境要求：</p><ul><li>node</li><li>git</li></ul><p>我的环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git version</span><br><span class="line">git version 2.15.1.windows.2</span><br><span class="line">$ node -v</span><br><span class="line">v8.11.1</span><br><span class="line">$ npm -v</span><br><span class="line">6.4.0</span><br></pre></td></tr></table></figure><h2 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure><p>在某个文件夹内初始化 hexo 博客所需要的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir myBlog  <span class="comment"># /e/HexoPages 新建一个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> myBlog</span><br><span class="line">hexo init <span class="comment"># 初始化一个hexo博客需要的资源</span></span><br></pre></td></tr></table></figure><p>得到如下目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml <span class="comment"># 网站的配置信息，您可以在此配置大部分的参数。 </span></span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds <span class="comment"># 模版文件夹</span></span><br><span class="line">├── <span class="built_in">source</span>  <span class="comment"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span></span><br><span class="line">|   ├── _drafts <span class="comment"># 草稿文件</span></span><br><span class="line">|   └── _posts <span class="comment"># 文章Markdowm文件 </span></span><br><span class="line">└── themes  <span class="comment"># 主题文件夹</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="comment"># 安装 npm 依赖</span></span><br></pre></td></tr></table></figure><p>本地预览博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开<code>http://localhost:4000</code>即可看到效果。</p><p><img src="https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/hexo%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98.png" alt="hexo默认主题" title="hexo默认主题"></p><h2 id="创建托管博客的仓库"><a class="markdownIt-Anchor" href="#创建托管博客的仓库"></a> 创建托管博客的仓库</h2><p>仓库名字必须用<code>用户名.github.io</code>，需要公开。</p><h2 id="部署本地博客到-gitbub"><a class="markdownIt-Anchor" href="#部署本地博客到-gitbub"></a> 部署本地博客到 gitbub</h2><ol><li>修改<code>_config.yml</code></li></ol><p>打开 _config.yml ，将 deploy 修改如下<strong>注意空格</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git <span class="comment"># 版本管理工具</span></span><br><span class="line">  repo: <span class="comment"># 仓库信息</span></span><br><span class="line">    github: https://github.com/JackZhouMine/jackzhoumine.github.io</span><br><span class="line">  branch: master <span class="comment"># 使用分支</span></span><br></pre></td></tr></table></figure><p>其他配置也可以修改，比如我将站点信息修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title:jackzhoumine</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: jackzhoumine</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 hexo-deployer-git</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-deployer-git</span><br></pre></td></tr></table></figure><ol start="3"><li>部署</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>打开我的主页链接 <code>https://jackzhoumine.github.io</code>，看到页面就部署成功了。</p><p><img src="https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/myblog1.png" alt="部署成功" title="部署成功的页面"></p><h2 id="创建文章"><a class="markdownIt-Anchor" href="#创建文章"></a> 创建文章</h2><ol><li>创建文章</li></ol><p>执行<code>hexo new '文章标题'</code>，会在source/_posts文件夹内新建一个md文件，就可在里面写文章了，当然也可以手动创建。</p><p><code>hexo new</code> 简写成 <code>hexo n</code>。</p><ol start="2"><li>预览效果</li></ol><p>创建完成，执行以下命令,在本地预览效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">hexo s g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo S --draft <span class="comment"># 预览草稿</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建草稿</li></ol><p>可先创建草稿，想发布时，在发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">"文章标题"</span> <span class="comment"># 会在 /source/-drafts 里生成草稿</span></span><br><span class="line">hexo publish filename <span class="comment"># 将草稿发布成文章，会进入 post 目录</span></span><br></pre></td></tr></table></figure><p>如何批量发布呢？</p><ol start="4"><li>部署到线上</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非必需</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存文件（db.json）和静态文件。更改后不生效，就需要运行该命令。</span></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d g <span class="comment"># 部署到线上</span></span><br></pre></td></tr></table></figure><ol start="5"><li>更新已发布的文章</li></ol><p>最简单的是修改完文章后，再部署一次。</p><p>文章加上更新时间，可在主题里配置。<br>我使用更加粗暴的方法，每次更新文章，就使用 vs code 扩展 <code>Insert Date String</code> 插入当前时间。</p><h2 id="给-markdown-文章加入图片"><a class="markdownIt-Anchor" href="#给-markdown-文章加入图片"></a> 给 markdown 文章加入图片</h2><p>使用本地图片，markdown 笔记移动后，图片路径失效，免费的图床可能到倒闭，毕竟都是小公司。解决办法是将所有图片在一个git仓库里管理起来，托管在 github （没有巨硬这个财大气粗的土豪做后台，也倒不了）上，安全放心。<br>需要用到图片时，打开图片，然后在代码块左上方点 <code>Download</code> 按钮，打开的新标签里只有图片了，复制地址栏图片链接，类似<code>https://raw.githubusercontent.com/xxxx</code>到文章里，就可放心饮用了。</p><h2 id="高级主题说明"><a class="markdownIt-Anchor" href="#高级主题说明"></a> 高级主题[^说明]</h2><p>可以为博客增加评论功能，方便与他人交流。增加访客统计等。</p><h3 id="渲染文章目录toc"><a class="markdownIt-Anchor" href="#渲染文章目录toc"></a> 渲染文章目录(TOC)</h3><p>hexo 默认的渲染模块，不支持渲染TOC的，可使用<a href="https://www.npmjs.com/package/hexo-renderer-markdown-it-plus" target="_blank" rel="noopener">hexo-renderer-markdown-it-plus</a>实现渲染 TOC。</p><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked <span class="comment"># 卸载原来的渲染模块</span></span><br><span class="line">npm i hexo-renderer-markdown-it-plus -S</span><br></pre></td></tr></table></figure><ul><li>修改配置<br>在配置文件中加入以下选项：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 渲染 TOC</span></span><br><span class="line">markdown_it_plus:</span><br><span class="line">    highlight: <span class="literal">true</span></span><br><span class="line">    html: <span class="literal">true</span></span><br><span class="line">    xhtmlOut: <span class="literal">true</span></span><br><span class="line">    breaks: <span class="literal">true</span></span><br><span class="line">    langPrefix:</span><br><span class="line">    linkify: <span class="literal">true</span></span><br><span class="line">    typographer:</span><br><span class="line">    quotes: “”‘’</span><br><span class="line">    pre_class: highlight</span><br></pre></td></tr></table></figure><p>还可以看模块文档，配置其他高级选项。</p><ul><li>写文章<br>只写 <code>TOC</code>，是不会渲染目录的，需要加上<code>@</code>,并且不会渲染一级标题。推荐在摘要后面写目录，并用横线分隔摘要。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">@[TOC]</span><br></pre></td></tr></table></figure><h3 id="增加评论功能"><a class="markdownIt-Anchor" href="#增加评论功能"></a> 增加评论功能</h3><p><s>yilia 主题配置开启就可。<br>疑问：为何disqus评论底部会显示其他博客的评论内容呢？</s></p><h3 id="增加访客统计"><a class="markdownIt-Anchor" href="#增加访客统计"></a> 增加访客统计</h3><p><s>使用不蒜子统计功能，免费好用。<br>打开 <code>themes/yilia/layout/_partial/footer.ejs</code>，<br>在id为<code>footer-info</code>的div后面增加以下内容：</s></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div calss=&quot;count-span&quot;&gt;</span><br><span class="line">      &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">        总访问量: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;|</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">        总访客: &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><s>在footer顶部增加统计脚本：</s></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><s>部署即可看到效果了，可增加一些好看的样式。</s></p><h3 id="增加-stackoverflow-技术媒体"><a class="markdownIt-Anchor" href="#增加-stackoverflow-技术媒体"></a> 增加 stackoverflow 技术媒体</h3><p><s>yilia 主题没有引入 stackoverflow ,可执行增加。<br>Acfun已经凉了，在 <code>themes\yilia\source\main.0cf68a.css</code>中搜索acfun，替换成stackoverflow，图标就不换了。</s></p><h3 id="增加版权声明"><a class="markdownIt-Anchor" href="#增加版权声明"></a> 增加版权声明</h3><p>比较简单，<a href="https://blog.zscself.com/posts/ee4d9ecb/" target="_blank" rel="noopener">参考</a></p><h3 id="增加推荐阅读"><a class="markdownIt-Anchor" href="#增加推荐阅读"></a> 增加推荐阅读</h3><p>推荐阅读是通过插件 hexo-recommended-posts 来实现的, 它不仅可以推荐你自己的博客, 还可以推荐别人的相关博客. 如果有比较多人使用这个插件的话, 不仅能帮读者快速找到感兴趣的内容, 同时也能增加自己博客的流量。</p><ol><li>在 post 中增加 <code>recommended-post.ejs</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.recommended_posts.enable &amp;&amp; !index) &#123;%&gt;</span><br><span class="line">  &lt;div class=&quot;recommended_posts&quot;&gt;</span><br><span class="line">    &lt;h3&gt;推荐阅读&lt;/h3&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &lt;% let post_list = recommended_posts(page, site) %&gt;</span><br><span class="line">    &lt;% for (let i in post_list)&#123;%&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= post_list[i].permalink %&gt;&quot;  title=&quot;&lt;%= post_list[i].title %&gt;&quot; target=&apos;_blank&apos;&gt;</span><br><span class="line">        &lt;%- post_list[i].title %&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;%&#125;else&#123;%&gt;</span><br><span class="line">   &lt;div class=&quot;recommended_posts&quot; hidden&gt;&lt;/div&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 _patial 中增加样式 <code>recommended-post.styl</code></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.recommended_posts</span></span><br><span class="line">    <span class="selector-tag">padding</span>: 0<span class="selector-class">.5em</span> 1<span class="selector-tag">em</span>;</span><br><span class="line">    <span class="selector-tag">border-left</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#6f42c1</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#efefef</span>;</span><br><span class="line">    <span class="selector-tag">li</span> &#123; <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline;<span class="attribute">color</span>: red&#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>style.styl</code>和<code>article.ejs</code>中引入样式和ejs<br><code>@import &quot;_partial/recommended-post&quot;</code></li></ol><p>引入的 ejs 放在评论上边。</p><ol start="4"><li>增加配置项</li></ol><p>在主题的配置中增加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐阅读 需要 hexo-recommended-posts 支持</span></span><br><span class="line"><span class="attr">recommended_posts:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 启用文章推荐</span></span><br></pre></td></tr></table></figure><p>在博客配置增加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐阅读 需要 hexo-recommended-posts 支持</span></span><br><span class="line"><span class="attr">recommended_posts:</span></span><br><span class="line"><span class="attr">  autoDisplay:</span> <span class="literal">false</span> <span class="comment">#设置为 fasle，不采用默认样式</span></span><br></pre></td></tr></table></figure><ol start="5"><li>安装 hexo-recommended-posts</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-recommended-posts</span><br></pre></td></tr></table></figure><ol start="6"><li>预览效果</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo recommend &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>参考：<a href="https://juejin.im/entry/5aef8e995188256712786e43" target="_blank" rel="noopener">为 hexo maupassant 主题添加文章版权信息和推荐阅读功能 </a></p><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>发现一些网站，专门爬取别人写的文章，也不注明出处，该今后发表文章，都增加不限于打赏码、微信公众号等信息。</p><p>[^说明]：使用ocean主题，yilia 主题设置就删除了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学时搭建过 github 博客，但是后来没怎么弄了。感觉有点折腾，就没有继续维护了，今天再来重新搭建一个博客。本文记录搭建操作。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://JackChouMine.github.io/categories/node/"/>
    
    
      <category term="hexo" scheme="https://JackChouMine.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git 学习笔记</title>
    <link href="https://JackChouMine.github.io/2019/10/06/git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://JackChouMine.github.io/2019/10/06/git-学习笔记/</id>
    <published>2019-10-05T17:57:52.000Z</published>
    <updated>2020-07-29T13:03:01.708Z</updated>
    
    <content type="html"><![CDATA[<p>Git是一个分布式版本控制系统（CVS），可以记录<strong>文本文件</strong>的<strong>变化</strong>（<em>修改、增加、删除等操作</em>），比如 TXT、HTML、程序源代码等，<span style="color:red;">不能记录其他文件（图片、音频等二进制文件）的变化，不能记录word文档的变化。</span></p><a id="more"></a><p><ul class="markdownIt-TOC"><li><a href="#git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C">Git常见操作</a><ul><li><a href="#%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3">配置相关</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE">查看配置</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE">添加配置</a></li><li><a href="#%E5%88%A0%E9%99%A4%E9%85%8D%E7%BD%AE">删除配置</a></li><li><a href="#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">编辑配置文件</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%96%B0%E4%BB%93%E5%BA%93">创建新仓库</a></li><li><a href="#%E5%85%8B%E9%9A%86%E5%B7%B2%E6%9C%89%E4%BB%93%E5%BA%93">克隆已有仓库</a></li></ul></li><li><a href="#%E6%B7%BB%E5%8A%A0%E6%9B%B4%E6%94%B9">添加更改</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6">重命名已跟踪的文件</a></li><li><a href="#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9">撤销修改</a></li><li><a href="#%E4%BB%8E%E6%9A%82%E5%AD%98%E5%8C%BA%E6%92%A4%E5%9B%9E">从暂存区撤回</a></li><li><a href="#commit-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C">commit 相关操作</a><ul><li><a href="#%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%94%B9%E5%88%B0%E4%BB%93%E5%BA%93">提交更改到仓库</a></li><li><a href="#%E5%90%88%E5%B9%B6-commit">合并 commit</a></li></ul></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%AF%94%E8%BE%83-git-diff">修改比较 git diff</a></li><li><a href="#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80">版本回退</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95">查看提交记录</a></li><li><a href="#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80-2">版本回退</a></li></ul></li></ul></li><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA">工作区和暂存区</a><ul><li><a href="#status-%E5%92%8C-diff-%E6%AF%94%E8%BE%83%E7%9A%84%E6%98%AF%E5%93%AA%E4%BA%9B">status 和 diff 比较的是哪些？</a><ul><li><a href="#diff-%E7%9A%84%E6%AF%94%E8%BE%83">diff 的比较</a><ul><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%AF%94%E8%BE%83">工作区和暂存区的比较</a></li><li><a href="#%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C-head-%E6%AF%94%E8%BE%83">暂存区和 HEAD 比较</a></li><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C-head-%E6%AF%94%E8%BE%83">工作区和 HEAD 比较</a></li><li><a href="#%E5%88%86%E6%94%AF%E6%AF%94%E8%BE%83">分支比较</a></li><li><a href="#%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83%E7%BB%93%E6%9E%9C">输出比较结果</a></li></ul></li><li><a href="#status-%E7%9A%84%E6%AF%94%E8%BE%83">status 的比较</a></li></ul></li><li><a href="#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9-2">撤销修改</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6">删除文件</a></li></ul></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">远程仓库</a><ul><li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">关联远程仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">查看远程仓库</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%85%B3%E8%81%94">删除本地分支和远程分支的关联</a></li><li><a href="#%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送本地修改到远程仓库</a></li><li><a href="#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6">分支合并</a><ul><li><a href="#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%96%B9%E6%B3%95%E4%B8%80%E6%8E%A8%E8%8D%90">合并分支方法一（推荐）</a></li><li><a href="#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%96%B9%E6%B3%95%E4%BA%8C">合并分支方法二</a></li><li><a href="#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E6%96%B9%E6%B3%95%E4%B8%89">分支合并方法三</a></li></ul></li><li><a href="#%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96%E5%90%88%E5%B9%B6">强制覆盖合并</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AF%8F%E6%AC%A1%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81">如何避免每次输入密码?</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF">查看分支</a></li><li><a href="#%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF">新建分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF">重命名分支</a></li></ul></li><li><a href="#%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA">已跟踪的文件取消跟踪</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6">删除已跟踪的文件</a></li><li><a href="#gitignore-%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3">.gitignore 文件相关</a><ul><li><a href="#%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99">忽略规则</a><ul><li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%84%E5%88%99%E6%A8%A1%E5%BC%8F">常见的规则模式</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%BF%BD%E7%95%A5%E6%96%B9%E5%BC%8F">其他忽略方式</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%A1%B9%E7%9B%AE%E7%9A%84-gitignore-%E6%96%87%E4%BB%B6">常见项目的 .gitignore 文件</a></li><li><a href="#%E5%88%97%E5%87%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">列出忽略的文件</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6">删除忽略文件</a></li><li><a href="#%E5%88%97%E5%87%BA%E8%A2%AB%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6">列出被跟踪的文件</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC%E8%90%BD%E5%90%8E%E4%BA%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC">本地仓库版本落后于远程仓库版本</a></li><li><a href="#git%E6%8E%A8%E9%80%81%E6%8F%90%E7%A4%BAremote-origin-already-exists">Git推送提示：remote origin already exists</a></li></ul></li><li><a href="#todo">todo</a><ul><li><a href="#git-%E8%BF%9B%E9%98%B6">git 进阶</a></li></ul></li></ul></p><h2 id="git常见操作"><a class="markdownIt-Anchor" href="#git常见操作"></a> Git常见操作</h2><h3 id="配置相关"><a class="markdownIt-Anchor" href="#配置相关"></a> 配置相关</h3><p>配置分为系统配置、全局配置和仓库配置，全局配置一般对该电脑的使用这都是有效的，也就对所有仓库有效了，仓库配置只对某个仓库有效。命令加<code>--global</code>是全局配置。</p><h4 id="查看配置"><a class="markdownIt-Anchor" href="#查看配置"></a> 查看配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global -l <span class="comment"># 全局配置</span></span><br><span class="line">git config --<span class="built_in">local</span> -l <span class="comment"># 仓库配置</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --add &lt;key&gt; value</span><br></pre></td></tr></table></figure><h4 id="删除配置"><a class="markdownIt-Anchor" href="#删除配置"></a> 删除配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;key&gt; <span class="comment"># 删除全局 key 配置</span></span><br></pre></td></tr></table></figure><h4 id="编辑配置文件"><a class="markdownIt-Anchor" href="#编辑配置文件"></a> 编辑配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -e <span class="comment"># -e 是 --edit 的别名，会在编辑器中打开配置文件。编辑后配置，配置就生效了。</span></span><br></pre></td></tr></table></figure><p>###创建版本仓库</p><h4 id="创建新仓库"><a class="markdownIt-Anchor" href="#创建新仓库"></a> 创建新仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在某个文件下，该文件夹成为一个 git 仓库，生成一个 .git 文件夹</span></span><br><span class="line">git init</span><br><span class="line">git init &lt;fileName&gt; <span class="comment"># 将 fileName 初始化为一个 git 仓库</span></span><br><span class="line"><span class="comment"># 帮助命令</span></span><br><span class="line">git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a</span><br><span class="line">./  ../  .git/</span><br></pre></td></tr></table></figure><p><em>.git 文件夹内的内容不可轻易改动，里面记录了文件变化</em></p><h4 id="克隆已有仓库"><a class="markdownIt-Anchor" href="#克隆已有仓库"></a> 克隆已有仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; <span class="comment"># 在某个文件内执行，会在该文件里生成一个仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt; <span class="comment"># 克隆仓库到指定目录</span></span><br></pre></td></tr></table></figure><p>clone 做了4件事：</p><ul><li><code>repo</code>的文件夹被创建；</li><li>仓库的所有文件和<code>提交</code>都被下载到<code>repo</code>内；</li><li>在<code>repo</code>文件内初始化一个git仓库；</li><li>一个远程分支<code>origin</code>被创建,关联了该URL；</li><li>本地有一个分支（默认名字为<code>master</code>）。<br><strong>四种协议克隆</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH 协议</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:fsliurujie/test.git</span><br><span class="line"><span class="comment"># HTTPS 协议</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/fsliurujie/test.git</span><br><span class="line"><span class="comment"># GIT协议</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/fsliurujie/test.git</span><br><span class="line"><span class="comment"># HTTP 协议</span></span><br><span class="line">git <span class="built_in">clone</span> http:////github.com/fsliurujie/test.git</span><br></pre></td></tr></table></figure><p><strong>ssh vs https</strong><br>ssh 和 http 是常见的两种克隆方法：</p><table><thead><tr><th style="text-align:center">协议</th><th style="text-align:center">是否配置SSH key</th><th style="text-align:center">速度</th><th style="text-align:center">PUSH</th></tr></thead><tbody><tr><td style="text-align:center">ssh</td><td style="text-align:center">√</td><td style="text-align:center">快</td><td style="text-align:center">仓库管理员无需密码</td></tr><tr><td style="text-align:center">https</td><td style="text-align:center">×</td><td style="text-align:center">较慢</td><td style="text-align:center">需要用户名和密码</td></tr></tbody></table><p>创建仓库时可能会用到的其他操作：</p><ul><li><strong>创建文件夹</strong>: mkdir  fileName  创建目录</li><li><strong>创建文件</strong>: touch  documentName  创建文件</li><li><strong>删除文件 ：</strong> rm fileName  删除非空文件夹</li><li><strong>强制删除非空文件 ：</strong> <em>rm -rf  fileName</em>   f -force 强制删除文件（夹），没有提示 -r–recursive 递归删除 删除空文件可用这个</li></ul><h3 id="添加更改"><a class="markdownIt-Anchor" href="#添加更改"></a> 添加更改</h3><p>添加跟踪的文件之前，一般需要设置排除跟踪的文件，即创建<code>.gitignore</code>文件。<br>不知道如何编写？复制来，按需修改即可。<br><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">各种项目的gitignore模板</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;fileName&gt; <span class="comment"># 添加某一个文件到暂存区</span></span><br><span class="line">git add *.js <span class="comment"># 增加所有 js 文件的修改</span></span><br><span class="line">git add -u <span class="comment"># git add --update 添加修改（modified)和删除（delete）文件（跟踪的文件），不添加（new）新增文件</span></span><br><span class="line">git add . <span class="comment"># 添加新增和修改，不添加删除</span></span><br><span class="line">git add -A <span class="comment"># git add -all, 合并 git add -u 和 git add . 即添加新增、修改和删除</span></span><br></pre></td></tr></table></figure><h3 id="重命名已跟踪的文件"><a class="markdownIt-Anchor" href="#重命名已跟踪的文件"></a> 重命名已跟踪的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv old-name new-name</span><br></pre></td></tr></table></figure><p>该命令和直接重命名文件，然后 <code>git rm old-file</code>,<code>git add new-old</code>是一样的。</p><h3 id="撤销修改"><a class="markdownIt-Anchor" href="#撤销修改"></a> 撤销修改</h3><p>在 commit 提交前，不想添加修改，可<code>撤掉更改</code>—<code>文件修改会消失，这是非常危险的操作</code> <em>除非你确实清楚不想要那个文件了，否则不要使用这个命令。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- 必须有，没有是分支切换命令</span></span><br><span class="line">git checkout --file</span><br></pre></td></tr></table></figure><ul><li><code>add</code> 后修改，<code>checkout</code>回到<strong>最近一次</strong>add后的状态，还未 add 的更改消失；</li><li><code>commit</code>后修改，<code>checkout</code>回到<strong>最近一次</strong>commit 后的状态，更改消失；</li><li>总的来说，<strong>checkout 是撤掉修改</strong>。</li></ul><p>添加文件也是一种修改，<code>checkout</code>的另一个作用是找回删错的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm file <span class="comment"># file 不是你想删除的文件，</span></span><br><span class="line">git checkout --file <span class="comment"># 找回误删的文件，但是最近一次 add/commit 后的修改丢失了</span></span><br></pre></td></tr></table></figure><h3 id="从暂存区撤回"><a class="markdownIt-Anchor" href="#从暂存区撤回"></a> 从暂存区撤回</h3><p>-<strong>从暂存区撤回</strong>：git  rm --cached</p><p>usage: git rm [<options>] [–] <file>…<br>-n, --dry-run         dry run<br>-q, --quiet           do not list removed files<br>–cached              only remove from the index<br>-f, --force           override the up-to-date check<br>-r                    allow recursive removal<br>–ignore-unmatch      exit with a zero status even if nothing matched</file></options></p><p><strong>撤回很多文件如何操作？？？</strong></p><h3 id="commit-相关操作"><a class="markdownIt-Anchor" href="#commit-相关操作"></a> commit 相关操作</h3><h4 id="提交更改到仓库"><a class="markdownIt-Anchor" href="#提交更改到仓库"></a> 提交更改到仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m  提交说明</span><br><span class="line">git commit -a <span class="comment"># 在编辑器中写提交说明</span></span><br></pre></td></tr></table></figure><h4 id="合并-commit"><a class="markdownIt-Anchor" href="#合并-commit"></a> 合并 commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看提交历史</span></span><br></pre></td></tr></table></figure><p>当前历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">commit a00766289ef.......</span><br><span class="line">    待合并commit</span><br><span class="line">commit 22281fca7bf.......</span><br><span class="line">    第三方库和业务代码分开打包</span><br><span class="line">commit 7828194fe69.......</span><br><span class="line">    各页面分开打包</span><br></pre></td></tr></table></figure><p>需要合并’待合并commit’和’第三方库和业务代码分开打包’</p><p>先 rebase 操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 7828194f <span class="comment"># 参数 i 是不需要合并的commit</span></span><br></pre></td></tr></table></figure><p>执行完该命令，会进入交互模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">p e2d34a8 脚本配置自定义参数</span><br><span class="line">s 004fb27 修改README</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase bd25857..004fb27 onto bd25857 (2 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like "squash", but discard this commit's log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p><code>pick</code> 会执行 commit<br><code>squash</code> 该 commit 会合并到前一个commit</p><p>把第二条命令改为<code>s</code>，保存并退出，会进入commit message 编辑界面，可编辑新的commit message。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 2 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">脚本配置自定义参数</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">修改README</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Fri Feb 15 17:31:30 2019 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto bd25857</span></span><br><span class="line"><span class="comment"># Last commands done (2 commands done):</span></span><br><span class="line"><span class="comment">#    pick e2d34a8 脚本配置自定义参数</span></span><br><span class="line"><span class="comment">#    squash 004fb27 修改README</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch 'master' on 'bd25857'.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#modified:   .gitignore</span></span><br><span class="line"><span class="comment">#modified:   README.md</span></span><br><span class="line"><span class="comment">#new file:   config/default.js</span></span><br><span class="line"><span class="comment">#new file:   config/dev.js</span></span><br><span class="line"><span class="comment">#modified:   package.json</span></span><br><span class="line"><span class="comment">#modified:   webpack.config.js</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="修改比较-git-diff"><a class="markdownIt-Anchor" href="#修改比较-git-diff"></a> 修改比较 git diff</h3><p><strong>git status</strong> 命令是查看仓库状态，文件是否被修改，修改会哪些文件还没提交等，不知道修改的具体内容。<br>-<strong>查看修改的内容</strong>：git diff  比较的是 暂存区的文件和本地文件。<br><strong>有变化的内会用红色和绿色标记</strong></p><h3 id="版本回退"><a class="markdownIt-Anchor" href="#版本回退"></a> 版本回退</h3><h4 id="查看提交记录"><a class="markdownIt-Anchor" href="#查看提交记录"></a> 查看提交记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> </span><br><span class="line">git <span class="built_in">log</span>  --pretty=oneline  <span class="comment">#在一行显示提交记录</span></span><br></pre></td></tr></table></figure><h4 id="版本回退-2"><a class="markdownIt-Anchor" href="#版本回退-2"></a> 版本回退</h4><p><strong>HEAD</strong> : 表示当前版本。<br>我们可回退到其他版本。<br><em>HEAD^</em> ：上一个版本，<em>HEAD^^</em> ： 上上个版本。<br><em>HEAD~n</em> ：往前第 n 个版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commitID&gt; <span class="comment"># 回退到 commitID 为版本 推荐使用</span></span><br><span class="line">git reset --hard HEAD~n <span class="comment"># 回退到往前第 n 个版本</span></span><br></pre></td></tr></table></figure><p>回退我反悔了，又想回到之前的版本呢？</p><ol><li>查看 commitID:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><ol start="2"><li>版本穿梭</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitID <span class="comment"># 根据commitID 回退</span></span><br></pre></td></tr></table></figure><h2 id="工作区和暂存区"><a class="markdownIt-Anchor" href="#工作区和暂存区"></a> 工作区和暂存区</h2><ul><li><strong>工作区（工作目录）</strong> : 本地电脑文件夹，该文件夹里有你需要版本控制的文件。</li><li><strong>版本仓库Repository</strong>：工作区里有一个隐藏的 .git 文件夹，这不是工作区，这是 Git 仓库。</li><li><strong>暂存区Stage</strong>：版本仓库里有暂存区区，Git add 先添加到这里。</li><li><strong>分支</strong> :  仓库里有一个分支，git commit 把修改从暂存区提交到分支，一本版本仓库里可能有多个分支。<br><img src="./%E5%B7%A5%E4%BD%9C%E5%8C%BA---%E6%9A%82%E5%AD%98%E5%8C%BA---%E7%89%88%E6%9C%AC%E5%BA%93.bmp" alt="Alt text"></li></ul><h3 id="status-和-diff-比较的是哪些"><a class="markdownIt-Anchor" href="#status-和-diff-比较的是哪些"></a> status 和 diff 比较的是哪些？</h3><h4 id="diff-的比较"><a class="markdownIt-Anchor" href="#diff-的比较"></a> diff 的比较</h4><p>diff 可比较工作区和暂存区、工作区和HEAD、暂存区和 HEAD、两个分支、两个提交、两个文件、两个 bolb之间的差异。</p><h5 id="工作区和暂存区的比较"><a class="markdownIt-Anchor" href="#工作区和暂存区的比较"></a> 工作区和暂存区的比较</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="comment"># 比较所有文件</span></span><br><span class="line">git diff -- file1 file2 <span class="comment"># 比较个别文件</span></span><br></pre></td></tr></table></figure><h5 id="暂存区和-head-比较"><a class="markdownIt-Anchor" href="#暂存区和-head-比较"></a> 暂存区和 HEAD 比较</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached  <span class="comment"># 暂存区和HEAD的比较 比较所有文件</span></span><br><span class="line">git diff --cached -- file1 file2 比较个别文件</span><br><span class="line">git diff --staged  <span class="comment"># 暂存区和HEAD的比较</span></span><br></pre></td></tr></table></figure><h5 id="工作区和-head-比较"><a class="markdownIt-Anchor" href="#工作区和-head-比较"></a> 工作区和 HEAD 比较</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD <span class="comment"># 比较所有文件</span></span><br><span class="line">git diff HEAD -- file1 file2 <span class="comment"># 比较个别文件</span></span><br></pre></td></tr></table></figure><h5 id="分支比较"><a class="markdownIt-Anchor" href="#分支比较"></a> 分支比较</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff branch-name <span class="comment"># 分支 branch-name 的 HEAD 和当前分支 HEAD 比较</span></span><br><span class="line">git diff branch-name1 branch-name2 <span class="comment"># 两个分支的 HEAD 比较</span></span><br><span class="line">git diff HEAD HEAD~1 <span class="comment"># 当前 HEAD 和上一个 HEAD 比较（两个 commit 的比较）</span></span><br><span class="line">git diff commitID1 commitID2 <span class="comment"># 两个 commit 的比较</span></span><br></pre></td></tr></table></figure><h5 id="输出比较结果"><a class="markdownIt-Anchor" href="#输出比较结果"></a> 输出比较结果</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt;&gt; diff.txt <span class="comment"># 将比较结果输出到 diff.txt 文件中</span></span><br></pre></td></tr></table></figure><h4 id="status-的比较"><a class="markdownIt-Anchor" href="#status-的比较"></a> status 的比较</h4><p>实验：</p><ul><li><strong>修改→status</strong>：文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ;</li><li><strong>修改→add→status</strong>：提示更改没commit，可以git reset回退版本。</li><li><strong>修改→add→修改→status</strong>：提示更改没commit，可以git reset回退版本。 提示 文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ；</li><li><strong>修改→add→commit→status</strong>：工作区干净。</li></ul><p><strong>结论：</strong></p><ol><li><strong>提示没有commit，比较的是暂存区和分支，可进行commit 或者 reset ;</strong></li><li><strong>提示没有 add，比较的是工作区和暂存区，可 add 到暂存区和 checkout ，放弃更改；</strong></li><li><strong>status 比较的是工作区和暂存区，暂存区和分支，<span style="color:red;">不比较工作区和分支</span>。</strong></li></ol><h3 id="撤销修改-2"><a class="markdownIt-Anchor" href="#撤销修改-2"></a> 撤销修改</h3><ul><li><strong>撤销修改</strong>:git checkout – file， 文件回到最后一次 add 的状态。<br>两种情况：<br>1.<strong>修改后还没add</strong>：回到最近的版本库；<br>2.<strong>修改后已add</strong> : 回到 add 之前的状态。</li></ul><blockquote><p><span style="color:red;"> - - 很重要，没有它就不是撤销修改，而是切换分支</span></p></blockquote><blockquote><p>git checkout – . 撤销所有修改<br>git checkout path/…/file 撤销文件下中某个文件的修改</p></blockquote><p><em>git reset HEAD file</em> 可以回退版本，也可从暂存区回到工作区。</p><h3 id="删除文件"><a class="markdownIt-Anchor" href="#删除文件"></a> 删除文件</h3><p><strong>在工作区删除文件</strong>：rm file<br>在工作删除文件后，工作区和仓库版本不一致了，可以有两个操作：</p><ol><li>误删了，就把版本库里的最新版本，拿到工作区。 <strong>git  checkout – file</strong></li><li>确认删除，那再把版本库里的文件删除。<strong>git rm file</strong></li></ol><blockquote><p><span style="color:red;">注意 git rm file 和 rm 的区别：</span><br><strong>git rm file</strong>:删除暂存区和工作区，需用用 <strong>git checkeout HEAD – file</strong> 或者 <strong>git checktout HEAD file</strong>分支恢复。</p></blockquote><h2 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h2><ol><li>在 Github 上创建仓库并关联本地仓库<br>Git 是分布式版本控制系统，同一个 Git 版本仓库，可分布到不同的机器上，这些机器上的版本库都是一样的。现在只有一台机器，如何分布？<br>**①：在 Github 上创建仓库，将代码推送到该仓库。**推荐做法<br>②：分布在同一台机器上的不同目录，硬盘坏了所有版本库都没了，不推荐，（也不知道怎么弄）。<br>③：建一台服务器，从该服务器上克隆版本库，提交版本库到该服务器。成本高，适合公司多人协作开发。</li></ol><h3 id="关联远程仓库"><a class="markdownIt-Anchor" href="#关联远程仓库"></a> 关联远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;repoUrl&gt;</span><br></pre></td></tr></table></figure><p><strong>origin</strong> 是默认的<strong>远程仓库</strong>的名字，可取其他名。远程仓库可有多个分支。</p><blockquote><p>“origin” 并无特殊含义<br>远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的<strong>起始分支名字</strong>，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的<strong>远程仓库名字</strong>。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master</p></blockquote><h3 id="查看远程仓库"><a class="markdownIt-Anchor" href="#查看远程仓库"></a> 查看远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v <span class="comment"># 显示所有远程仓库</span></span><br></pre></td></tr></table></figure><h3 id="删除本地分支和远程分支的关联"><a class="markdownIt-Anchor" href="#删除本地分支和远程分支的关联"></a> 删除本地分支和远程分支的关联</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><h3 id="推送本地修改到远程仓库"><a class="markdownIt-Anchor" href="#推送本地修改到远程仓库"></a> 推送本地修改到远程仓库</h3><p><strong>第一次推送本地仓库到远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master  <span class="comment"># master 是分支名字</span></span><br></pre></td></tr></table></figure><p><strong>非第一次推送</strong></p><p>开始工作前，远程仓库可能有更新,需要先<strong>合并</strong>。</p><h3 id="分支合并"><a class="markdownIt-Anchor" href="#分支合并"></a> 分支合并</h3><h4 id="合并分支方法一推荐"><a class="markdownIt-Anchor" href="#合并分支方法一推荐"></a> 合并分支方法一（推荐）</h4><ol><li>获取远程仓库<code>某个分支的更改</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin &lt;remote-branch&gt;:&lt;temp-branch&gt;</span><br></pre></td></tr></table></figure><p>该命令做了两件事情：<br>①. 创建本地分支 temp-branch;<br>②. 将<code>remote-branch</code>上的更新保存在 temp-branch 中</p><ol start="2"><li>与当前分支比较不同：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;temp-branch&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>将更改<code>合并</code>到<code>当前分支</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;temp-branch&gt; <span class="comment"># &lt;temp-branch&gt; 是合并进`当前分支`的分支</span></span><br></pre></td></tr></table></figure><p>合并成功会没提示，并且在<code>当前分支</code>上有一个合并进来的分支的<code>提交记录</code>。</p><h4 id="合并分支方法二"><a class="markdownIt-Anchor" href="#合并分支方法二"></a> 合并分支方法二</h4><ol><li>获取更改</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote&gt; <span class="comment"># 获取远程仓库的更改，是哪个分支呢？remote 远程仓库名字，一般是 origin</span></span><br></pre></td></tr></table></figure><ol start="2"><li>合并</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;remote&gt;/&lt;<span class="built_in">local</span>-branch&gt; <span class="comment"># 将更改合并进入local-branch</span></span><br></pre></td></tr></table></figure><h4 id="分支合并方法三"><a class="markdownIt-Anchor" href="#分支合并方法三"></a> 分支合并方法三</h4><p>以上两个操作合并为一个操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;<span class="built_in">local</span>-branch&gt;</span><br></pre></td></tr></table></figure><p>出现<code>Already up to date.</code>,则合并成功。</p><p><code>pull</code>会自动合并，执行该命令前，需要确保当前分支的修改都提交了，需要提交的修改，可能会使你的修改丢失。执行成功后，有冲突，会显示冲突的文件。<br>如果你不想自动合并，可执行<code>git merge --abort</code>撤销<code>pull</code>。</p><p>以上参考：<a href="https://help.github.com/articles/fetching-a-remote/" target="_blank" rel="noopener">fetching-a-remote</a></p><p>执行<code>git merge --abort</code>可能会出现<code>fatal: There is no merge to abort (MERGE_HEAD missing).</code>的提示，说明<code>撤销合并</code>没成功。（因为合并成功，合并分支被删除了？）</p><p>可用 <code>git reset --merge</code>来<code>撤销合并</code>。</p><p>注意：当<code>MERGE_HEAD</code>存在，<code>git reset --merge</code>和<code>git merge --abort</code>是相同的。</p><p>参考：<a href="https://stackoverflow.com/questions/10737966/undoing-git-merge-after-merge-renamelimit-warning-plus-conflicts/10738171" target="_blank" rel="noopener">undoing git merge after merge.renameLimit warning plus conflicts</a></p><p>合并完后，进行编辑，提交修改，最后<code>推送</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;remote-branch&gt; <span class="comment"># &lt;remote-branch&gt; 是你工作的远程分支名字，可能别人和你在该分支是上工作</span></span><br></pre></td></tr></table></figure><h3 id="强制覆盖合并"><a class="markdownIt-Anchor" href="#强制覆盖合并"></a> 强制覆盖合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all  </span><br><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="如何避免每次输入密码"><a class="markdownIt-Anchor" href="#如何避免每次输入密码"></a> 如何避免每次输入密码?</h2><p>执行某些操作，Git 服务器会询问用户名与密码。可在本地设置保存密码，提高效率。</p><ol><li>短期凭证存储<br>凭证保存在<strong>内存中</strong>，几分钟内有效。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><ol start="2"><li>长期凭证存储<br>凭证保存在硬盘内，长期有效。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>##分支管理</p><h3 id="查看分支"><a class="markdownIt-Anchor" href="#查看分支"></a> 查看分支</h3><p>git branch [-r] [-a] [-v]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -av <span class="comment"># 推荐使用，可参看本地分支和远程分支，并且可看最近的提交</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  <span class="comment"># 查看本地分支</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r <span class="comment"># 查看远程分支</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a <span class="comment"># 查看所有分支</span></span><br></pre></td></tr></table></figure><h3 id="新建分支"><a class="markdownIt-Anchor" href="#新建分支"></a> 新建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [-f] new-branch  <span class="comment"># 新建分支 -f 可选</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout new-branch  <span class="comment"># 切换分支</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new-branch <span class="comment"># 新建并切换</span></span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a class="markdownIt-Anchor" href="#删除本地分支"></a> 删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D need-delete-local-branch  <span class="comment"># 在当前分支下删除自身，不可删除</span></span><br></pre></td></tr></table></figure><p>删除错了，恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog  <span class="comment"># 查看操作日志，找到需要恢复的commit id</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch need-recover-branch commitId  <span class="comment"># 恢复分支</span></span><br></pre></td></tr></table></figure><p>本地分支和远程分支都删除了，怎么恢复？<br>先恢复本地分支，再 <strong>push</strong> 一次，即恢复了本地和远程分支</p><h3 id="删除远程分支"><a class="markdownIt-Anchor" href="#删除远程分支"></a> 删除远程分支</h3><p>远程以<code>remote/branch</code> 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch origin -d remote-branch</span><br></pre></td></tr></table></figure><ul><li>git branch -r -d origin/remote-branch-name</li><li>git branch -d -r origin/remote-branch-name</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete origin/&lt;remote-branch&gt;</span><br><span class="line">git push origin :&lt;remote-bracnh&gt;</span><br><span class="line"><span class="comment"># 给出本地分支 是推送远程分支</span></span><br><span class="line">git push origin &lt;<span class="built_in">local</span>-branch&gt;:&lt;remote-bracnh&gt;</span><br></pre></td></tr></table></figure><blockquote><p>删除了，但是产生一个问题：其他成员在pull代码时，不会把删除本地的分支<br>fetch 时 加 -p<br>git fetch -p</p></blockquote><h3 id="重命名分支"><a class="markdownIt-Anchor" href="#重命名分支"></a> 重命名分支</h3><p>删除远程分支→重命名本地分支→ push 分支到远程仓库<br>本地分支重命名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m  old-branch-name new-branch-name <span class="comment"># 重命名当前分支，可省略 old-branch-name</span></span><br></pre></td></tr></table></figure><p>push 新分支分支到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin new-branch-name</span><br></pre></td></tr></table></figure><h2 id="已跟踪的文件取消跟踪"><a class="markdownIt-Anchor" href="#已跟踪的文件取消跟踪"></a> 已跟踪的文件取消跟踪</h2><p>有的文件忘记加入到 <code>.gitignore</code>，<code>git add .</code>后Git 就会默认追踪该文件，追踪后取消追踪的操作：</p><ol><li>从追踪列表中删除：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除某个文件</span></span><br><span class="line">git rm --cached &lt;file&gt;</span><br><span class="line"><span class="comment"># 可加 -r 选项 表示递归删除 带目录时加 -r</span></span><br><span class="line">git rm -r --cached &lt;directory&gt;</span><br><span class="line"><span class="comment"># 删除整个目录</span></span><br><span class="line">git rm --cached . </span><br><span class="line"><span class="comment"># 删除某个目录下的所有文件</span></span><br><span class="line"><span class="comment"># * 加 \ 是为了从 git 命令中转译</span></span><br><span class="line">git rm --cached src/\*</span><br></pre></td></tr></table></figure><p>该操作 从仓库索引中<strong>取消文件跟踪</strong>，文件<strong>仍然保留在工作目录中</strong>。<br>2. 增加刚才的文件或者目录到 <code>.gitignore</code><br>3. 提交更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'文件取消跟踪'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>推送至远程<br>推送至远程后，远程仓库不再用取消忽略的文件。</li></ol><blockquote><p><a href="https://alvinalexander.com/git/git-rm-file-git-repository-dont-track-accidentally-added" target="_blank" rel="noopener">Tell Git not to track a file any more (remove from repo)</a></p><p><a href="https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore" target="_blank" rel="noopener">How to make Git “forget” about a file that was tracked but is now in .gitignore?</a></p></blockquote><h2 id="删除已跟踪的文件"><a class="markdownIt-Anchor" href="#删除已跟踪的文件"></a> 删除已跟踪的文件</h2><p>希望从工作目录中<strong>删除</strong>已跟踪的文件，必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。<br>0. 修改<code>.gitingnore</code></p><ol><li>删除文件跟踪</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br><span class="line">git rm -r &lt;dir&gt;\*.md</span><br></pre></td></tr></table></figure><p>执行该操作，项目仓库中不再有该文件。<br>2. 提交更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="gitignore-文件相关"><a class="markdownIt-Anchor" href="#gitignore-文件相关"></a> .gitignore 文件相关</h2><h3 id="忽略规则"><a class="markdownIt-Anchor" href="#忽略规则"></a> 忽略规则</h3><p><code>.gitignore</code> 列出的<code>目录</code>或者<code>文件</code>是不被 git 跟踪的。常常需要忽略的文件如下：</p><ol><li>临时资源，比如缓存、日志、编译后的源码等；</li><li>开发环境配置文件，不同的开发人员有不同的开发习惯，环境配置文件不该被跟踪；</li><li>敏感信息，比如数据库密码、秘钥等。</li></ol><p>匹配规则：会以 <code>.gitignore</code> 所在目录为顶级目录或者当前目录，<strong>递归</strong>地匹配路径或文件，后面的规则会覆盖前面的规则。</p><p>一个文件或者目录被忽略，<strong>不会</strong>有以下行为：</p><ol><li>被 git 跟踪；</li><li>反映到 <code>git status</code> 或 <code>git diff</code>等命令中；</li><li>被暂存，比如 <code>git add -A</code> 不会暂存被忽略的文件。</li></ol><h4 id="常见的规则模式"><a class="markdownIt-Anchor" href="#常见的规则模式"></a> 常见的规则模式</h4><p><code>#</code> 是注释，注释不能和规则同行，否则规则失效。规则含有 <code>#</code>，使用反斜线 <code>/</code> 转义。</p><ol><li>常用规则</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 某类型文件，使用扩展名</span></span><br><span class="line">*.js</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"><span class="comment"># 排除特定文件</span></span><br><span class="line">!index.js</span><br><span class="line"><span class="comment"># 特定文件</span></span><br><span class="line">index.css</span><br><span class="line">test.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录及其内容</span></span><br><span class="line">node_modules/</span><br><span class="line"><span class="comment"># 当前目录下的某个目录 .gitignore 所在目录为顶级目录</span></span><br><span class="line">/node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任意目录或文件</span></span><br><span class="line">node_modules</span><br><span class="line"><span class="comment"># 当前目录下的任意目录或文件</span></span><br><span class="line">/node_modules</span><br></pre></td></tr></table></figure><ol start="2"><li>高级规则</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子目录 两层关系</span></span><br><span class="line">target/logs/</span><br><span class="line"><span class="comment"># 孙子目录 三层关系</span></span><br><span class="line">target/*/logs/</span><br><span class="line"><span class="comment"># 后代目录 任意层关系</span></span><br><span class="line">target/**/logs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选字符匹配 </span></span><br><span class="line"><span class="comment"># 匹配 build/Build 文件或目录 Build 不会匹配 uild</span></span><br><span class="line">[bB]uild </span><br><span class="line"><span class="comment"># 匹配 .pyc 或 .pyo</span></span><br><span class="line">.py[co]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特定目录下文件</span></span><br><span class="line">target/*/.bin/*.js</span><br><span class="line"><span class="comment"># 目录匹配通配符</span></span><br><span class="line"><span class="comment"># 匹配 .deploy_git .deployB</span></span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><h4 id="其他忽略方式"><a class="markdownIt-Anchor" href="#其他忽略方式"></a> 其他忽略方式</h4><p><code>.gitingore</code> 文件应该被提交到仓库里，但是会暴露你的忽略规则，如果不想暴露，可使用以下方式设置：</p><ul><li>.git/info/exclude 文件配置；</li><li>配置全局忽略文件。</li></ul><h3 id="常见项目的-gitignore-文件"><a class="markdownIt-Anchor" href="#常见项目的-gitignore-文件"></a> 常见项目的 .gitignore 文件</h3><ul><li><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">常见gitignore模板</a></li><li><a href="https://www.gitignore.io/" target="_blank" rel="noopener">在线生成gitignore文件</a></li></ul><h3 id="列出忽略的文件"><a class="markdownIt-Anchor" href="#列出忽略的文件"></a> 列出忽略的文件</h3><ol><li>git status</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure><ol start="2"><li>git ls-files</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure><h3 id="删除忽略文件"><a class="markdownIt-Anchor" href="#删除忽略文件"></a> 删除忽略文件</h3><p><code>git clean -x</code> 可删除忽略文件,和 <code>git reset --hard</code> 一起使用可完全回到某个 commit 状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clean -n <span class="comment"># clean 演练，告知哪些文件会被删除</span></span><br><span class="line"><span class="comment"># 删除当前目录下所有没有 track 的文件，不删除 .gitignore 文件里的文件</span></span><br><span class="line">git clean -f  &lt;path&gt; <span class="comment"># 指定路径 path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下没有被 track 的文件和目录</span></span><br><span class="line">git clean -df</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有没有被 track 的目录和文件，不管 .gitignore 是否匹配</span></span><br><span class="line">git clean -xf</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="列出被跟踪的文件"><a class="markdownIt-Anchor" href="#列出被跟踪的文件"></a> 列出被跟踪的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-tree -r master --name-only</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h2><h3 id="本地仓库版本落后于远程仓库版本"><a class="markdownIt-Anchor" href="#本地仓库版本落后于远程仓库版本"></a> 本地仓库版本落后于远程仓库版本</h3><p>当push到远程仓库时，出现以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Updates were rejected because the tip of your current branch is behind</span><br></pre></td></tr></table></figure><p>解决办法：</p><ul><li>强推（远程修改会丢失）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin -f master</span><br></pre></td></tr></table></figure><ul><li>先合并，再推送（待验证）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li>不想合并，先建分支，再推送（待验证）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br><span class="line">git push origin &lt;branch-name&gt; <span class="comment"># 待验证</span></span><br></pre></td></tr></table></figure><h3 id="git推送提示remote-origin-already-exists"><a class="markdownIt-Anchor" href="#git推送提示remote-origin-already-exists"></a> Git推送提示：remote origin already exists</h3><ol><li>删除远程仓库 (删除报错，可在配置文件中删除仓库信息)</li></ol><blockquote><p>git  remote rm origin</p></blockquote><ol start="2"><li>在添加远程仓库</li></ol><blockquote><p>git remote add origin repo-url</p></blockquote><ol start="3"><li>再次推送</li></ol><blockquote><p>git push -u origin master</p></blockquote><h2 id="todo"><a class="markdownIt-Anchor" href="#todo"></a> todo</h2><blockquote><p><a href="https://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/" target="_blank" rel="noopener">git relog VS git log</a><br><a href="https://dev.to/mzanggl/undo-changes-in-git-cheat-sheet-for-git-checkout-stash-reset-clean-revert-rebase-i-amend-2h1h" target="_blank" rel="noopener">Undo changes in Git - Cheat sheet for git checkout, stash, reset, clean, revert, rebase -i, amend</a><br><a href="https://sdqweb.ipd.kit.edu/wiki/Git_undo#temporary_undo_and_redo" target="_blank" rel="noopener">temporary_undo_and_red</a></p></blockquote><h3 id="git-进阶"><a class="markdownIt-Anchor" href="#git-进阶"></a> git 进阶</h3><blockquote><p><a href="https://wildlyinaccurate.com/a-hackers-guide-to-git/" target="_blank" rel="noopener">A Hacker’s Guide to Git</a></p></blockquote><hr><blockquote><p><a href="https://my.oschina.net/yuzn/blog/82297" target="_blank" rel="noopener">Git – Fast Forward 和 no fast foward</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个分布式版本控制系统（CVS），可以记录&lt;strong&gt;文本文件&lt;/strong&gt;的&lt;strong&gt;变化&lt;/strong&gt;（&lt;em&gt;修改、增加、删除等操作&lt;/em&gt;），比如 TXT、HTML、程序源代码等，&lt;span style=&quot;color:red;&quot;&gt;不能记录其他文件（图片、音频等二进制文件）的变化，不能记录word文档的变化。&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="https://JackChouMine.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="工具使用" scheme="https://JackChouMine.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="git" scheme="https://JackChouMine.github.io/tags/git/"/>
    
      <category term="github" scheme="https://JackChouMine.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>注册一个美区的 Apple ID</title>
    <link href="https://JackChouMine.github.io/2019/06/25/%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E7%BE%8E%E5%8C%BAappleID/"/>
    <id>https://JackChouMine.github.io/2019/06/25/注册一个美区appleID/</id>
    <published>2019-06-25T13:16:01.000Z</published>
    <updated>2020-07-29T13:03:01.711Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知的原因，app store 某些应用在国内下载不了，需要一个美国的 apple id 才能下载。以前试过，没成功就，就用共享的账号，不仅麻烦，还有安全隐私泄露的隐患，今天又试着注册一个，成功了，记录一下我的操作过程，给需要的人一些指南。</p><a id="more"></a><h2 id="需要准备的东西"><a class="markdownIt-Anchor" href="#需要准备的东西"></a> 需要准备的东西</h2><ul><li>一个 IP 在美国的梯子；</li><li>美国个人信息，使用<a href="https://www.fakeaddressgenerator.com/" target="_blank" rel="noopener">fakeaddressgenerato</a>，生成；</li><li>chorme 浏览器，需要使用匿名模式；</li><li>iphone；</li><li>邮箱，推荐 gmail；</li><li>ip检测网站（可选），推荐<a href="https://en.ipip.net/" target="_blank" rel="noopener">ipip</a>；</li><li>美国信用卡，没有就不能下载付费应用，可选。</li></ul><h2 id="操作步骤"><a class="markdownIt-Anchor" href="#操作步骤"></a> 操作步骤</h2><ul><li>使用梯子，ip 必须在美国的，全局模式访问，为了确保正确，可使用ip检测网站检测一下；</li><li>生成假的美国信息，推荐使用免税区的地址<ul><li>Oregon 俄勒冈、</li><li>Alaska 阿拉斯加</li><li>Delaware 特拉华州</li><li>Montana 蒙大拿</li><li>New Hampshire 新罕布什尔</li><li>目前我还没遇到付款相关问题</li></ul></li><li>浏览器开启匿名模式【Ctrl + Shift + N】，不然苹果会根据你的访记录，不让访问美区的那内容。这里可清除浏览器缓存再开启匿名模式，确保万无一失嘛。</li><li>网站苹果网站，正常注册账号就好了，需要填信息，就用刚才的假信息。<strong>以上步骤都顺利，是不要求添加银行卡号的。</strong></li><li>使用新的账号登录 App Store</li><li>登录成功后，<a href="https://support.apple.com/zh-cn/HT201389" target="_blank" rel="noopener">改变Apple id 地区</a>，使用假信息填写账单信息；</li><li>App Store 变成英文界面，就可以了。</li><li>为了以后方便使用，可以把假信息记录下来，可能以后会用到。</li></ul><h2 id="我的美国信息"><a class="markdownIt-Anchor" href="#我的美国信息"></a> 我的美国信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">BASIC INFORMATION</span><br><span class="line"></span><br><span class="line">Full name       Eunice G Gifford</span><br><span class="line">Gender    female</span><br><span class="line">Title    Ms.</span><br><span class="line">Race    White</span><br><span class="line">Birthday<span class="number">7</span>/<span class="number">3</span>/<span class="number">1989</span></span><br><span class="line">Social Security <span class="built_in">Number</span><span class="number">503</span><span class="number">-46</span><span class="number">-3607</span></span><br><span class="line"></span><br><span class="line">ADDRESS</span><br><span class="line"></span><br><span class="line">Street <span class="number">2509</span>  Hartway Street</span><br><span class="line">City ANTELOPE</span><br><span class="line">State OR</span><br><span class="line">State FullOregon</span><br><span class="line">Zip Code<span class="number">97001</span></span><br><span class="line">Phone <span class="built_in">Number</span><span class="number">605</span><span class="number">-720</span><span class="number">-5251</span></span><br><span class="line">Mobile <span class="built_in">Number</span><span class="number">541</span><span class="number">-813</span><span class="number">-5999</span></span><br><span class="line">Temporary emailw7v8guupr2c@claimab.com</span><br></pre></td></tr></table></figure><p><a href="https://www.fakemailgenerator.net/" target="_blank" rel="noopener">This is a real email address, click here to recieve mails</a></p><p>貌似以上信息就够了，先保存这么多吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知的原因，app store 某些应用在国内下载不了，需要一个美国的 apple id 才能下载。以前试过，没成功就，就用共享的账号，不仅麻烦，还有安全隐私泄露的隐患，今天又试着注册一个，成功了，记录一下我的操作过程，给需要的人一些指南。&lt;/p&gt;
    
    </summary>
    
      <category term="数字生活" scheme="https://JackChouMine.github.io/categories/%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="数码产品" scheme="https://JackChouMine.github.io/tags/%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="https://JackChouMine.github.io/2019/06/20/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://JackChouMine.github.io/2019/06/20/防抖和节流/</id>
    <published>2019-06-20T15:50:31.000Z</published>
    <updated>2020-07-29T13:03:01.711Z</updated>
    
    <content type="html"><![CDATA[<p>连续触发（触发频率很高）的事件，不进行优化，会出现页面卡顿现象。<br>常见的需要优化的事件：</p><ul><li>鼠标事件:<ul><li>mousemove（拖拽）</li><li>mouseover(划过)</li><li>mouseWheel(滚屏)</li></ul></li><li>键盘事件：<ul><li>keydown(按下键盘)</li><li>keypress（按下字符键盘）</li><li>keyup(弹起键盘)</li></ul></li><li>window resize/scroll<ul><li>DOM 元素动态定位</li></ul></li></ul><a id="more"></a><p>优化方式是控制事件处理器<strong>在一段时间内的执行次</strong>。</p><h2 id="防抖"><a class="markdownIt-Anchor" href="#防抖"></a> 防抖</h2><p>频繁（连续）触发事件（比如用户触发输入事件<code>input</code>），不执行<strong>目标动作</strong>，当不在触发事件了，再执行。</p><p>实现思路，在事件处理器内，使用  <strong>setTimeout</strong> 包裹目标动作，一直触发事件，就清除<strong>上次</strong>的定时器，不再触发触发事件，会执行最后一个定时器，目标动作也执行一次了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>JS代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">callback, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'清除'</span>, timeout, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    clearTimeout(timeout); <span class="comment">//input 一直触发，就清除上一次的定时器，防止执行目标函数，直到事件不触发事件，最后一个定时器没有清除，delay 时间后就会执定时器，就确保了目标函数只执行一次。</span></span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      callback(e);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'新的'</span>, timeout, e.target.value, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = debounce(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value = e.target.value;</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .querySelector(<span class="string">'#input'</span>)</span><br><span class="line">  .addEventListener(<span class="string">'input'</span>, print, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>清除定时器的时机很关键，<strong>在新定时器生成之前</strong>，如果在之后，会将所有定时器都清除，目标函数一次都不执行。</p><h2 id="节流"><a class="markdownIt-Anchor" href="#节流"></a> 节流</h2><p>防抖是多次触发事件，目标函数只执行一次，不管触发这些事件用了多少时间。而节流是在一段时间内，确保目标函数只执行一次，实现缓慢执行目标函数的效果。</p><p>上面的输入使用节流实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thorttle = <span class="function">(<span class="params">callback, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'now'</span>, now);</span><br><span class="line">    <span class="keyword">let</span> last = <span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    <span class="keyword">if</span> (last - now &gt;= delay) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'时间间隔'</span>, last - now);</span><br><span class="line">      callback(e);</span><br><span class="line">      now = last;<span class="comment">//将上执行的时间赋值给 now</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//将 delay 时间内多次触发事件，目标函数合并到这里执行</span></span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        callback(e);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> write = thorttle(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.value, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .querySelector(<span class="string">'#input'</span>)</span><br><span class="line">  .addEventListener(<span class="string">'input'</span>, write, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="两者比较"><a class="markdownIt-Anchor" href="#两者比较"></a> 两者比较</h2><p>节流在<strong>某个时间段内</strong>，目标函数能执行一次，限制目标函数的<strong>执行频率</strong>，不管事件触发了多少次；<br>防抖是<strong>多次触发事件</strong>，目标函数只执行一次，不管触发了这些事件用了多少时间。</p><p>节流函数限制目标函数的执行频率，有连续变化的效果，适用于<strong>关注变化过程的操作</strong>，可以调整目标函数执行频率使得变化更加平滑，比如动画、改变窗口时执行某些操作等，常用事件<code>resize</code>、<code>scroll</code>、<code>mouseWheel</code>、<code>touchmove</code>、<code>mouseover</code>等；</p><p>防抖函数适用于<strong>更关注结果的操作</strong>，不太关注操作过程，常见的事件有 <code>input</code>、<code>keyup</code>等。</p><p>最后看一个 将 防抖 和 节流都用 <code>resize</code> 事件的效果，更能体会两者的区别：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">callback, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      callback(e);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = debounce(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value = e.target.value;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'debounce'</span>, <span class="built_in">window</span>.innerWidth);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="keyword">let</span> thorttle = <span class="function">(<span class="params">callback, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    <span class="keyword">if</span> (last - now &gt;= delay) &#123;</span><br><span class="line">      callback(e);</span><br><span class="line">      now = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        callback(e);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> write = thorttle(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'thorttle'</span>, <span class="built_in">window</span>.innerWidth);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, write, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, print, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://chanshiyu.com/#/post/24" target="_blank" rel="noopener">函数节流与函数防抖</a><br><a href="https://zhuanlan.zhihu.com/p/38313717" target="_blank" rel="noopener">函数防抖与函数节流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;连续触发（触发频率很高）的事件，不进行优化，会出现页面卡顿现象。&lt;br&gt;
常见的需要优化的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼠标事件:
&lt;ul&gt;
&lt;li&gt;mousemove（拖拽）&lt;/li&gt;
&lt;li&gt;mouseover(划过)&lt;/li&gt;
&lt;li&gt;mouseWheel(滚屏)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;键盘事件：
&lt;ul&gt;
&lt;li&gt;keydown(按下键盘)&lt;/li&gt;
&lt;li&gt;keypress（按下字符键盘）&lt;/li&gt;
&lt;li&gt;keyup(弹起键盘)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;window resize/scroll
&lt;ul&gt;
&lt;li&gt;DOM 元素动态定位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="概念深入" scheme="https://JackChouMine.github.io/categories/%E6%A6%82%E5%BF%B5%E6%B7%B1%E5%85%A5/"/>
    
    
      <category term="js" scheme="https://JackChouMine.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>npm 语义化版本</title>
    <link href="https://JackChouMine.github.io/2019/06/16/npm-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/"/>
    <id>https://JackChouMine.github.io/2019/06/16/npm-语义化版本/</id>
    <published>2019-06-16T13:39:58.000Z</published>
    <updated>2020-07-29T13:03:01.709Z</updated>
    
    <content type="html"><![CDATA[<p>为了在软件版本号中包含更多意义，反映代码所做的修改，产生了语义化版本，软件的使用者能从版本号中推测软件做的修改。npm 包使用语义化版控制，我们可安装一定版本范围的依赖，npm 会选择和你指定的版本相<strong>匹配</strong>的**(latest)最新版本**安装。</p><a id="more"></a><p>npm 的版本号由三部分组成：<br><code>主版本号</code>、<code>次版本号</code>、<code>补丁版本号</code>。变更不同的版本号，表示不同的意义：</p><ul><li>主版本号（major）：软件做了不兼容的变更（breaking change 重大变更）；</li><li>次版本号（minor）：添加功能或者废弃功能，向下兼容；</li><li>补丁版本号（patch）：bug 修复，向下兼容。</li></ul><p>有时候为了表达更加确切的版本，还会在版本号后面添加<strong>标签</strong>或者<strong>扩展</strong>，来说明是预发布版本或者测试版本等。比如 <strong>3.2.3-beta-3</strong>。</p><p>常见的标签有 :</p><table><thead><tr><th>标签</th><th>意义</th><th>补充</th></tr></thead><tbody><tr><td>demo</td><td>demo版本</td><td>可能用于验证问题的版本</td></tr><tr><td>dev</td><td>开发版</td><td>开发阶段用的，bug 多，体积较大等特点，功能不完善</td></tr><tr><td>alpha</td><td>α版本</td><td>用于内部交流或者测试人员测试</td></tr><tr><td>beta</td><td>测试版(β版本)</td><td>较α版本，有较大的改进，但是还是有bug</td></tr><tr><td>gamma</td><td>（γ）伽马版本</td><td>较α和β版本有很大的改进，与稳定版相差无几，用户可使用</td></tr><tr><td>trial</td><td>试用版本</td><td>本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。</td></tr><tr><td>stable</td><td>稳定版</td><td></td></tr><tr><td>csp</td><td>内容安装版本</td><td>js库常用</td></tr><tr><td>latest</td><td>最新版本</td><td>不指定版本和标签，npm 默认安装最新版</td></tr></tbody></table><p><a href="https://docs.npmjs.com/cli/dist-tag" target="_blank" rel="noopener">更多关于标签的内容</a><br>查看标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm dist-tags ls &lt;pkg&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm dist-tags ls vue</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beta: 2.6.0-beta.3</span><br><span class="line">csp: 1.0.28-csp</span><br><span class="line">latest: 2.6.10</span><br></pre></td></tr></table></figure><p>安装带标签的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &lt;pkg&gt;@&lt;tag&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue@beta <span class="comment"># 安装 2.6.0-beta.3</span></span><br></pre></td></tr></table></figure><h2 id="版本号变更规则"><a class="markdownIt-Anchor" href="#版本号变更规则"></a> 版本号变更规则</h2><ol><li>版本号只升不降，不得在数字前加0，比如 2.01.2 不允许的；</li><li>0.y.z，处于开发阶段的版本；</li><li>第一个正式版版本往往命名为 1.0.0；</li><li>先行版本必须在补丁版本之后添加，比如 2.3.7-0,- 后面的是先行版本；</li><li>版本的比较依次比较<strong>主版本</strong>→<strong>次版本</strong>→<strong>补丁版本</strong>→<strong>先行版本</strong>，直到第一个能得出比较结果为止。</li><li>不小心把一个<strong>不兼容的改版</strong>当成了<strong>次版本号</strong>发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并<strong>发行一个新的次版本号</strong>来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。</li></ol><p><a href="https://semver.npmjs.com/" target="_blank" rel="noopener">NPM版本计算器</a></p><h2 id="如何处理即将弃用的功能"><a class="markdownIt-Anchor" href="#如何处理即将弃用的功能"></a> 如何处理即将弃用的功能？</h2><p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。但当你弃用公共API的一部分时，你应该做两件事：<br>（1）更新<strong>文档</strong>以便使用者知道这个变化。<br>（2）发行不包含弃用功能的<strong>次版本</strong>。在新的主版本中完全移除弃用功能前，至少应有一个不包含弃用功能的副版本发布，以便使用者能够平滑过渡到新API。</p><p>如何更新版本号？不用手动修改 package.json。而是用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure><ol><li><strong>newversion</strong>: 直接给一个版本号；</li><li><strong>major</strong>:主版本增加1；</li><li><strong>premajor</strong>:预备主版本，主版本增加1，增加先行版本号；</li><li><strong>prelease</strong>:预先发布版本，先行版本号增加1；</li></ol><h2 id="git-和-npm-version-结合"><a class="markdownIt-Anchor" href="#git-和-npm-version-结合"></a> git 和 npm version 结合</h2><h3 id="手动更改版本号"><a class="markdownIt-Anchor" href="#手动更改版本号"></a> 手动更改版本号</h3><p>执行 <code>npm version &lt;version&gt; -m 'xx %s xx'</code> 改变npm版本的同时，会执行一次 <code>git commt -m 'xx %s xx'</code>并用版本号打一个<strong>tag</strong>，%s 会替换成版本号，前提是版本库是<strong>干净的（clean）</strong>。</p><h3 id="自动更新版本"><a class="markdownIt-Anchor" href="#自动更新版本"></a> 自动更新版本</h3><p>在 <code>.git/hooks</code>目录内，新建<code>post-commit</code>,输入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">COMMIT_MSG=<span class="string">"$(git log --pretty=format:"</span>%s<span class="string">" -1 head)"</span></span><br><span class="line">echo <span class="string">"$COMMIT_MSG"</span> | grep  -q  <span class="string">"^[0-9]"</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne <span class="number">0</span> ];then</span><br><span class="line">   # 自动修改 patch</span><br><span class="line">  echo $(npm version patch)</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>在执行 <code>git commit -m 'message'</code>后，会检测message是否是版本号（y.x.z的形式），不是，则执行 <code>npm version patch</code>更新补丁版本，打一个tag。</p><p>如果想自动修改<code>次版本</code>，修改 post-commit 的内容即可。</p><h2 id="版本运算符"><a class="markdownIt-Anchor" href="#版本运算符"></a> 版本运算符</h2><p>版本运算符指定了一定范围的版本。主要有**~<strong>、</strong>^<strong>、</strong>-<strong>、</strong>&lt;<strong>、</strong>&lt;=<strong>、</strong>&gt;<strong>、</strong>&gt;=<strong>、</strong>=**版本运算符。</p><h3 id="~-版本号-指定主版本号或者次版本号相同"><a class="markdownIt-Anchor" href="#~-版本号-指定主版本号或者次版本号相同"></a> ~ 版本号 ----- 指定主版本号或者次版本号相同</h3><dl><dt>~ + <strong>只含主版本</strong> —  主版本相同；</dt><dd><ul><li><strong>含有次版本</strong> —  主版本和次版本号相同。</li></ul></dd></dl><table><thead><tr><th>版本范围</th><th>匹配版本</th></tr></thead><tbody><tr><td>~3</td><td>3.x 或者 3.0.0 &lt;= v &lt; 4.0.0</td></tr><tr><td>~3.1</td><td>3.1.x 或者 3.1.0 &lt;= v ❤️.2.0</td></tr><tr><td>~3.1.2</td><td>3.1.2 &lt; v &lt; 3.2.0</td></tr></tbody></table><p>指定的版本范围含有预发布版本，只会匹配和完整版本号相同的预发布版本。<br>~3.1.3-beta.2 匹配 3.1.3-beat.3 不匹配 3.1.4-beat-2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i lodash@~3 <span class="comment"># 安装 3.10.1</span></span><br><span class="line">npm i lodash@~3.9 <span class="comment"># 安装 3.9.3</span></span><br><span class="line">npm i lodash@~3.9.1 <span class="comment"># 安装 3.9.3</span></span><br><span class="line">npm i lodash@~3.8.0 <span class="comment"># 安装 3.8.0</span></span><br></pre></td></tr></table></figure><h3 id="版本号-第一个非零-版本号相同"><a class="markdownIt-Anchor" href="#版本号-第一个非零-版本号相同"></a> ^ 版本号 — 第一个<em>非零</em> 版本号相同</h3><table><thead><tr><th>版本范围</th><th>匹配版本</th><th>补充</th></tr></thead><tbody><tr><td>^3.1.5</td><td>3.1.5 &lt;= v &lt; 4.0.0</td><td></td></tr><tr><td>^0.3.6</td><td>0.3.6 &lt;= v &lt; 0.4.0</td><td></td></tr><tr><td>^0.0.2</td><td>0.0.2 &lt;= v &lt; 0.0.3</td><td></td></tr><tr><td>^3.x.x</td><td>3.0.0 &lt;= v &lt; 4.0.0</td><td>版本号缺少的位置，会被 0 填充</td></tr><tr><td>^4.2.x</td><td>4.2.0 &lt;= v &lt; 4.3.0</td><td></td></tr></tbody></table><p>npm 安装包时，默认使用 ^ 匹配版本。</p><p>安装主版本号为 3 的最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i lodash@^3 <span class="comment"># 安装 3.10.1</span></span><br><span class="line">npm i lodash@^3.9 <span class="comment"># 安装 3.10.1</span></span><br><span class="line">npm i lodash@^3.8.0 <span class="comment"># 安装 3.10.1</span></span><br></pre></td></tr></table></figure><h3 id="~-vs"><a class="markdownIt-Anchor" href="#~-vs"></a> ~  vs ^</h3><table><thead><tr><th>版本范围</th><th>含义</th><th>匹配的版本</th><th>说明</th></tr></thead><tbody><tr><td>~3.3.0</td><td>与3.3.0相似</td><td>3.3.0 &lt;= v &lt; 3.4.0</td><td>主版本和次版本相同</td></tr><tr><td>^3.3.0</td><td>与3.3.0兼容</td><td>3.3.0 &lt;= v &lt; 4</td><td>主版本相同</td></tr></tbody></table><p>同一个版本号，^ 能匹配的范围大些，更加激进。<br>例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i lodash@^3.3.0 <span class="comment"># 安装 3.10.1</span></span><br><span class="line">npm i lodash@~3.3.0 <span class="comment"># 安装 3.3.1</span></span><br></pre></td></tr></table></figure><p><strong>~</strong> 和 ≈ 差不多，可将 ~ 理解成<strong>相似</strong>，这样就分辨了和理解了，~指定的是<strong>相似版本</strong>。<br><strong>^</strong> 可理解成<strong>兼容版本</strong>。</p><h3 id="-指定精确范围"><a class="markdownIt-Anchor" href="#-指定精确范围"></a> - 指定精确范围</h3><table><thead><tr><th>版本范围</th><th>匹配版本</th><th>补充</th></tr></thead><tbody><tr><td>2.0.0 - 3.2.7</td><td>2.0.0 &lt;= v &lt;= 3.2.7</td><td>- 前后有空格</td></tr><tr><td>0.4 - 3</td><td>0.4.0 &lt;= v &lt;= 3.0.0</td><td>缺少的版本号，被 0 填充</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue@<span class="string">"1 - 1.9"</span> <span class="comment"># 安装 1.0.28</span></span><br></pre></td></tr></table></figure><h3 id="版本号比较器"><a class="markdownIt-Anchor" href="#版本号比较器"></a> 版本号比较器</h3><table><thead><tr><th style="text-align:center">版本范围</th><th style="text-align:center">匹配版本</th><th style="text-align:center">补充</th></tr></thead><tbody><tr><td style="text-align:center">&lt;2.2.0</td><td style="text-align:center">小于2.2.0 的版本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=2.0.0</td><td style="text-align:center">小于等于 2.0.0 的版本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;4.2.0</td><td style="text-align:center">大于4.2.0 的版本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;=4.2.0</td><td style="text-align:center">大于等于 4.2.0  的版本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">=4.3.0</td><td style="text-align:center">等于 4.3.0 的版本</td><td style="text-align:center"></td></tr></tbody></table><p>\ 是转义字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i lodash@\&lt;3.5 <span class="comment"># 安装 3.4.0</span></span><br><span class="line">npm i lodash@\&lt;=3.5 <span class="comment"># 安装 3.5.0</span></span><br><span class="line">npm i lodash@\&gt;3.5 <span class="comment"># 安装 4.17.11</span></span><br><span class="line">npm i lodash@\&gt;=3.5 <span class="comment"># 安装 4.17.11</span></span><br><span class="line">npm i vue@<span class="string">"&gt;1 &lt;2.3"</span> <span class="comment"># 安装 2.2.6</span></span><br></pre></td></tr></table></figure><h3 id="分组-几乎不用"><a class="markdownIt-Anchor" href="#分组-几乎不用"></a> 分组 || (几乎不用)</h3><table><thead><tr><th style="text-align:center">版本范围</th><th style="text-align:center">匹配版本</th></tr></thead><tbody><tr><td style="text-align:center">~2 || ^0.7</td><td style="text-align:center">匹配2.0.2&lt;= v &lt; 3.0.0 或者 0.7 &lt;= v &lt;1.0.0</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue@<span class="string">"^0.7 || ~2"</span> <span class="comment"># 安装 2.6.10 最新的版本</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/" target="_blank" rel="noopener">依赖的版本</a><br><a href="http://buzhundong.com/post/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5-%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html" target="_blank" rel="noopener">版本号管理策略&amp;&amp;使用npm管理项目版本号</a><br><a href="https://semver.org/lang/zh-TW/#%E5%9C%A8-0yz-%E5%88%9D%E5%A7%8B%E9%96%8B%E7%99%BC%E9%9A%8E%E6%AE%B5%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">语义化版本2.0</a><br><a href="https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json" target="_blank" rel="noopener">whats-the-difference-between-tilde-and-caret-in-package-json</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了在软件版本号中包含更多意义，反映代码所做的修改，产生了语义化版本，软件的使用者能从版本号中推测软件做的修改。npm 包使用语义化版控制，我们可安装一定版本范围的依赖，npm 会选择和你指定的版本相&lt;strong&gt;匹配&lt;/strong&gt;的**(latest)最新版本**安装。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://JackChouMine.github.io/categories/node/"/>
    
    
      <category term="npm" scheme="https://JackChouMine.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>node 中的 ES 模块</title>
    <link href="https://JackChouMine.github.io/2019/06/16/node-%E4%B8%AD%E7%9A%84-ES-%E6%A8%A1%E5%9D%97/"/>
    <id>https://JackChouMine.github.io/2019/06/16/node-中的-ES-模块/</id>
    <published>2019-06-16T13:36:35.000Z</published>
    <updated>2020-07-29T13:03:01.709Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>ES6 模块的设计思想是尽量静态化，在编译时就能确定依赖关系，以及输入和输出变量，是编译时加载。编译时加载可实现静态优化，类型检查等都在静态分析实现。CommmonJS 是运行时加载，加载的是对象，不能静态优化。ES6 模块不是对象，而是通过 <strong>export</strong> 命令显示输出代码，再通过<strong>import</strong>导出。</p><p>目前 node 对 ES6 的支持尚处在实验阶段，可编写<code>.mjs</code> 和给 node 命令增加<code>--experimental-modules</code> 使用 ES6 模块。</p><a id="more"></a><h2 id="es6-自动启用严格模式"><a class="markdownIt-Anchor" href="#es6-自动启用严格模式"></a> ES6 自动启用严格模式</h2><p>有以下限制：</p><ul><li>变量必须先声明再使用；</li><li>不能删除变量<code>delte prop</code>,只能删除属性<code>delete global[prop]</code>;</li><li><code>arguments</code>不随函数参数变化；</li><li>禁止 <code>this</code>指向全局对象，顶层 this 指向 <code>undefined</code>；</li><li>增加保留字<code>protected</code>、<code>satic</code>、<code>interface</code>等。</li></ul><h2 id="导出接口"><a class="markdownIt-Anchor" href="#导出接口"></a> 导出接口</h2><p>导出接口使用 export 命令。一个模块就是一个独立的文件，文件内部的变量，外部王无法获取。</p><h3 id="export-命令"><a class="markdownIt-Anchor" href="#export-命令"></a> export 命令</h3><p>逐个导出接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'JACK'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> lastName = <span class="string">'Zhou'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> myFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引入接口：<br>大括号里面的接口名，必须和导出的相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName,lastName,myFun &#125; <span class="keyword">from</span> <span class="string">"./name"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(firstName +<span class="string">' '</span>+ lastName);</span><br><span class="line">myFun()</span><br></pre></td></tr></table></figure><p>统一导出：<br>如果不想暴露内部变量的名字，可用<code>as</code>指定<strong>导出名</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">'JACK'</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">'Zhou'</span>;</span><br><span class="line"><span class="keyword">let</span> myFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> (firstName = <span class="string">'HaHa'</span>), <span class="number">10</span>); <span class="comment">//在10毫秒后改变导出接口的值</span></span><br><span class="line"><span class="keyword">export</span> &#123; firstName <span class="keyword">as</span> name, lastName, myFun &#125;;</span><br></pre></td></tr></table></figure><p>引入：<br>可用<code>as</code>给导出的接口取一个别名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> firstName, lastName, myFun &#125; <span class="keyword">from</span> <span class="string">'./name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + lastName);</span><br><span class="line">myFun();</span><br><span class="line"><span class="comment">// 2秒后输出新的值 HaHa</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(firstName);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JACK ZHOU</span><br><span class="line">JACK ZHOU</span><br><span class="line">Haha</span><br></pre></td></tr></table></figure><p>**setTimeout(() =&gt; (firstName = ‘HAHHAH’), 10);**在10毫秒后改变导出接口的值。<code>export</code> 导出的接口和值是动态绑定的。即可通过接口获取模块内部实时的值。这和CommonJS 规范完全不同，其保存的是模块内的缓存。</p><p>导出的接口是<strong>常量</strong>，不可修改，否则报<code>TypeError:Assingment to constant variable.</code>。但是可修改<strong>对象</strong>，包括数组、包装对象等。<br><strong>但是不推荐这么做，，容易出错，还难以调试</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my.mjs</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">'JACK'</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">'Zhou'</span>;</span><br><span class="line"><span class="keyword">let</span> myFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">age: <span class="number">10</span>,</span><br><span class="line">ID: <span class="string">'1313134'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>];</span><br><span class="line"><span class="keyword">let</span>  oNum= <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">export</span> &#123; arr, obj ,myFun,oNum&#125;;</span><br></pre></td></tr></table></figure><p>引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; arr, obj, myFun, oNum &#125; <span class="keyword">from</span> <span class="string">'./name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">obj.age++; #修改对象</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">arr.push('你好'); # 修改数组 数组是特殊的对象</span><br><span class="line"><span class="built_in">console</span>.log(arr); </span><br><span class="line">myFun();</span><br><span class="line"><span class="comment">// myFun=()=&gt;'周杰' 这里报错</span></span><br><span class="line"><span class="built_in">console</span>.log(oNum.valueOf());</span><br><span class="line">oNum.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oNum);</span><br><span class="line"><span class="built_in">console</span>.log(oNum.age);</span><br></pre></td></tr></table></figure><p>整体引入,修改上述引入方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> OBJ <span class="keyword">from</span> <span class="string">'./name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(OBJ.obj);</span><br></pre></td></tr></table></figure><p>用*****指定一个对象，将接口都加载到好对象上。</p><p>import 提升效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(OBJ.obj);</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> OBJ <span class="keyword">from</span> <span class="string">'./name'</span>;</span><br></pre></td></tr></table></figure><p>这种效果的本质是模块在<strong>编译时加载，而非运行时</strong>。<br>加载时可不暴露任何接口。那这样有和作用呢？如何调用接口？？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./name'</span>; </span><br><span class="line"><span class="keyword">import</span> <span class="string">'./name'</span>; <span class="comment">//多次加载，只会执行一次</span></span><br></pre></td></tr></table></figure><p>比如 vue 自定义指令，已经在指令定义文件中使用 <code>Vue.directive</code>函数定义指令了，就可以不导出接口，引入时也不需要导入任何接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'./json'</span>;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">const</span> directives = &#123;</span><br><span class="line">  json</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(directives)) &#123;</span><br><span class="line">  Vue.directive(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// export &#123;json&#125;</span></span><br></pre></td></tr></table></figure><p>在main.js 引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义指令 这里不需要导入任何接口</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./directives'</span>;</span><br></pre></td></tr></table></figure><h3 id="export-default-命令"><a class="markdownIt-Anchor" href="#export-default-命令"></a> export default 命令</h3><p>上面接口的导出方式，在引入时都需要先知道接口名字，否则无法加载。但是用户往往不想要先阅读文档，了解接口。<code>export default</code>就是为模块指定默认接口的，引入时接口名可随意命名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my.mjs</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">'JACK'</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">'Zhou'</span>;</span><br><span class="line"><span class="keyword">let</span> myFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">age: <span class="number">10</span>,</span><br><span class="line">ID: <span class="string">'1313134'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>];</span><br><span class="line"><span class="keyword">let</span> oNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">export</span> &#123; obj, myFun, oNum &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> arr; <span class="comment">//默认接口 一个模块只能有一个</span></span><br></pre></td></tr></table></figure><p>引入；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Obj <span class="keyword">from</span> <span class="string">'./name'</span>; <span class="comment">//将默认接口加载到 Obj 上</span></span><br><span class="line"><span class="built_in">console</span>.log(Obj);</span><br><span class="line"><span class="keyword">import</span> &#123; obj, myFun, oNum &#125; <span class="keyword">from</span> <span class="string">'./name'</span>; <span class="comment">//引入命名接口</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(myFun);</span><br><span class="line"><span class="built_in">console</span>.log(oNum);</span><br></pre></td></tr></table></figure><p><strong>export default Interface</strong> 的实质是将接口命名为 <strong>default</strong>。<br><code>export default arr</code> 和 <code>export {arr as default}</code>相同。</p><p><code>export default</code> 导出匿名函数都是可以的，还可用来导出类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">toString() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="keyword">this</span>.x&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.y&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeting = <span class="string">'hello class'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; greeting &#125;; <span class="comment">// export default 可和多个export 混用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Point;</span><br></pre></td></tr></table></figure><p>引入接口:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Point, &#123; greeting &#125; <span class="keyword">from</span> <span class="string">'./Point'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeting);</span><br><span class="line"><span class="keyword">let</span> point = <span class="keyword">new</span> Point(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(point.toString());</span><br><span class="line"><span class="built_in">console</span>.log(point <span class="keyword">instanceof</span> Point);</span><br></pre></td></tr></table></figure><h2 id="引入接口"><a class="markdownIt-Anchor" href="#引入接口"></a> 引入接口</h2><p>总结</p><ul><li>import 命令经静态分析后先于其他语句执行；</li><li>import from ,from 指定模块位置，可以是相对路径或者绝对路径，不带路径，就需要用配置文件告诉JS引擎。</li><li>静态加载是import有提升效果，多次加载只执行一次；</li><li>引入接口时可不输出接口；</li><li><code>as</code> 可改写接口名字；</li><li>编译时加载可实时获取模块内部的变量。</li><li>关于是否使用大括号引入：<ul><li>引入<code>export default</code>导出的接口，不使用大括号；</li><li>引入<code>export</code>导出的接口，一般使用大括号，用<code>as</code>整体引入就不使用大括号。</li></ul></li></ul><h2 id="export-和-import-复合使用"><a class="markdownIt-Anchor" href="#export-和-import-复合使用"></a> export 和 import 复合使用</h2><h2 id="import-动态引入模块"><a class="markdownIt-Anchor" href="#import-动态引入模块"></a> import 动态引入模块</h2><p>前面的加载无法实现按需加载或者动态加载，因此引入<code>import()</code>指令，不是函数，因此不具备函数的特性，比如调用<code>apply</code>、<code>bind</code>、从<code>Function.prototype</code>获得继承，返回<code>Promise</code>对象，模块会作为<code>then</code>方法的参数。import 能接受的参数，import()都能接受。<br><strong>require</strong>是异步动态记载，import() 是动态同步加载。</p><p>import() 适用场景</p><ul><li>按需加载和条件加载；</li><li>路径动态改变的模块；</li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dynam.mjs</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>, name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; n &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sayHello;</span><br></pre></td></tr></table></figure><p>引入模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./dynamic.mjs'</span>).then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">module</span>)</span><br><span class="line">    <span class="built_in">console</span>.table(<span class="built_in">module</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">module</span>.n);</span><br><span class="line">sayHello('JACK'); # 用 export default 导出的模块，直接在then方法里调用</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 export default 导出的模块，直接在then方法里直接使用接口，但是有会感觉这个接口来的太突然，推荐动态加载的模块都用 export 导出，然后在引入时解构赋值提取接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dynamic.mjs</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>, name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; n, sayHello &#125;;</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./dynamic.mjs'</span>).then(<span class="function">(<span class="params">&#123; sayHello, n &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line">sayHello(<span class="string">'JACK'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用async函数加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">dynamicLoad();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dynamicLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> &#123; sayHello, n &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./dynamic.mjs'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line">sayHello(<span class="string">'JACK'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块继承"><a class="markdownIt-Anchor" href="#模块继承"></a> 模块继承</h2><p>未完待续</p><h2 id="跨模块常量"><a class="markdownIt-Anchor" href="#跨模块常量"></a> 跨模块常量</h2><p>未完待续</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ES6 Module 的语法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;ES6 模块的设计思想是尽量静态化，在编译时就能确定依赖关系，以及输入和输出变量，是编译时加载。编译时加载可实现静态优化，类型检查等都在静态分析实现。CommmonJS 是运行时加载，加载的是对象，不能静态优化。ES6 模块不是对象，而是通过 &lt;strong&gt;export&lt;/strong&gt; 命令显示输出代码，再通过&lt;strong&gt;import&lt;/strong&gt;导出。&lt;/p&gt;
&lt;p&gt;目前 node 对 ES6 的支持尚处在实验阶段，可编写&lt;code&gt;.mjs&lt;/code&gt; 和给 node 命令增加&lt;code&gt;--experimental-modules&lt;/code&gt; 使用 ES6 模块。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://JackChouMine.github.io/categories/node/"/>
    
    
      <category term="es6" scheme="https://JackChouMine.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>yarn 常见命令</title>
    <link href="https://JackChouMine.github.io/2019/06/16/yarn-%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <id>https://JackChouMine.github.io/2019/06/16/yarn-常见命令/</id>
    <published>2019-06-16T13:31:01.000Z</published>
    <updated>2020-07-29T13:03:01.710Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下yarn常见命令，不至于在看到人家博客了使用，不知道什么意思，至于开发使用，npm 足够了。</p><a id="more"></a><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yarn init <span class="comment">#初始化package.json</span></span><br><span class="line"></span><br><span class="line">yarn add packge 添加依赖 默认开发依赖</span><br><span class="line">yarn add package@version</span><br><span class="line">yarn add package@tag</span><br><span class="line">yarn <span class="comment"># 安装项目全部依赖</span></span><br><span class="line"></span><br><span class="line">yarn add package --dev 安装开发依赖</span><br><span class="line">yarn add package --peer</span><br><span class="line">yarn add package --optional</span><br><span class="line"></span><br><span class="line">yarn upgrade packge</span><br><span class="line"></span><br><span class="line">yarn remove package</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下yarn常见命令，不至于在看到人家博客了使用，不知道什么意思，至于开发使用，npm 足够了。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://JackChouMine.github.io/categories/node/"/>
    
    
      <category term="yarn" scheme="https://JackChouMine.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>跨域请求</title>
    <link href="https://JackChouMine.github.io/2019/06/16/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>https://JackChouMine.github.io/2019/06/16/跨域请求/</id>
    <published>2019-06-16T13:16:01.000Z</published>
    <updated>2020-07-29T13:03:01.711Z</updated>
    
    <content type="html"><![CDATA[<p>一个域上的文档或者脚本试图请求另一个域下的资源，就是跨域。比如</p><ul><li>资源跳转：a链接、重定向、表单提交；</li><li>资源引入：link、script、img、iframe等标签，css background:url()、font-face;</li></ul><a id="more"></a><p>[TOC]</p><h2 id="同源限制狭义的跨域"><a class="markdownIt-Anchor" href="#同源限制狭义的跨域"></a> 同源限制–狭义的跨域</h2><p>同源策略（same origin policy）是一种<strong>浏览器</strong>安全策略，即只允许浏览器向同源的服务器请求资源（<em>请求还是会发送，服务器也会响应，只是响应被浏览器拦截了</em>），可避免浏览器遭到xss、csfr等攻击。同源：协议+域名+端口 三者相同，即使不同的域指向同一个ip，也非同源。</p><p>同源限制了几种行为：</p><ul><li>Cookie、LocalStroage 和 IndexDB 无法获取；</li><li>DOM 和 JS 对象无法获得；</li><li>AJAX 返回值不能获取。</li></ul><p>容易混淆的跨域：</p><p><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://192.168.4.12/b.js" target="_blank" rel="noopener">http://192.168.4.12/b.js</a>           域名和域名对应相同ip              不允许</p><p><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://x.domain.com/b.js" target="_blank" rel="noopener">http://x.domain.com/b.js</a>           主域相同，子域不同                不允许<br><a href="http://domain.com/c.js" target="_blank" rel="noopener">http://domain.com/c.js</a></p><h2 id="跨域解决方案"><a class="markdownIt-Anchor" href="#跨域解决方案"></a> 跨域解决方案</h2><ul><li>JSONP</li><li>CORS</li><li>WebSocket</li><li>node 中间件代理</li></ul><p>还有其他一些方法，本文主要介绍 JSONP 和 CORS。</p><h3 id="jsonp-实现跨域"><a class="markdownIt-Anchor" href="#jsonp-实现跨域"></a> jsonp 实现跨域</h3><p><strong>原理</strong>：具有 <strong>src</strong> 属性的标签在请求资源时，不受同源策略限制（历史遗留问题），可以通过这些标签（img、script 等）加载外域的脚本，在本域执行。<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 http://127.0.0.1:8016/ 的页面内有一下标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">localHandler</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  alert(data.name)</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jsonp.js 脚本里有 localHandler 函数，该函数在本域有定义，加载该脚本后就会执行本域的 localHandler 处理数据  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/jsonp.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://localhost:3001 域下有如下脚本 jsonp.js</span></span><br><span class="line">localHandler(&#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>关键</code>：外域上的脚本是一个执行函数，函数参数是一个对象或者 JSON ,且与本域的处理函数同名。</p></blockquote><p>问题：外域的脚本是写死了，我们如何统一本域和外域的函数名呢？<br>改进1：在 src 传递过去就好，其实还可传递其他参数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">localHandler</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">alert(data.name)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在本域传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/jsonp.js?callback=localHandler&amp;id=abc8848"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外域服务端处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//node 代码</span></span><br><span class="line"><span class="keyword">let</span> query    = Url.parse(req.url, <span class="literal">true</span>).query</span><br><span class="line"><span class="keyword">let</span> callback = query.callback   <span class="comment">//本地传递过来的本地函数名</span></span><br><span class="line"><span class="keyword">let</span> id       = query.id         <span class="comment">//假设根据id，查询数据库，获取用户信息 userInfo</span></span><br><span class="line"><span class="keyword">let</span> userInfo = &#123; id, <span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;</span><br><span class="line"><span class="keyword">let</span> response = callback + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(userInfo) + <span class="string">')'</span><span class="comment">//将处理函数和传递的数据组合</span></span><br><span class="line">res.write(response)</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure><p>问题：在本域 script 标签写死了，动态插入，会更加好。<br>改进2：动态插入 script 标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本域动态插入 script 标签</span></span><br><span class="line"><span class="comment">//处理返回数据</span></span><br><span class="line"><span class="keyword">var</span> localHandler = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 提供jsonp服务的url地址（生成的返回值都是一段javascript代码）</span></span><br><span class="line"><span class="comment">// 将处理函数传递给服务端，这里查询 id 为 abc8848 的用户信息</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://localhost:3001/jsonp?callback=localHandler&amp;id=abc8848"</span>;</span><br><span class="line"><span class="comment">// 创建script标签，设置其属性</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.setAttribute(<span class="string">'src'</span>, url);</span><br><span class="line"><span class="comment">// 把script标签加入head，此时调用开始</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure><p>外域服务端处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 代码</span></span><br><span class="line"><span class="keyword">let</span> query    = Url.parse(req.url, <span class="literal">true</span>).query</span><br><span class="line"><span class="keyword">let</span> callback = query.callback   <span class="comment">//本地传递过来的本地函数名</span></span><br><span class="line"><span class="keyword">let</span> id       = query.id         <span class="comment">//假设根据id，查询数据库，获取用户信息 userInfo</span></span><br><span class="line"><span class="keyword">let</span> userInfo = &#123; id, <span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;</span><br><span class="line"><span class="keyword">let</span> response = callback + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(userInfo) + <span class="string">')'</span><span class="comment">//将处理函数和传递的数据组合</span></span><br><span class="line">res.write(response)</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure><p>jquery AJAX 跨域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                url: <span class="string">"http://localhost:3001/jsonp?id=abc8848"</span>,</span></span><br><span class="line"><span class="actionscript">                dataType: <span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="actionscript">                jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span></span><br><span class="line"><span class="actionscript">                jsonpCallback: <span class="string">"localHandler"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            .done(<span class="function"><span class="params">json</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(json)&#125;)</span></span><br><span class="line"><span class="javascript">            .fail(<span class="function"><span class="params">err</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(err)&#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外域服务处理同上。</p><p>jsonp 的优缺点：<br><strong>优点</strong></p><ul><li>所有浏览器都支持。</li><li>简单。</li></ul><p><strong>缺点</strong></p><ul><li>由于返回的数据当成脚本执行，会存在脚本注入的安全问题。</li><li>只能发一次请求。</li><li>只能使用 GET 方法。</li><li>不好处理请求错误。</li></ul><h3 id="cors-跨域"><a class="markdownIt-Anchor" href="#cors-跨域"></a> cors 跨域</h3><p>CORS 需要浏览器和服务器同时支持。目前主流浏览器都都支持 cors，cors 通信过程浏览器自动完成，和同源通信无差别。cors 关键是服务器，只要服务器设置了CORS，就能实现跨域请求。</p><h4 id="两种请求"><a class="markdownIt-Anchor" href="#两种请求"></a> 两种请求</h4><p>满足以下两个条件的是简单请求，否则为非简单请求。</p><ul><li>请求方法为：GET|POST|HEAD</li><li>请求头部超出以下字段：<ul><li>Accept|Accept-Language|Content-Language|Last-Event-ID</li><li>Content-Type的值限制在<code>application/x-www-form-urlencoded</code>|<code>multipart/form-data</code>|<code>text/plain</code>。</li></ul></li></ul><p>简单请求和非简单请求，浏览器处理不同。</p><h4 id="简单请求"><a class="markdownIt-Anchor" href="#简单请求"></a> 简单请求</h4><p>简单请求，浏览器器直接发出CORS请求，会<strong>自动</strong>在请求头中增加 <code>Origin</code> 字段，告诉服务器，本次请求从哪个源（<strong>协议+域名+端口号</strong>）发起，服务器根据该源，决定是否同意本次请求。</p><p>服务响应头信息<code>Access-Control-Allow-Origin</code>包含源，则同意请求，否则出错，触发 XHR 的 error 事件。注意，这种错误无法根据状态码识别，因为可能为200。</p><p>简单请求，响应头信息除了<code>Access-Control-Allow-Origin</code>字段必须设置外，可选地设置以下字段：</p><p><code>Access-Control-Allow-Credentials</code>：布尔值，是否允许发起者获取响应内容。CORS 默认发送 Cookie，但是响应不携带<code>Access-Control-Allow-Credential:true</code>，浏览器不会把响应内容返回给请求的发起者（即该请求拿不到响应）。不需要携带认证信息，可设置请求<code>xhr.withCredentials = false;</code>。附带认证的请求，<code>Access-Control-Allow-Origin</code>必须设置一个具体的值，否则请求将失败。响应中携带 <code>Set-Cookie</code>字段，尝试对Cookie进行修改，失败会抛出异常。</p><p><code>Access-Control-Expose-Headers</code>：CORS请求时，XHR的<code>getResponseHeader()</code>只能拿到6个头信息：<code>Cache-Control</code>|<code>Content-Language</code>|<code>Content-Type</code>|<code>Expires</code>|<code>Last-Midified</code>|<code>Pragma</code>。想获取到其他字段，必须在这个响应头里指定。</p><h4 id="非简单请求"><a class="markdownIt-Anchor" href="#非简单请求"></a> 非简单请求</h4><p>非简单请求，在发送实际请求之前，会发送一个预请求（preflight），以确定跨域信息。跨域信息包括：**允许跨域的域 + 方法  + 请求URL + 特殊的请求头字段 + credentials **。跨域信息符合实际请求，才会发起实际请求，否则报错。通过预检请求会，在跨域缓存时间内，不会再发起预检请求。</p><p>实际请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://api.alice.com/cors'</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, url, <span class="literal">true</span>);<span class="comment">// PUT </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Custom-Header'</span>, <span class="string">'value'</span>);<span class="comment">//自定义请求头</span></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p>浏览器检测到非简单请求，会发情预检请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/<span class="number">1.1</span>    <span class="comment">// OPTIONS 方法，询问跨域信息</span></span><br><span class="line">Origin: http:<span class="comment">//api.bob.com // 将要跨域的源</span></span><br><span class="line">Access-Control-Request-Method: PUT  <span class="comment">// 将要跨域的方法</span></span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header <span class="comment">// 跨域自定义字段，用逗号分隔的字符串。</span></span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure><p>预请求响应：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="built_in">Date</span>: Mon, <span class="number">01</span> Dec <span class="number">2008</span> <span class="number">01</span>:<span class="number">15</span>:<span class="number">39</span> GMT</span><br><span class="line">Server: Apache/<span class="number">2.0</span><span class="number">.61</span> (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//api.bob.com // 允许跨域的源 必需的</span></span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT <span class="comment">// 允许跨域的请求方法 必需的</span></span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header <span class="comment">// 允许跨域的请求头字段 必需的</span></span><br><span class="line">Access-Control-Max-Age: <span class="number">1728000</span>  <span class="comment">// 缓存跨域请求的时间，单位为秒，非必需</span></span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">false</span> <span class="comment">// 响应内容控制，非必需</span></span><br><span class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line">Keep-Alive: timeout=<span class="number">2</span>, max=<span class="number">100</span></span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>实际请求满足预请求响应，会自动发送实际请求，否则触发 error 事件。通过了预检请求，以后只要在跨域缓存时间内（注意，URL变了，跨域缓存信息也会失效），就和简单请求一样，携带 <code>Origin</code> 字段，服务器响应，有<code>Access-Control-Allow-Origin</code>字段。</p><p>实际请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /cors HTTP/<span class="number">1.1</span></span><br><span class="line">Origin: http:<span class="comment">//api.bob.com</span></span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure><p>实际响应（部分字段）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//api.bob.com</span></span><br><span class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><h4 id="cors-优劣"><a class="markdownIt-Anchor" href="#cors-优劣"></a> CORS 优劣</h4><p>优点：</p><ul><li>支持的方法多；</li><li>更加安全。</li></ul><p>缺点：</p><ul><li>老旧浏览器不支持；</li><li>会多发请求。</li></ul><p>相比 CORS 的优点，缺点可忽略。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个域上的文档或者脚本试图请求另一个域下的资源，就是跨域。比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源跳转：a链接、重定向、表单提交；&lt;/li&gt;
&lt;li&gt;资源引入：link、script、img、iframe等标签，css background:url()、font-face;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="网络" scheme="https://JackChouMine.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="https://JackChouMine.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>MIME Type</title>
    <link href="https://JackChouMine.github.io/2019/06/16/MIME-Type/"/>
    <id>https://JackChouMine.github.io/2019/06/16/MIME-Type/</id>
    <published>2019-06-16T13:06:07.000Z</published>
    <updated>2020-07-29T13:03:01.707Z</updated>
    
    <content type="html"><![CDATA[<p>MIME（Multipurpose Internet Mail Extensions）网络多用途邮件扩展，告知某种扩展名的文件用特定软件打开或处理，也叫 Media Type（Internet Media Type）媒体类型，浏览器从 HTTP 消息头字段 Content-Type 得知资源类型，从而能正确处理网络中传递的资源，实际上媒体类型就是指定<code>content-type</code>的值。<br>用 /  区分类型和子类型，类型指定多个类型，子类型更加明确的指定类型。不区分大小写，惯例用小写。</p><a id="more"></a><h2 id="常见的媒体类型"><a class="markdownIt-Anchor" href="#常见的媒体类型"></a> 常见的媒体类型：</h2><ul><li><span style="color:blue">text/html：HTML 格式</span></li><li><span style="color:blue">text/plain：普通文本</span></li><li>text/xml : XML 格式</li><li>image/gif : gif 图片</li><li>image/jpg : jpg 图片</li><li>image/png : png 图片</li></ul><h2 id="以-application-开头的媒体类型"><a class="markdownIt-Anchor" href="#以-application-开头的媒体类型"></a> 以 application 开头的媒体类型</h2><ul><li><span style="color:blue">application/json ：JSON格式数据</span></li><li><span style="color:blue">application/x-www-form-urlencoded：form 表单默认以 <code>key1=val1&amp;key2=val2</code> 的格式发送数据到服务器（表单默认提交的数据格式），并对key和value进行url编码&quot;</span></li><li>application/pdf：pdf 格式</li><li>application/msword ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li><li>application/xml ： XML数据格式</li><li>application/atom+xml ：Atom XML 聚合格式</li><li>application/xhtml+xml  ：XHTML 格式</li><li>application/xml : XML 数据格式</li></ul><p>##上传文件</p><ul><li><span style="color:blue">multipart/form-data : 在表单中提交文件 enctype=“multipart/form-data”</span> 。也可传输<code>key=value</code> 数据，性能损耗大，不推荐。</li></ul><blockquote><p>蓝色更为常用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MIME（Multipurpose Internet Mail Extensions）网络多用途邮件扩展，告知某种扩展名的文件用特定软件打开或处理，也叫 Media Type（Internet Media Type）媒体类型，浏览器从 HTTP 消息头字段 Content-Type 得知资源类型，从而能正确处理网络中传递的资源，实际上媒体类型就是指定&lt;code&gt;content-type&lt;/code&gt;的值。&lt;br&gt;
用 /  区分类型和子类型，类型指定多个类型，子类型更加明确的指定类型。不区分大小写，惯例用小写。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://JackChouMine.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="https://JackChouMine.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 模块和 ES6 模块在vue中混用</title>
    <link href="https://JackChouMine.github.io/2019/06/16/CommonJS-%E6%A8%A1%E5%9D%97%E5%92%8C-ES6-%E6%A8%A1%E5%9D%97%E5%9C%A8vue%E4%B8%AD%E6%B7%B7%E7%94%A8/"/>
    <id>https://JackChouMine.github.io/2019/06/16/CommonJS-模块和-ES6-模块在vue中混用/</id>
    <published>2019-06-16T10:31:48.000Z</published>
    <updated>2020-07-29T13:03:01.707Z</updated>
    
    <content type="html"><![CDATA[<p>commonJS 和 ES6 模块在 Vue 中混用 引发的问题。</p><a id="more"></a><h2 id="具体情况"><a class="markdownIt-Anchor" href="#具体情况"></a> 具体情况</h2><table><thead><tr><th>引入</th><th>导出</th><th>是否可行</th><th>说明</th></tr></thead><tbody><tr><td>require</td><td>module.exports</td><td>×</td><td>报错：TypeError: Cannot assign to read only property ‘exports’ of object ‘#<object>’</object></td></tr><tr><td>require</td><td>export</td><td>√</td><td></td></tr><tr><td><strong>import</strong></td><td><strong>export</strong></td><td><strong>√</strong></td><td><strong>推荐使用</strong></td></tr><tr><td>import</td><td>module.exports</td><td>×</td><td>报错：同上</td></tr></tbody></table><p>目前 node 还不支持 ES6 模块，需要用 webpack 统一模块化方案。<strong>require</strong>、<strong>module.exports</strong> 是 CommonJS 的引入导出模块方案，却不同在同一个文件内使用，这点很让人费解。</p><p><strong>注意</strong>：目前 node 的模块化方案，只有 CommonJS，require 和 module.exports 是可以混用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;commonJS 和 ES6 模块在 Vue 中混用 引发的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://JackChouMine.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://JackChouMine.github.io/tags/vue/"/>
    
      <category term="es6" scheme="https://JackChouMine.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 规范</title>
    <link href="https://JackChouMine.github.io/2019/06/16/CommonJS-%E8%A7%84%E8%8C%83/"/>
    <id>https://JackChouMine.github.io/2019/06/16/CommonJS-规范/</id>
    <published>2019-06-16T10:24:30.000Z</published>
    <updated>2020-07-29T13:03:01.707Z</updated>
    
    <content type="html"><![CDATA[<p>为了开发大型复杂应用、代码便于管理，制定了不同的 JS 代码模块化规范。</p><ul><li>CommonJS：node 的模块化实现了 CommonJS 规范，<code>同步加载</code>。</li><li>AMD ：异步模块定义规范，<code>异步加载</code>，是 RequireJS 在推广过程中对模块定义的规范产出，推崇依赖前置；</li><li>ES6：ES6 模块化的设计思想是尽量静态化，编译时就能确定模块依赖关系；</li><li>CMD : 是 SeaJS 在推广时对模块定义的规范化产出，推崇依赖就近；</li><li>UMD : 兼容 AMD 和 CommonJS 的规范化的同时，还兼容全局引用的方式。</li></ul><p>CommonJS 规范希望JS代码能在任何地方运行，具备开发大型应用的能力，node 的模块化采用 CommonJS 规范实现。</p><a id="more"></a><p>[TOC]</p><h2 id="模块实例"><a class="markdownIt-Anchor" href="#模块实例"></a> 模块实例</h2><p><strong>一个文件就是一个模块</strong>，有自己的作用域。文件中的变量、函数、类都是私有的，其他文件不可见。</p><p>每个模块内部，<code>module</code>变量代表当前模块。这是一个对象，<code>exports</code> 属性对导入模块的接口，<code>require</code>一个模块，就是加载<code>exports</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> addX = <span class="function"><span class="params">value</span> =&gt;</span> value + x;</span><br><span class="line"><span class="built_in">module</span>.exports.x = x;</span><br><span class="line"><span class="built_in">module</span>.exports.addX = addX;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">let</span> example = <span class="built_in">require</span>(<span class="string">'./example'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(example);<span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(example.x);<span class="comment">//5</span></span><br><span class="line"><span class="keyword">let</span> result = example.addX(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>CommonJS 模块特点：</p><blockquote><ol><li>所有代码都运行在模块的作用域内，不会污染全局作用域；</li><li>模块可多次加载，但是只会在第一次加载时运行一次，以后加载从<strong>缓存</strong>中读取。不想要运行该模块，必须清除缓存；</li><li>按照代码出现的顺序加载。</li></ol></blockquote><h2 id="module-对象"><a class="markdownIt-Anchor" href="#module-对象"></a> module 对象</h2><p>node 内部提供了 Module 构建函数。所有模块都是Module 的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Module</span>(<span class="params">id,parent</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.exports = &#123;&#125;;</span><br><span class="line"><span class="keyword">this</span>.parent = parent;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>module</code> 的属性：</p><blockquote><p>id : 模块识别符，带有<strong>绝对路径</strong>的模块文件名；<br>filename: 模块文件名，带有绝对路径；<br>loaded : 布尔值，模块是否加载完成；<br>parent ： module 对象，引用本模块的模块；<br>children : module 数组， 本模块引用的其他模块；<br>exports ：对象，本模块的导出值是其属性。</p></blockquote><p>没被其他模块引用的模块通常是程序入口，此时 <code>parent</code> 属性是为 <code>null</code>，可根据该特性判断是否为程序入口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">module</span>.parent) &#123;</span><br><span class="line">    <span class="comment">// ran with `node something.js`</span></span><br><span class="line">    app.listen(<span class="number">8088</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'app listening on port 8088'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// used with `require('/.something.js')`</span></span><br><span class="line">    <span class="built_in">module</span>.exports = app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exports-变量"><a class="markdownIt-Anchor" href="#exports-变量"></a> exports 变量</h2><p>为了方便，node 为每个模块提供了 exports 变量，指向 <code>module.exports</code>，即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exports = <span class="built_in">module</span>.exports</span><br></pre></td></tr></table></figure><p>可向 <code>exports</code>对象加添加属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.area = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Math</span>.PI*r*r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>不能直接将exports变量指向一个值，因为这样等于切断了exports = module.exports的联系</strong></p></blockquote><p>一个模块的对外接口，是一个单一的值（<strong>一个函数</strong>或者<strong>一个变量</strong>），<code>不能使用</code> <code>exports</code> 输出，<strong>只能使用<code>module.exports</code>输出</strong>。<br>——————————————————————————————————————<br><strong>在<code>exports</code>上添加属性，再导出，导出的是一个对象。</strong><br><code>exports.prop = value</code> 等同于 <code>module.exports = {prop:value}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example.1.js 在exports添加属性</span></span><br><span class="line"><span class="keyword">let</span> print = <span class="function">(<span class="params">value</span>) =&gt;</span><span class="built_in">console</span>.log(value);</span><br><span class="line">exports.print = print;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example.2.js 将单一的值赋值给 module.exports</span></span><br><span class="line"><span class="keyword">let</span> print = <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="built_in">module</span>.exports = print;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example.3.js 将单一的值赋值给</span></span><br><span class="line"><span class="keyword">let</span> print = <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value);</span><br><span class="line">exports = print;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">let</span> example1 = <span class="built_in">require</span>(<span class="string">'./example.1'</span>);</span><br><span class="line"><span class="keyword">let</span> example2 = <span class="built_in">require</span>(<span class="string">'./example.2'</span>);</span><br><span class="line"><span class="keyword">let</span> example3 = <span class="built_in">require</span>(<span class="string">'./example.3'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(example1);<span class="comment">// &#123; print: [Function: print] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(example2);<span class="comment">// [Function:print]</span></span><br><span class="line"><span class="built_in">console</span>.log(example3);<span class="comment">// &#123;&#125; 给 exports 赋值只能导出空对象</span></span><br></pre></td></tr></table></figure><p>为了简化，只用 <code>module.exports</code>导出值。</p><h2 id="require-命令"><a class="markdownIt-Anchor" href="#require-命令"></a> require 命令</h2><p><code>require</code>的基本功能是：<strong>读取</strong>并<strong>执行</strong>一个模块，返回该模块的 <code>exports</code>对象，可用解构赋值的方式提取部分属性，没有发现模块，报错。</p><h3 id="加载规则"><a class="markdownIt-Anchor" href="#加载规则"></a> 加载规则</h3><ol><li>参数以 <code>/</code>开头，加载绝对路径下的模块；</li><li>参数以 <code>./</code>开头，加载当前目录下的模块；</li><li>不以 <code>./</code>或 <code>/</code>开头，加载核心模块或依次在各级 <code>node_modules</code>目录的查找；</li><li>想得到包含文件名的完整路径，使用 <code>require.resolve()</code>。</li></ol><h3 id="目录的加载规则"><a class="markdownIt-Anchor" href="#目录的加载规则"></a> 目录的加载规则</h3><p>通常把相关文件放在一个目录下，便于组织。这时最好为目录设置一个<code>入口文件</code>，<code>require</code>方法能根据这个文件，加载整个目录。<br>在目录中设置一个 <code>package.json</code>，写入 <code>main</code>字段。<br>package.json 文件由 <code>npm init</code>命令生成，<code>npm init -y</code> 可不用一一回答询问，直接采用默认值，再手动修改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//package.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"some-library"</span>,</span><br><span class="line"><span class="attr">"main"</span>:<span class="string">"./lib/some-library.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>require</code>发现参数为一个目录，会先查找该目录下的 <code>package.json</code>文件，加载 <code>main</code>字段指定的入口文件。没有 <code>main</code>字段或者没有<code>package.json</code>文件，则加载该目录下的 <code>index.js</code>文件或者<code>index.node</code>。</p><h3 id="node-模块分类"><a class="markdownIt-Anchor" href="#node-模块分类"></a> node 模块分类</h3><ul><li><p>核心模块，内置在 node 内部的，直接引用即可。</p></li><li><p>第三方模块</p><ul><li>用 npm 下载，安装到程序目录的 <code>node_modules</code>文件夹中；</li><li>模块加载时，会先在核心模块中搜索，再到程序的<code>node_modules</code>文件夹中搜索。</li></ul></li><li><p>文件模块</p></li><li><p>文件夹模块<br>按照目录加载机制加载。</p></li></ul><h3 id="模块的缓存"><a class="markdownIt-Anchor" href="#模块的缓存"></a> 模块的缓存</h3><p>第一次加载，以后从缓存中读取<code>module.exports</code>属性。<br>所有模块的缓存都保存在 <code>require.cache</code>中。<br>删除模块缓存：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除指定模块缓存</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache(moduleName)</span><br><span class="line"><span class="comment">// 删除所有模块缓存</span></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">require</span>.cache).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;<span class="keyword">delete</span> <span class="built_in">require</span>.cache[key]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="requiremain"><a class="markdownIt-Anchor" href="#requiremain"></a> require.main</h3><p><code>main</code>属性，可用来判断是直接执行还是调用执行。直接执行：<br><code>node module.js</code>，require.main属性指向模块本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接执行 表达式为 true</span></span><br><span class="line"><span class="built_in">require</span>.main === <span class="built_in">module</span></span><br></pre></td></tr></table></figure><p>通过 <code>require</code>加载模块执行，上面的表达式为<code>false</code></p><h2 id="模块加载机制"><a class="markdownIt-Anchor" href="#模块加载机制"></a> 模块加载机制</h2><p>模块一旦输出值，模块内部的变化，影响不到这个输出值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> incCounter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    counter++</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'模块内部'</span>,counter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'lib'</span>, <span class="built_in">require</span>.main === <span class="built_in">module</span>);<span class="comment">// 被require 执行，输出 false</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter,</span><br><span class="line">    incCounter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.1.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="built_in">require</span>(<span class="string">'./lib'</span>).counter</span><br><span class="line"><span class="keyword">let</span> incCounter = <span class="built_in">require</span>(<span class="string">'./lib'</span>).incCounter</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'模块外部'</span>, counter);<span class="comment">//3 </span></span><br><span class="line">incCounter();<span class="comment">// 模块内部的值改变为 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'模块外部'</span>, counter);<span class="comment">//外部的值 还是为3 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test'</span>, <span class="built_in">require</span>.main === <span class="built_in">module</span>);</span><br><span class="line"><span class="comment">// 直接执行，输出 true</span></span><br></pre></td></tr></table></figure><p>最后输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lib <span class="literal">false</span></span><br><span class="line">模块外部 3</span><br><span class="line">模块内部 4</span><br><span class="line">模块外部 3</span><br><span class="line"><span class="built_in">test</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h2><p><a href="https://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS规范</a><br><a href="https://juejin.im/entry/5b2afc3551882574e321dcf1" target="_blank" rel="noopener">前端模块化（一）nodeJS中的CommonJS规范</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了开发大型复杂应用、代码便于管理，制定了不同的 JS 代码模块化规范。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CommonJS：node 的模块化实现了 CommonJS 规范，&lt;code&gt;同步加载&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AMD ：异步模块定义规范，&lt;code&gt;异步加载&lt;/code&gt;，是 RequireJS 在推广过程中对模块定义的规范产出，推崇依赖前置；&lt;/li&gt;
&lt;li&gt;ES6：ES6 模块化的设计思想是尽量静态化，编译时就能确定模块依赖关系；&lt;/li&gt;
&lt;li&gt;CMD : 是 SeaJS 在推广时对模块定义的规范化产出，推崇依赖就近；&lt;/li&gt;
&lt;li&gt;UMD : 兼容 AMD 和 CommonJS 的规范化的同时，还兼容全局引用的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CommonJS 规范希望JS代码能在任何地方运行，具备开发大型应用的能力，node 的模块化采用 CommonJS 规范实现。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://JackChouMine.github.io/categories/node/"/>
    
    
      <category term="模块化" scheme="https://JackChouMine.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="commonJS" scheme="https://JackChouMine.github.io/tags/commonJS/"/>
    
  </entry>
  
  <entry>
    <title>html5 websocket</title>
    <link href="https://JackChouMine.github.io/2019/06/16/html5-websocket/"/>
    <id>https://JackChouMine.github.io/2019/06/16/html5-websocket/</id>
    <published>2019-06-16T09:56:14.000Z</published>
    <updated>2020-07-29T13:03:01.709Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行的<code>全双工通信协议</code>。</p><a id="more"></a><h2 id="具体使用"><a class="markdownIt-Anchor" href="#具体使用"></a> 具体使用</h2><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务器主动向客户端推送数据。</p><p>在 WebSocket API 中，浏览器和服务器只需一次HTTP握手，就建立了持久连接，后续可双向通信。</p><p>没有出现 websocket 之前，服务器实现推送消息，一般都是 通过 AJAX 轮询，这种方式浪费带宽，频繁的连接、断开，消耗服务器资源。</p><p><img src="https://i.loli.net/2019/01/20/5c447fd150742.png" alt="@ajax轮询和webSocket的比较|center"></p><p>建立 websocket 连接后，可主动向对方发送数据，通过 onmessage 事件来接收数据。</p><p>创建 webSocket 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Socket = <span class="keyword">new</span> WebSoket(url[,protocol]);<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>url: 可以是 wss 和 ws 协议。<br>websocket 使用的默认端口和TCP相同，默认80，wss，默认443。<br><code>protocol</code>：<br>哪些子协议常用呢？</p><p>一个客户端请求例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line">Upgrade: websocket <span class="comment">//希望升级到 websocket 协议</span></span><br><span class="line">Connection: Upgrade <span class="comment">//表示升级通信协议</span></span><br><span class="line">Host: example.com</span><br><span class="line">Origin: http:<span class="comment">//example.com</span></span><br><span class="line">Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class="line">Sec-WebSocket-Version: <span class="number">13</span> <span class="comment">//webSocket 版本</span></span><br></pre></td></tr></table></figure><p>Sec-WebSocket-Key：一个随机字符串，服务器会使用这个数据构造出一个SHA-1的信息摘要。<code>Sec-WebSocket-Key</code> 加上一个特殊字符串<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>，然后计算摘要，再进行base-64编码，将结果作为响应头<code>Sec-WebSocket-Accep</code>的值，这样做的目的是，尽量避免http请求被误认为是websocket协议。</p><p>Origin：可选字段，表示发情websocket连接的页面，类似Referer，但是 Origin 包含子协议和主机名。</p><p>响应：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line"></span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class="line">Sec-WebSocket-Location: ws:<span class="comment">//example.com/</span></span><br></pre></td></tr></table></figure><p>websocket 属性：</p><table><thead><tr><th>属性</th><th>值</th><th>说明</th><th>对应属性</th></tr></thead><tbody><tr><td>readyState（只读）</td><td>0</td><td>连接正在建立</td><td>连接正在建立</td></tr><tr><td>readyState</td><td>1</td><td>连接已建立，可通信</td><td>OPEN</td></tr><tr><td>readyState</td><td>2</td><td>连接正在关闭</td><td>CLOSEING</td></tr><tr><td>readyState</td><td>3</td><td>连接已关闭或者连接无法打开</td><td>CLOSED</td></tr><tr><td>bufferedAmount（只读）</td><td>数值</td><td>正在等待传输的数据的字节数</td><td>可用来判断发送是否完毕</td></tr></tbody></table><p>如何监听 readyState 的状态变化呢？<br>事件：</p><table><thead><tr><th>属性</th><th>处理程序</th><th>说明</th></tr></thead><tbody><tr><td>open</td><td>onopen</td><td>建立连接时触发</td></tr><tr><td>error</td><td>onerror</td><td>通信发生错误时触发</td></tr><tr><td>message</td><td>onmessage</td><td>接收到数据时触发</td></tr><tr><td>close</td><td>onclose</td><td>连接关闭时触发</td></tr></tbody></table><p>以上事件的事件处理函数的参数都是事件<code>event</code>,可在事件中获取相关信息。</p><p>方法：</p><table><thead><tr><th>方法</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>send</td><td>发送数据</td><td>参数只能是字符串或者二进制</td></tr><tr><td>close</td><td>关闭连接</td><td>无参数</td></tr></tbody></table><p>二进制数据可用<code>blod</code>或者<code>ArrayBuffer</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> event.data === <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Received data string"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(event.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = event.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Received arraybuffer"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可指定接收的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ws.binaryType = <span class="string">"blob"</span>; <span class="comment">// 指定接收的二进制数据的类型</span></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data.size);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到的是 ArrayBuffer 数据</span></span><br><span class="line">ws.binaryType = <span class="string">"arraybuffer"</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data.byteLength);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://halfrost.com/websocket" target="_blank" rel="noopener">全双工的 websocket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行的&lt;code&gt;全双工通信协议&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://JackChouMine.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="html5" scheme="https://JackChouMine.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>几种重定向</title>
    <link href="https://JackChouMine.github.io/2019/06/16/%E5%87%A0%E7%A7%8D%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://JackChouMine.github.io/2019/06/16/几种重定向/</id>
    <published>2019-06-16T09:51:16.000Z</published>
    <updated>2020-07-29T13:03:01.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几种重定向"><a class="markdownIt-Anchor" href="#几种重定向"></a> 几种重定向</h2><p>总结几种重定向的区别。</p><a id="more"></a><p>[TOC]</p><h2 id="307-temporary-redirect临时重定向"><a class="markdownIt-Anchor" href="#307-temporary-redirect临时重定向"></a> 307 Temporary Redirect(临时重定向)</h2><p>通过响应头字段<code>Location</code>告诉浏览器资源暂时移动到别处，原来的方法和消息被用用来先新的URL发送请求。<br>307和302之间的唯一区别在于307该方法和主体将不会被重定向的请求时改变保证。使用302，一些老客户错误地将方法改变为GET：使用非GET方法的行为，然后302在Web上不可预知，而使用307的行为则是可预测的。对于GET请求，它们的行为是相同的。</p><h2 id="301-moved-permanently永久移动"><a class="markdownIt-Anchor" href="#301-moved-permanently永久移动"></a> 301 Moved Permanently（永久移动）</h2><p>资源已明确<strong>移动</strong>到<code>Location</code>标题给定的URL。浏览器重定向到这个页面，搜索引擎更新它们到资源的链接。规范要求方法和主体在执行重定向时<strong>不会被更改</strong>，但并非所有浏览器都与它一致。推荐<strong>301</strong>仅作为响应<strong>GET</strong>或<strong>HEAD</strong>方法，在其他方法下使用<code>301</code>,必须向用户询问是否重定向。</p><p>对于GET方法，chrome 和火狐浏览器，会使用<code>GET</code>再次向Location地址发起请求，但是远程IP却是原来的,响应状态码为<code>301</code>，其他请求头信息两者不仅相同。<br>可使用<code>308</code>代替301，因为 308 下明确禁止更改请求方法。会使用<code>GET</code>再次向Location地址发起请求，但是远程IP却是原来的,狐火的响应状态是 <code>Connection Established</code>，chrome 是<code>301</code>,其他头信息也有差别。</p><h2 id="302-found找到"><a class="markdownIt-Anchor" href="#302-found找到"></a> 302 Found（找到）</h2><p>资源已明确<strong>移动</strong>到<code>Location</code>标题给定的URL。浏览器重定向到这个页面，搜索引擎<code>不会</code>更新它们到资源的链接。规范要求方法和主体在执行重定向时<strong>不会被更改</strong>，但并非所有浏览器都与它一致。建议设置302代码仅作为一个响应GET或HEAD方法和想要明确禁止更改方法，使用<strong>307 Temporary Redirect</strong>代替。<br>想要改变方法的情况下，改为GET使用<code>303 See Also</code>，这样如果你想给<code>PUT</code>请求一个确认信息，改了<code>303</code>就很有用了。</p><h2 id="303-see-other见其他"><a class="markdownIt-Anchor" href="#303-see-other见其他"></a> 303 See Other（见其他）</h2><p><strong>HTTP 303 See Other</strong>重定向状态响应代码（通常作为一个 <strong>PUT</strong>或<strong>POST</strong>操作的结果发回）表示重定向不链接到新上载的资源，而是链接到其他页面，如确认页面或上载进度页面。用于显示此重定向页面的方法始终是GET。<br><a href="https://itbilu.com/nodejs/npm/EJD5cyg3l.html" target="_blank" rel="noopener">重定向</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;几种重定向&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#几种重定向&quot;&gt;&lt;/a&gt; 几种重定向&lt;/h2&gt;
&lt;p&gt;总结几种重定向的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://JackChouMine.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://JackChouMine.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>xhr 全面总结</title>
    <link href="https://JackChouMine.github.io/2019/06/16/xhr-%E5%85%A8%E9%9D%A2%E6%80%BB%E7%BB%93/"/>
    <id>https://JackChouMine.github.io/2019/06/16/xhr-全面总结/</id>
    <published>2019-06-16T09:30:54.000Z</published>
    <updated>2020-07-29T13:03:01.710Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX(Asynchronous JavaScript Xml)，异步的JS xml，以前客户端和服务器 通信，一般传递 xml，但是现在传递 <code>JSON</code>为主，ajax 能实现页面部分更新，使得页面性能高和体验良好。AJAX 是一种向服务器发送 HTTP 请求，实现与服务器交互的技术，已经是HTTP请的代名词，但是不只支持 http 协议，还支持 <code>ftp</code>、<code>file</code>协议。</p><a id="more"></a><h2 id="一级xhr-二级-xhr"><a class="markdownIt-Anchor" href="#一级xhr-二级-xhr"></a> 一级xhr 二级 xhr</h2><p>一级xhr或者老版本的xhr，有一些缺点：</p><ul><li>只支持文本数据传输</li><li>无法读取和上传二进制文件</li><li>只用成功、失败、完成等状态，没进度信息</li><li>不能跨域</li></ul><p>二级xhr，改进了这些问题：</p><ul><li>可设置超时</li><li>formData 对象管理表单数据</li><li>文件上传</li><li>可跨域</li><li>可获取二进制文件</li><li>可获取传输进度</li></ul><h2 id="xmlhttprequest-对象"><a class="markdownIt-Anchor" href="#xmlhttprequest-对象"></a> XMLHttpRequest 对象</h2><p>ajax 技术的核心是 XMLHttpRequest 对象，简称XHR，现在较为先进的浏览器都支持（低版本的IE可滚粗了）创建 xhr 对象，<code>new</code> 一个即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><h3 id="xhr-的用法"><a class="markdownIt-Anchor" href="#xhr-的用法"></a> xhr 的用法</h3><p><strong>通常步骤：</strong><br>第一步：<code>var xhr = new XMLHttpRequest()</code>—创建 xhr;<br>第二步：<code>xhr.open(METHOD,URL,isAsync)</code>—启动xhr;<br>第三步：<code>xhr.responseType = reposnseType</code>—设置返回值类型，默认 <code>''</code>,必须在返回值达到客户端前设置;<br>第四步：<code>xhr.onreadystatechange=handleFun</code>—监听请求状态变化；<br>第五步：<code>xhr.setRequestHeader('Content-Type','application/json;charset=utf-8')</code>—设置请求头，不需要设置，可省略，<code>必须在请求开启和发送之间设置</code>;<br>第六步：<code>xhr.send(data)</code>—发送请求。</p><p>完整的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">http.open(<span class="string">'GET'</span>,<span class="string">'/endpoint'</span>,<span class="literal">true</span>);</span><br><span class="line">http.responseType = <span class="string">'json'</span>;</span><br><span class="line">http.onreaydstatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(http.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(http.status === <span class="number">200</span>)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(http.response);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.error(http.response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">http.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.error(http.statusText);</span><br><span class="line">&#125;</span><br><span class="line">http.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="实例属性"><a class="markdownIt-Anchor" href="#实例属性"></a> 实例属性</h3><h4 id="readystate"><a class="markdownIt-Anchor" href="#readystate"></a> readyState</h4><p>只读属性，是一个<code>数字</code>，表示此时的 HTTP 请求状态。</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:left">状态</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">xhr创建，<code>open</code>方法还未调用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">1</td><td style="text-align:left"><code>open</code>已调用，<code>send</code>未调用，此时可设置请求头</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>send</code>已调用，且服务器返回的<code>头信息</code>和<code>状态码</code>已经收到</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">正在接收响应<code>body</code>，收到部分信息。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">已收到服务返回即请求<code>完成</code>，可能失败，可能成功</td><td style="text-align:center"></td></tr></tbody></table><blockquote><p>0   UNSENT  open() has not been called yet.<br>1   OPENED  send() has been called.<br>2   HEADERS_RECEIVED    send() has been called, and headers and status are available.<br>3   LOADING Downloading; responseText holds partial data.<br>4   DONE    The operation is complete.</p></blockquote><p>每当 <code>xhr</code>的状态发生变化，<code>readyState</code>属性就发生变化，就会触发<code>readyStateChange</code>事件，所以可在 readyStateChange 事件的监听函数里处理返回的请求信息。</p><h4 id="onreadystatechange"><a class="markdownIt-Anchor" href="#onreadystatechange"></a> onreadystatechange</h4><p>事件，指向一个函数。执行<code>abort</code>方法，也会改变 readyState。</p><h4 id="response"><a class="markdownIt-Anchor" href="#response"></a> response</h4><p>服务器返回的数据，只读，类型由 <code>responseType</code>决定。请求不成功或者数据不完整，值为<code>null</code>。</p><h4 id="responetype"><a class="markdownIt-Anchor" href="#responetype"></a> responeType</h4><p>可写属性，指定响应格式，在 <code>open</code>之后<code>send</code>之前，设置返回的数据类型。</p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">‘’(空字符串)</td><td style="text-align:left">默认值，等同于<code>text</code>,适用大多数情况。只是设置该值时，才可获取<code>responseText</code></td></tr><tr><td style="text-align:left">json</td><td style="text-align:left">浏览器会自动调用<code>JSON.parse</code>解析JSON字符串，此时<code>response</code>是一个对象，<strong>不是字符串</strong></td></tr><tr><td style="text-align:left">blob</td><td style="text-align:left"><code>Blob</code>对象，二进制对象，请求图片，下载文件等</td></tr><tr><td style="text-align:left">document</td><td style="text-align:left"><code>Document</code> 对象，文档对象，HTML/XML文档对象等，收到返回值后不用解析HTML字符串，直接进行DOM操作</td></tr><tr><td style="text-align:left">arraybuffer</td><td style="text-align:left"><code>ArrayBuffer</code>对象,二进制数组</td></tr></tbody></table><h4 id="responsetext"><a class="markdownIt-Anchor" href="#responsetext"></a> responseText</h4><p>返回值类型是<code>String</code>，可用这个属性获取。也就是说 <code>responseType</code>设置<code>text</code>或者<code>''</code>，<code>response</code>和<code>responseText</code>是相同的。</p><h4 id="responsexml"><a class="markdownIt-Anchor" href="#responsexml"></a> responseXML</h4><p>返回值时 HMTL 或者 XML 对象，可用该属性获取，只读。该属性生效的前提是，响应头信息 <code>Content-Type</code>为 <code>text/xml</code>或者<code>application/xml</code>,这要求，发送请求前，将<code>responseType</code>设置为<code>document</code>。如果响应头信息<code>Content-Type</code>不为 <code>text/xml</code>或者<code>application/xml</code>，就需要手动调用<code>overrideMimeType('text/xml')</code>，强制进行XML解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">http.open(<span class="string">'GET'</span>,<span class="string">'/'</span>,<span class="literal">true</span>);</span><br><span class="line">http.responseType = <span class="string">'document'</span>;</span><br><span class="line">http.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(http.reaydState === <span class="number">4</span> &amp;&amp; http.status  === <span class="number">200</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(http.responseXML);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">http.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="responseurl"><a class="markdownIt-Anchor" href="#responseurl"></a> responseURL</h4><p>只读，返回数据的服务器的url。和 open 里的 url 不一定相同，不含锚点。</p><h4 id="status-statustext"><a class="markdownIt-Anchor" href="#status-statustext"></a> status statusText</h4><p><code>status</code>一个整数，表示 HTTP 的状态码，只读，发出请求前，为0。<br><code>statusText</code>是状态信息，只读，无返回状态信息，默认 <code>OK</code>。</p><table><thead><tr><th style="text-align:center">status</th><th style="text-align:center">statusText</th><th style="text-align:center">状态</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">OK</td><td style="text-align:center">成功返回</td></tr><tr><td style="text-align:center">301</td><td style="text-align:center">Moved Permanently</td><td style="text-align:center">永久移动</td></tr><tr><td style="text-align:center">302</td><td style="text-align:center">Moved Temporarily</td><td style="text-align:center">暂时移动</td></tr><tr><td style="text-align:center">304</td><td style="text-align:center">Not Modified</td><td style="text-align:center">未修改</td></tr><tr><td style="text-align:center">307</td><td style="text-align:center">Temporary Redirect</td><td style="text-align:center">暂时重定向</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">Bad request</td><td style="text-align:center">无效请求</td></tr><tr><td style="text-align:center">401</td><td style="text-align:center">Unauthorized</td><td style="text-align:center">未授权</td></tr><tr><td style="text-align:center">403</td><td style="text-align:center">Forbindden</td><td style="text-align:center">禁止访问</td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">Not Found</td><td style="text-align:center">未找到</td></tr><tr><td style="text-align:center">405</td><td style="text-align:center">Method not allowed</td><td style="text-align:center">方法不被允许</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">Internal server error</td><td style="text-align:center">服务器内部出错</td></tr><tr><td style="text-align:center">503</td><td style="text-align:center">Service unavailable</td><td style="text-align:center">服务不可用</td></tr></tbody></table><p>基本上 2xx和 304，返回正常。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(http.readyState ===<span class="number">4</span> )&#123;</span><br><span class="line">  <span class="keyword">if</span>((http.status &gt;= <span class="number">200</span> &amp;&amp; http.status &lt; <span class="number">300</span>)||(http.status === <span class="number">304</span>))&#123;</span><br><span class="line"><span class="comment">//处理返回数据</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//返回出错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="timeout-ontimeout"><a class="markdownIt-Anchor" href="#timeout-ontimeout"></a> timeout  ontimeout</h4><p><code>timeout</code>属性是一个整数，表示多少<code>毫秒</code>后，如果请求还未返回，就会自动终止。触发<code>timeout</code>事件， 为 0 ，表示无时间限制，不是整数，会先转换，成数字，转换失败，则不生效。<br><code>ontimeout</code>指向一个函数，<code>timeout</code>触发，就执行该函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">http.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请求超时'</span>);</span><br><span class="line">&#125;</span><br><span class="line">http.onload =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(http.readyState === <span class="number">4</span> &amp;&amp; http.status === <span class="number">200</span>)&#123;</span><br><span class="line"><span class="comment">//正常返回</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(http.statusText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">http.open(<span class="string">'GET'</span>,<span class="string">'/users/12132'</span>,<span class="literal">true</span>);</span><br><span class="line">http.timeout = <span class="number">1000</span>*<span class="number">10</span>;<span class="comment">// 10 秒超时</span></span><br><span class="line">http.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="withcredentials"><a class="markdownIt-Anchor" href="#withcredentials"></a> withCredentials</h4><p>一个布尔值，表示跨域请求时，用户信息（Cookie、认证的 http 头信息）是否会包含在请求中，默认<code>false</code>。同源请求不需要设置。为了使得该属性生效，必须返回头信息 <code>Access-Control-Allow-Credentials</code>且值为<code>true</code>。<br>打开了，跨域会发送 cookie，还会设置Cookie。</p><h4 id="upload-用-ajax-发送文件"><a class="markdownIt-Anchor" href="#upload-用-ajax-发送文件"></a> upload 用 AJAX 发送文件</h4><p>xhr 不仅可以发送请求，还可发送送文件。发送文件后，<code>upload</code>属性可得到一个对象，通过该对象，可监听该对象的各个事件得到上传状态。<br>显示上传进度：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>0% complete<span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听<code>upload</code>对象的<code>progress</code>事件，可得到上传进度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">&#123;blodOrFile=null,type=<span class="string">'json'</span>&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">http.open(<span class="string">'POST'</span>,<span class="string">'/srever'</span>,<span class="literal">true</span>);</span><br><span class="line">http.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> progressBar = <span class="built_in">document</span>.querySelector(<span class="string">'progress'</span>);</span><br><span class="line">http.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.lengthComputable)&#123;</span><br><span class="line">progressBar.value = (event.load / event.total)*<span class="number">100</span>;</span><br><span class="line"><span class="comment">// 兼容老式浏览器</span></span><br><span class="line">progressBar.textContent = progressBar.value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">http.send(blodOrFile);</span><br><span class="line">&#125;</span><br><span class="line">uploadFile(&#123;<span class="attr">blodOrFile</span>:<span class="keyword">new</span> Blod([<span class="string">'hello ajax'</span>])&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件属性"><a class="markdownIt-Anchor" href="#事件属性"></a> 事件属性</h3><p>可监听 xhr 的以下事件：<strong>书写顺序为触发顺序，监听这些事件，必须在send之前进行</strong></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">事件</th><th style="text-align:left">何时触发</th></tr></thead><tbody><tr><td style="text-align:center">onloadstart</td><td style="text-align:center">loadstart</td><td style="text-align:left">请求发出,在 <code>readyState == 1</code> 和 <code>readyState == 2</code>之间,onloadstart 默认传入 progressEvent 对象</td></tr><tr><td style="text-align:center">onprogress</td><td style="text-align:center">progress</td><td style="text-align:left">正在发送或者加载返回的数据,onprogress 默认传入progressEvent对象</td></tr><tr><td style="text-align:center">onabort</td><td style="text-align:center">abort</td><td style="text-align:left">终止请求，比如调用<code>abort</code>，调用该方法，readyState 被设置为 0</td></tr><tr><td style="text-align:center">onerror</td><td style="text-align:center">error</td><td style="text-align:left">请求<code>失败</code></td></tr><tr><td style="text-align:center">ontimeout</td><td style="text-align:center">timeout</td><td style="text-align:left">请求<code>超时</code></td></tr><tr><td style="text-align:center">onload</td><td style="text-align:center">load</td><td style="text-align:left">请求<code>成功</code>，以上四个事件互斥，触发0次或者1次</td></tr><tr><td style="text-align:center">onloadend</td><td style="text-align:center">loadend</td><td style="text-align:left">请求<code>完成</code>,可能成功，可能失败。<strong>abort</strong>、<strong>load</strong>、<strong>timeout</strong>、<strong>readtState=4</strong>都会伴随着<strong>loadend</strong>,onloadend 默认传入 progressEvent 对象</td></tr><tr><td style="text-align:center">onreadystatechange</td><td style="text-align:center">readystatechange</td><td style="text-align:left">xhr状态，监听该事件，可得知请求是否<code>完成</code>，这个属性时<code>xhr</code>特有的，其他属性时<code>xhr.upload</code>和<code>xhr</code>共有的</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> responseText = xhr.responseText;</span><br><span class="line"> <span class="built_in">console</span>.log(responseText);</span><br><span class="line"> <span class="comment">// process the response.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">http.onabort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The request was aborted'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// `只有 onprogress 有一个事件参数`</span></span><br><span class="line">http.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.loaded);<span class="comment">//已返回的数据量</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.total);<span class="comment">//返回的总数据量</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.lengthComputable);<span class="comment">//加载进度是否可计算</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'There was an error!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">http.addEventListener(<span class="string">'error'</span>, handleError);</span><br></pre></td></tr></table></figure><h3 id="onload-vs-onreadystatechange"><a class="markdownIt-Anchor" href="#onload-vs-onreadystatechange"></a> onload vs onreadyStateChange</h3><p>处理返回值，是在 <strong>onload</strong>还是在<strong>onreadyStateChange</strong>?</p><p>onload 等于 <code>readyState==4 &amp;&amp; xhr.status===200</code></p><p>loadend 事件的触发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onreadystatechange</span><br><span class="line">    readyState === <span class="number">4</span></span><br><span class="line">             ⇓</span><br><span class="line">onload / onerror / onabort</span><br><span class="line">             ⇓</span><br><span class="line">        onloadend</span><br></pre></td></tr></table></figure><p>使用 <code>onerror</code>并且不考虑老式浏览器，<code>推荐</code>用 <code>onload</code>而不用<code>onreadySateChange</code>。</p><h3 id="实例方法"><a class="markdownIt-Anchor" href="#实例方法"></a> 实例方法</h3><h4 id="open"><a class="markdownIt-Anchor" href="#open"></a> open</h4><p>在<code>open</code>方法中指定请求参数，返回值为<code>undefined</code>。<br><code>opend(METHOD,URL,isAsync,user,password)</code>,user 和 password 可选，统一请求，再次用<code>open</code>，就等同于调用<code>abort</code>。一般 URL 需要用 <code>encodeURI</code>或<code>encodeURICompent</code>编码。</p><h4 id="get-请求绕过缓存"><a class="markdownIt-Anchor" href="#get-请求绕过缓存"></a> GET 请求绕过缓存</h4><p>GET 请求会缓存，在 url 后面加时间戳可绕过缓存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//foo.com/bar.html -&gt; http://foo.com/bar.html?12345</span></span><br><span class="line">http:<span class="comment">//foo.com/bar.html?foobar=baz -&gt; http://foo.com/bar.html?foobar=baz&amp;12345</span></span><br><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">oReq.open(<span class="string">"GET"</span>, url + ((<span class="regexp">/\?/</span>).test(url) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>) + (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime());</span><br><span class="line">oReq.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="send"><a class="markdownIt-Anchor" href="#send"></a> send</h4><p>send 用于发送数据，可发发送多种类型的数据。<br><code>String</code>、<code>Bold</code>、<code>Document</code>、<code>Formdata</code>、<code>ArrayBuffer</code>、<code>null</code>。</p><p>发送表单数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'registration'</span> <span class="attr">name</span>=<span class="string">'registration'</span> <span class="attr">action</span>=<span class="string">'/register'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">'username'</span> <span class="attr">value</span>=<span class="string">'张三'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'email'</span> <span class="attr">name</span>=<span class="string">'email'</span> <span class="attr">value</span>=<span class="string">'zhangsan@example.com'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'number'</span> <span class="attr">name</span>=<span class="string">'birthDate'</span> <span class="attr">value</span>=<span class="string">'1940'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'submit'</span> <span class="attr">onclick</span>=<span class="string">'return sendForm(this.form);'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendForm</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);<span class="comment">//对表单进行加工</span></span><br><span class="line">  formData.append(<span class="string">'csrf'</span>, <span class="string">'e69a18d7db1286040586e6da1950128c'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, form.action, <span class="literal">true</span>);</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send(formData);<span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">'#registration'</span>);</span><br><span class="line">sendForm(form);</span><br></pre></td></tr></table></figure><h4 id="setrequestheaderfiledvalue"><a class="markdownIt-Anchor" href="#setrequestheaderfiledvalue"></a> setRequestHeader(filed,value)</h4><p>设置请求头信息，open 之后，send 之前调用。</p><h4 id="overridemimetype"><a class="markdownIt-Anchor" href="#overridemimetype"></a> overrideMimeType()</h4><p>重新设置服务器返回的数据类型，必须在 send 之前调用。</p><h4 id="getresponseheaderfiledstring"><a class="markdownIt-Anchor" href="#getresponseheaderfiledstring"></a> getResponseHeader(filed):String</h4><p>获取某个响应头信息，参数不区分大小写。</p><h4 id="getresponseheadersstring"><a class="markdownIt-Anchor" href="#getresponseheadersstring"></a> getResponseHeaders():String</h4><p>获取所有响应头信息，每个头信息之间用 <code>\r\n</code>(换行)分割。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">date: Fri, <span class="number">08</span> Dec <span class="number">2017</span> <span class="number">21</span>:<span class="number">04</span>:<span class="number">30</span> GMT\r\n</span><br><span class="line">content-encoding: gzip\r\n</span><br><span class="line">x-content-type-options: nosniff\r\n</span><br><span class="line">server: meinheld/<span class="number">0.6</span><span class="number">.1</span>\r\n</span><br><span class="line">x-frame-options: DENY\r\n</span><br><span class="line">content-type: text/html; charset=utf<span class="number">-8</span>\r\n</span><br><span class="line">connection: keep-alive\r\n</span><br><span class="line">strict-transport-security: max-age=<span class="number">63072000</span>\r\n</span><br><span class="line">vary: Cookie, Accept-Encoding\r\n</span><br><span class="line">content-length: <span class="number">6502</span>\r\n</span><br><span class="line">x-xss-protection: <span class="number">1</span>; mode=block\r\n</span><br></pre></td></tr></table></figure><p>处理头信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = headers.trim().split(<span class="regexp">/[\r\n]+/</span>);</span><br><span class="line"><span class="keyword">var</span> headerMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = line.split(<span class="string">': '</span>);<span class="comment">//注意 '' </span></span><br><span class="line">  <span class="keyword">var</span> header = parts.shift();<span class="comment">//删除第一个元素，原数组改变，随便获取到 头字段。一举两得，妙</span></span><br><span class="line">  <span class="keyword">var</span> value = parts.join(<span class="string">': '</span>);<span class="comment">//\r\n 去哪儿了</span></span><br><span class="line">  headerMap[header] = value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">headerMap[<span class="string">'content-length'</span>] <span class="comment">// "6502"</span></span><br></pre></td></tr></table></figure><h4 id="abort"><a class="markdownIt-Anchor" href="#abort"></a> abort</h4><p>终止请求，使得 <code>readyState</code>为 4，<code>status</code>为 0。</p><h2 id="页面卸载时发送数据"><a class="markdownIt-Anchor" href="#页面卸载时发送数据"></a> 页面卸载时发送数据</h2><p>在页面卸载时发送数据，即在<code>unload</code>或者<code>beforeunload</code>的监听函数里，发送AJAX，但是不可靠。xhr 是异步的，可能在发送数据时，页面就卸载了，可打发送失败，那么用同步发送，但是同步发送数据，很多浏览器不支持，同步发送，用户体验不好。</p><p>用 <code>Navigator.sendBeacon(url,data)</code>，该方法与当前页面脱钩，作为浏览器任务，能保证把数据发出去。data 可以是字符串、表单对象、二进制对象等，返回 布尔值，true 说明发送成功，<code>可跨域</code>，<code>POST</code>，比较多的先进浏览器支持。<br>请求头信息 <code>Content-Type</code>根据发送的 data 类型设置，且不能设置其他头字段。</p><table><thead><tr><th style="text-align:center">data</th><th style="text-align:center">Content-Type</th></tr></thead><tbody><tr><td style="text-align:center">Blod</td><td style="text-align:center">Blod</td></tr><tr><td style="text-align:center">formData</td><td style="text-align:center">multipart/form-data</td></tr><tr><td style="text-align:center">String</td><td style="text-align:center">text/plain</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"analytics('start')"</span> <span class="attr">onunload</span>=<span class="string">"analytics('end')"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">analytics</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!navigator.sendBeacon) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> URL = <span class="string">'http://example.com/analytics'</span>;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">'state='</span> + state + <span class="string">'&amp;location='</span> + <span class="built_in">window</span>.location;</span><br><span class="line">  navigator.sendBeacon(URL, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headers = &#123;<span class="attr">type</span>: <span class="string">'application/json'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob(request, headers);</span><br><span class="line">navigator.sendBeacon(<span class="string">'url/to/send'</span>, blob);</span><br></pre></td></tr></table></figure><h2 id="关于-formdata-对象"><a class="markdownIt-Anchor" href="#关于-formdata-对象"></a> 关于 formData 对象</h2><p>xhr2 提供了 FormData 对象，为表单序列化和创建与表单相同的数据提供了便利。<br>其主要用于发送表单数据，也可构造与表单相同的数据，还可以发送文件。</p><ul><li><strong>formdata 发送表单</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();<span class="comment">//创建 formData 对象</span></span><br><span class="line">formData.append(<span class="string">'name'</span>,<span class="string">'jack'</span>);<span class="comment">//添加表单项</span></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"user-info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user-name"</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user-name"</span> <span class="attr">name</span>=<span class="string">"user-name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user-email"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user-email"</span> <span class="attr">name</span>=<span class="string">"user-email"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> <span class="attr">onclick</span>=<span class="string">"submitData()"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">       <span class="function"><span class="keyword">function</span> <span class="title">submitData</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">           http.open(<span class="string">"post"</span>, <span class="string">"formdata"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">           http.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">if</span> (http.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                   <span class="keyword">if</span> (http.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                       <span class="built_in">console</span>.log(http.responseText);</span></span><br><span class="line"><span class="actionscript">                   &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                       alert(<span class="string">"Request was unsuccessful: "</span> + http.status);</span></span><br><span class="line"><span class="undefined">                   &#125;</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">           &#125;;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(form);<span class="comment">//用表单初始化一个 FormData 对象</span></span></span><br><span class="line"><span class="actionscript">           formdata.append(<span class="string">'额外字段'</span>, <span class="number">123</span>);<span class="comment">//字段值不是字符串，会转为字符串</span></span></span><br><span class="line"><span class="undefined">           http.send(formdata);</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请求头信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryoCpZL9koEpmlasTW</span><br></pre></td></tr></table></figure><p>请求体信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"user-name"</span></span><br><span class="line"></span><br><span class="line">afafa</span><br><span class="line">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"user-email"</span></span><br><span class="line"></span><br><span class="line">afafa@<span class="number">163.</span>com</span><br><span class="line">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"额外字段"</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line">------WebKitFormBoundaryoCpZL9koEpmlasTW--</span><br></pre></td></tr></table></figure><p>和表单<code>enctype=&quot;multipart/form-data&quot;</code>提交一样的。<br>用 express 处理提交，服务端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * formData 上传表单</span></span><br><span class="line"><span class="comment"> * bodyParser 不能处理 formData 数据，需要额外的中间件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">let</span> upload = multer();</span><br><span class="line">app.post(<span class="string">"/formdata"</span>, upload.fields([]), (req, res) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req[<span class="string">'body'</span>]);</span><br><span class="line">    res.json(&#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>formdata 上传文件</strong> TODO 如何用 express 接收呢？<br>客户端：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"fileinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Your email address:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span> <span class="attr">autofocus</span> <span class="attr">name</span>=<span class="string">"userid"</span> <span class="attr">placeholder</span>=<span class="string">"email"</span> <span class="attr">required</span> <span class="attr">size</span>=<span class="string">"32"</span> <span class="attr">maxlength</span>=<span class="string">"64"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Custom file label:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"filelabel"</span> <span class="attr">size</span>=<span class="string">"12"</span> <span class="attr">maxlength</span>=<span class="string">"32"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>File to stash:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Stash the file!"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="待完成"><a class="markdownIt-Anchor" href="#待完成"></a> 待完成</h2><ul><li>formData 对象</li><li>浏览器 Blod</li><li>arrayBuffer</li></ul><h2 id="xhr-封装"><a class="markdownIt-Anchor" href="#xhr-封装"></a> xhr 封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * options = &#123;</span></span><br><span class="line"><span class="comment">url提交请求的url</span></span><br><span class="line"><span class="comment">method请求的类型，默认为GET</span></span><br><span class="line"><span class="comment">        data请求体的数据</span></span><br><span class="line"><span class="comment">        cache   是否缓存数据，默认为false</span></span><br><span class="line"><span class="comment">async是否以异步方式进行，默认为true </span></span><br><span class="line"><span class="comment">success成功后的处理方法</span></span><br><span class="line"><span class="comment">error失败后的处理方法</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = options || &#123;&#125;;</span><br><span class="line">    options.method = options.method.toUpperCase() || <span class="string">'GET'</span>;</span><br><span class="line">    options.async = options.async || <span class="literal">true</span>;</span><br><span class="line">    options.cache = options.cache || <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 格式化参数的函数</span></span><br><span class="line">    <span class="keyword">var</span> getParams = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">for</span> (param <span class="keyword">in</span> data) &#123;</span><br><span class="line">            <span class="comment">//查询字符串中每个参数的名称和值都必须使用 encodeURIComponent()进行编码</span></span><br><span class="line">            arr.push(<span class="built_in">encodeURIComponent</span>(param) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(data[param]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在 url 末尾加上一个随机数，避免相同值使用 IE 缓存</span></span><br><span class="line">        <span class="keyword">if</span> (options[<span class="string">'cache'</span>]) &#123;</span><br><span class="line">            arr.push((<span class="string">"randomNum="</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回带有 &amp; 的查询字符串</span></span><br><span class="line">        <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> params = getParams(options[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    http.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (http.status === <span class="number">200</span> || http.status === <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            options.success &amp;&amp; options.success(http.response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            options.fail &amp;&amp; options.fail(http.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (options[<span class="string">'method'</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'GET'</span>:</span><br><span class="line">            http.open(<span class="string">"GET"</span>, options[<span class="string">'url'</span>] + <span class="string">"?"</span> + params, options[<span class="string">'async'</span>]);</span><br><span class="line">            <span class="comment">// 发送请求</span></span><br><span class="line">            http.send(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">            http.open(<span class="string">'POST'</span>, options[<span class="string">'url'</span>], options[<span class="string">'async'</span>]);</span><br><span class="line">            http.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">            http.send(params)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'不支持的方法'</span>);</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> 如何支持其他方法？</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>promise 版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">http</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  url = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  method = <span class="string">'get'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  data = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  dataType = <span class="string">'multipart'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  responseType = <span class="string">'json'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  headers = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> body = <span class="literal">null</span>;</span><br><span class="line">  method = method.toUpperCase();</span><br><span class="line">  <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'url是必需参数！'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xhr</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    http.responseType = responseType;</span><br><span class="line">    http.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">200</span> == http.status || <span class="number">304</span> === http.status) &#123;</span><br><span class="line">        resolve(http.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(http.statusText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    http.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (method.toLowerCase()) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'get'</span>:</span><br><span class="line">        <span class="keyword">var</span> queryString = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(data) !== <span class="string">'&#123;&#125;'</span>) &#123;</span><br><span class="line">          queryString = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">            .map(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[key]);</span><br><span class="line">            &#125;)</span><br><span class="line">            .join(<span class="string">'&amp;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryString) &#123;</span><br><span class="line">          url += <span class="string">'?'</span> + queryString;</span><br><span class="line">        &#125;</span><br><span class="line">        http.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'post'</span>:</span><br><span class="line">        http.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'json'</span> === dataType) &#123;</span><br><span class="line">          body = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">          http.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/json;charset=UTF-8'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'urlencoded'</span> === dataType) &#123;</span><br><span class="line">          body = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">            .map(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[key]);</span><br><span class="line">            &#125;)</span><br><span class="line">            .join(<span class="string">'&amp;'</span>);</span><br><span class="line">          http.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'xml'</span> === dataType) &#123;</span><br><span class="line">          http.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'text/xml'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          body = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(headers)) &#123;</span><br><span class="line">      http.setRequestHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    http.send(body);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(xhr);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://wangdoc.com/javascript/bom/xmlhttprequest.html" target="_blank" rel="noopener">XMLHttpRequest 对象 - JavaScript 教程 - 网道</a></li><li><a href="https://stackoverflow.com/questions/40523469/navigator-sendbeacon-to-pass-header-information" target="_blank" rel="noopener">Navigator.sendBeacon() to pass header information</a></li><li><a href="https://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest" target="_blank" rel="noopener">Is onload equal to readyState==4 in XMLHttpRequest?</a></li><li><a href="https://stackoverflow.com/questions/30522565/what-is-meaning-of-xhr-readystate-4" target="_blank" rel="noopener">What is meaning of xhr.readystate===4</a></li><li><a href="https://zqzhang.github.io/blog/2016/04/18/why-use-onload-in-cross-domain-ajax.html" target="_blank" rel="noopener">Why Use onload in Cross-domain Ajax</a></li><li><a href="https://xhr.spec.whatwg.org/#progressevent" target="_blank" rel="noopener">XMLHttpRequest Living Standard — Last Updated 28 November 2018</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AJAX(Asynchronous JavaScript Xml)，异步的JS xml，以前客户端和服务器 通信，一般传递 xml，但是现在传递 &lt;code&gt;JSON&lt;/code&gt;为主，ajax 能实现页面部分更新，使得页面性能高和体验良好。AJAX 是一种向服务器发送 HTTP 请求，实现与服务器交互的技术，已经是HTTP请的代名词，但是不只支持 http 协议，还支持 &lt;code&gt;ftp&lt;/code&gt;、&lt;code&gt;file&lt;/code&gt;协议。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://JackChouMine.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="xhr" scheme="https://JackChouMine.github.io/tags/xhr/"/>
    
  </entry>
  
  <entry>
    <title>web worker 实现浏览器多线程</title>
    <link href="https://JackChouMine.github.io/2019/06/15/web-worker-%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://JackChouMine.github.io/2019/06/15/web-worker-实现浏览器多线程/</id>
    <published>2019-06-15T12:19:31.000Z</published>
    <updated>2020-07-29T13:03:01.710Z</updated>
    
    <content type="html"><![CDATA[<p>JS 天然属于单线程环境，也就是说不能同时运行多个脚本。为何这样？因为JS的设计目标是实现网页和用户交互，试想当用户点击页面，操作 DOM 时，有两个线程同时操作了DOM，那么以谁的结果为准呢？最坏的情况一个线程需要给一个元素添加内容，另一个线程却把元素删除了，这将导致用户无法和页面交互。这就是JS只能单线程的原因，所有任务都在一个线程上执行，不必考虑多线程的问题。JS 需要同时执行两个任务的地方，可通过定时器、事件处理器等<strong>异步技术</strong>实现<em>并行</em>（其实依然单线程）。HTML5 引入 web worker 实现真正的多线程。通过 Web Worker 在<strong>后台执行</strong>一些操作，例如触发长时间运行的脚本以处理计算密集型任务，同时却不会阻碍 UI 或其他脚本处理用户互动。<br>Worker 利用类似线程的消息传递实现并行。这非常适合您确保对 UI 的刷新、性能以及对用户的响应。</p><a id="more"></a><h2 id="web-worker-的类型"><a class="markdownIt-Anchor" href="#web-worker-的类型"></a> web worker 的类型</h2><p>两种类型：</p><ul><li>专用 worker（Dedicated workers）：只能在创建它的脚本中使用；</li><li>共享 worker（Shared workers）：可在多个脚本中使用。</li></ul><p>worker 和主线程之间通信通过消息机制进行–使用<code>postMessage</code> 函数向对方传递数据，对方通过监听<code>message</code>事件获取并处理数据。数据不是共享，而是<strong>复制</strong>。所以传递对象时，可以操作该对象，而不会影响另一个线程中的对象。</p><p>worker 和主线程的脚本<strong>必须同源</strong>，简单理解成同一个网站加载到浏览中。</p><h2 id="专用-worker"><a class="markdownIt-Anchor" href="#专用-worker"></a> 专用 worker</h2><h3 id="worker-特性检测"><a class="markdownIt-Anchor" href="#worker-特性检测"></a> worker 特性检测</h3><p>在主线程检测浏览器是否支持 worker,在决定是否创建 worker。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.worker)&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前主要浏览器都支持。<a href="https://caniuse.com/#feat=webworkers" target="_blank" rel="noopener">更多详情</a></p><h3 id="使用入门"><a class="markdownIt-Anchor" href="#使用入门"></a> 使用入门</h3><p>web worker 在独立线程中运行，可将其代码保存在一个单独的JS文件中，然后在创建 worker 时引入该脚本。很多浏览器还不支持本地文件运行worker，我们需要结合服务器时间。可使用 express 创建一个服务器。</p><p>在 <strong>public/javascripts</strong> 文件夹在创建 worker.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(event)</span><br><span class="line">  <span class="built_in">console</span>.log(event.data)</span><br><span class="line">  <span class="built_in">console</span>.log(event.origin)</span><br><span class="line">  <span class="built_in">console</span>.log(event.ports)</span><br><span class="line">  <span class="built_in">console</span>.log(event.source)</span><br><span class="line">  <span class="built_in">console</span>.log(event.lastEventId)</span><br><span class="line">  self.postMessage(&#123; <span class="attr">name</span>: <span class="string">'worker.js'</span>, <span class="attr">data</span>: <span class="string">'hello,main.js!'</span> &#125;)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>这就是 worker 线程的代码。</p><p>在页面的 JS 代码中创建 worker，为了简单起见，在script 标签中写脚本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(<span class="string">'/javascripts/worker.js'</span>);<span class="comment">//创建一个 worker</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> workerButton = <span class="built_in">document</span>.getElementByI(<span class="string">'workerButton'</span>);</span></span><br><span class="line"><span class="actionscript">  workerButton.addEventListener(<span class="string">'click'</span>, (event)=&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(event)</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123; name: <span class="string">'main.js'</span>, data:<span class="string">'hello,worker.js!'</span> &#125;);<span class="comment">//向 worker 线程发送消息</span></span></span><br><span class="line"><span class="actionscript">  &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 监听 worker 线程发送过来的消息</span></span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(event.data);</span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 worker 时指定的脚本是异步加载的，如果加载成功，会生成一个 worker 线程。完全加载和执行之前，系统不好生成 worker。如果脚本不存在，返回404，创建 worker失败。</p><p>postMessage 用来启动 worker，也用来发送消息。</p><h3 id="停止-worker"><a class="markdownIt-Anchor" href="#停止-worker"></a> 停止 worker</h3><p>在主线程中，通过<code>worker.terminate()</code> 停止 worker;在worker 线程中，使用<code>close()</code>来停止worker。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stopWorker = <span class="built_in">document</span>.getElementById(<span class="string">'stopWorker'</span>);</span><br><span class="line">stopWorker.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = worker.terminate();</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>worker 自己停止：</p><p>在主线程中通知worker停止：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stopWorker = <span class="built_in">document</span>.getElementById(<span class="string">'stopWorker'</span>);</span><br><span class="line">stopWorker.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = worker.postMessage(<span class="string">'stop'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);<span class="comment">//undefined</span></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>worker.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(event)</span><br><span class="line">  <span class="built_in">console</span>.log(event.data)</span><br><span class="line">  <span class="built_in">console</span>.log(event.origin)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'cache'</span>,<span class="keyword">this</span>.cache)</span><br><span class="line">  <span class="built_in">console</span>.log(event.source)</span><br><span class="line">  <span class="built_in">console</span>.log(event.lastEventId)</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'stop'</span> === event.data) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">this</span>.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'worker stop '</span>,result);<span class="comment">//undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  self.postMessage(&#123; <span class="attr">name</span>: <span class="string">'worker.js'</span>, <span class="attr">data</span>: <span class="string">'hello,main.js!'</span> &#125;)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h3 id="worker-环境"><a class="markdownIt-Anchor" href="#worker-环境"></a> worker 环境</h3><p>worker 作用域：在worker脚本文件内，this 和 self 都是全局作用域。上面的<code>console.log(this)</code>的输出是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DedicatedWorkerGlobalScope。</span><br></pre></td></tr></table></figure><p>worker 线程中并不能完成使用主线程的功能，只能使用部分JS功能：</p><ul><li>navigator 对象；</li><li>location 对象；</li><li>XMLHttpRequest 对象；</li><li>定时器；</li><li>应用缓存；</li><li>importScripts();</li><li>生成其他 worker。</li></ul><p>worker 中无法使用：</p><ul><li>DOM(非线程安全)；</li><li>window 对象；</li><li>document 对象；</li><li>parent 对象。</li></ul><p>我们在 worker.js 发发送一个http 请求，拿到返回值后传递给主线程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers" target="_blank" rel="noopener">更多详细情况</a></p><h3 id="加载外-worker-脚本"><a class="markdownIt-Anchor" href="#加载外-worker-脚本"></a> 加载外 worker 脚本</h3><p>可使用<code>importScripts</code> 函数加载外部的脚本进入 worker 脚本执行。</p><p>在 worker.js 记载一个脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'./importTest.js'</span>);<span class="comment">// 可传递多个路径，路径是相对于 worker.js 的</span></span><br></pre></td></tr></table></figure><p>importTest.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你好'</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span> * time);</span><br></pre></td></tr></table></figure><p>worker 线程停止后，加载的外部脚本也停止执行。</p><h3 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h3><p>可在主线程中处理 worker 线程的错误，在主线程中监听 worker 的 错误事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">worker.addEventListener(<span class="string">'error'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.colno);</span><br><span class="line">  <span class="built_in">console</span>.log(event.filename);</span><br><span class="line">  <span class="built_in">console</span>.log(event.message);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>输出该错误事件，可看到事件的一些属性：<br>不冒泡、可取消等，具有普通事件的一些属性。</p><p>worker 生成一个错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'stop'</span> === event.data) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">this</span>.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'worker stop '</span>, result);</span><br><span class="line">  &#125;</span><br><span class="line">  self.postMessage(&#123; <span class="attr">name</span>: <span class="string">'worker.js'</span>, <span class="attr">data</span>: <span class="string">'hello,main.js!'</span> &#125;)</span><br><span class="line">  <span class="keyword">this</span>.postMessage(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造一个错误！'</span>));</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h3 id="内嵌-worker"><a class="markdownIt-Anchor" href="#内嵌-worker"></a> 内嵌 worker</h3><p>上面的例子，将 worker 代码放在单独的文件里，这样便于管理代码，也方便修改，因为有语法高亮，可以将 worker 代码放在和主线程相关的html文件里:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"worker"</span> <span class="attr">type</span>=<span class="string">"javascript/worker"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="string">'stop'</span> === event.data) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.close();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(event.data);</span></span><br><span class="line"><span class="actionscript">      self.postMessage(&#123; name: <span class="string">'worker.js'</span>, data: <span class="string">'hello,main.js!'</span> &#125;);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> workerContent = <span class="built_in">document</span>.getElementById(<span class="string">'worker'</span>).textContent;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([workerContent], &#123; <span class="attr">type</span>: <span class="string">'text/javacript'</span> &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> url = URL.createObjectURL(blob);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(url);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(url);</span></span><br><span class="line"><span class="actionscript">    worker.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(event.data);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> workerButton = <span class="built_in">document</span>.querySelector(<span class="string">'#workerButton'</span>);</span></span><br><span class="line"><span class="actionscript">    workerButton.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">      worker.postMessage(&#123; name: <span class="string">"主线程"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 worker 的代码在 script 标签中，声明类型为<code>javascript/worker</code>,就不会被浏览器解析成JS代码，而是当成普通的 html 标签，可通过DOM api 获取标签内的文本，创建 worker。<br>使用 Blob 生成一个blob 对象，再使用 URL.createObjectURL成连接，再生成 worker。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([workerContent], &#123; <span class="attr">type</span>: <span class="string">'text/javacript'</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> url = URL.createObjectURL(blob);</span><br><span class="line"><span class="built_in">console</span>.log(url);</span><br><span class="line"><span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(url);</span><br></pre></td></tr></table></figure><p><a href="https://www.javascripture.com/Blob" target="_blank" rel="noopener">关于Blob</a><br><a href="https://javascript.info/blob" target="_blank" rel="noopener">关于Blob和URL</a></p><h3 id="worker-的使用场景"><a class="markdownIt-Anchor" href="#worker-的使用场景"></a> worker 的使用场景</h3><p>常用的场景：</p><ul><li>预先抓取和/或缓存数据以便稍后使用；</li><li>突出显示代码语法或其他实时文本格式；</li><li>拼写检查程序；</li><li>分析视频或音频数据；</li><li>背景 I/O 或网络服务轮询；</li><li>处理较大数组或超大 JSON 响应；</li><li>&lt;canvas&gt; 中的图片过滤；</li><li>更新本地网络数据库中的多行内容。</li></ul><h2 id="更多参考"><a class="markdownIt-Anchor" href="#更多参考"></a> 更多参考</h2><p><a href="https://www.html5rocks.com/zh/tutorials/workers/basics/" target="_blank" rel="noopener">Web Workers 的基本信息</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">使用 Web Workers</a></p><p><a href="https://www.html5rocks.com/en/tutorials/file/filesystem-sync/" target="_blank" rel="noopener">worker读取文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS 天然属于单线程环境，也就是说不能同时运行多个脚本。为何这样？因为JS的设计目标是实现网页和用户交互，试想当用户点击页面，操作 DOM 时，有两个线程同时操作了DOM，那么以谁的结果为准呢？最坏的情况一个线程需要给一个元素添加内容，另一个线程却把元素删除了，这将导致用户无法和页面交互。这就是JS只能单线程的原因，所有任务都在一个线程上执行，不必考虑多线程的问题。JS 需要同时执行两个任务的地方，可通过定时器、事件处理器等&lt;strong&gt;异步技术&lt;/strong&gt;实现&lt;em&gt;并行&lt;/em&gt;（其实依然单线程）。HTML5 引入 web worker 实现真正的多线程。通过 Web Worker 在&lt;strong&gt;后台执行&lt;/strong&gt;一些操作，例如触发长时间运行的脚本以处理计算密集型任务，同时却不会阻碍 UI 或其他脚本处理用户互动。&lt;br&gt;
Worker 利用类似线程的消息传递实现并行。这非常适合您确保对 UI 的刷新、性能以及对用户的响应。&lt;/p&gt;
    
    </summary>
    
      <category term="html5" scheme="https://JackChouMine.github.io/categories/html5/"/>
    
    
      <category term="html5" scheme="https://JackChouMine.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>Fetch API 入门使用</title>
    <link href="https://JackChouMine.github.io/2019/06/09/Fetch-API-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://JackChouMine.github.io/2019/06/09/Fetch-API-入门使用/</id>
    <published>2019-06-09T10:30:47.000Z</published>
    <updated>2020-07-29T13:03:01.707Z</updated>
    
    <content type="html"><![CDATA[<p>html5 引入了新的网络请求接口<code>Fetch API</code>，原生支持Promise，可配合 async/await 语法使用。</p><a id="more"></a><h2 id="fetch-实例"><a class="markdownIt-Anchor" href="#fetch-实例"></a> Fetch 实例</h2><p>使用 fetch 用户数据列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/users'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>res.json())<span class="comment">//服务器返回的是json</span></span><br><span class="line">.then(<span class="function"><span class="params">user</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(user);&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(error);&#125;)</span><br></pre></td></tr></table></figure><p>async/await 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">'/users'</span>);</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">await</span> res.json();</span><br><span class="line">    <span class="built_in">console</span>.log(users)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch 返回的不是真正需要的数据，而是一个 <code>Promise</code>，所有还需要使用它提供的方法进一步获取想要的数据。</p><h2 id="具体用法"><a class="markdownIt-Anchor" href="#具体用法"></a> 具体用法</h2><p>两种调用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch(url,options)</span><br><span class="line">fetch(req,options)</span><br></pre></td></tr></table></figure><p>推荐使用第一种，一眼就可以看到url,更加直观。</p><p>options 是一个对象，可设置以下字段：</p><ul><li>method：请求方法，默认GET;</li><li>headers：请头信息，可以是简单的对象，也可以是 <code>Headers</code> 的实例；</li><li>body：发送数据。<code>Blod</code>、<code>bufferSource</code>、<code>FormData</code>、<code>URLSearchParams</code>、<code>USVstring</code>，GET、HEAD 没有body；</li><li>mode：请求模式。<ul><li>cors：跨域请求；</li><li>no-cors：只允许使用<code>GET</code>、<code>HEAD</code>、<code>POST</code>;</li><li>same-origin：同源请求；</li><li>navigate：支持页面导航（不太明白）。</li></ul></li><li>credentials：是否发送 <code>cookies</code>：<ul><li>omit：不发送，默认；</li><li>same-origin：同源发送；</li><li>include：发送。</li></ul></li><li>cache：缓存策略：<ul><li>default：请求之前检查缓存；</li><li>no-cache：有缓存，发送一个查询请求，缓存失效，再发送正常请求；</li><li>no-store：不检查缓存，直接请求；</li><li>reload：忽略缓存，拿到响应后，更新缓存；</li><li>force-cache：强制读取缓存，缓存过期，再发送正常请求；</li><li>only-if-cached：读取缓存，过期就报网络错误。 mode 设置为 <code>same-origin</code> 时有效。</li></ul></li><li>redirect：重定向时的处理方法：<ul><li>follow：跟随；</li><li>error：报错；</li><li>manual：用户手动跟随。</li></ul></li><li>integrity：包含一个验证资源完整性的字符串。</li></ul><h2 id="headers"><a class="markdownIt-Anchor" href="#headers"></a> Headers</h2><p>Headers 用于构造请求头信息，构造函数接收一个对象，对象的<code>key-value</code>就是请求头的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> headers = <span class="keyword">new</span> Headers(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'content-type'</span>:<span class="string">'text/plain'</span>,</span><br><span class="line">    <span class="string">'content-length'</span>:data.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">headers.append(<span class="string">'X-Custom-header'</span>,<span class="string">'AnotherValue'</span>);<span class="comment">//追加</span></span><br><span class="line">headers.has(<span class="string">'content-type'</span>);<span class="comment">//true 查询</span></span><br><span class="line">headers.get(<span class="string">'content-type'</span>);<span class="comment">//'text/plain' 获取</span></span><br><span class="line"><span class="comment">// headers.getAll('content-type');//['text/plain'] getAll 被移除了</span></span><br><span class="line">headers.delete(<span class="string">'content-type'</span>);<span class="comment">//删除</span></span><br><span class="line">headers.set(<span class="string">'content-type'</span>,<span class="string">'json'</span>);<span class="comment">//重写</span></span><br></pre></td></tr></table></figure><h2 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request</h2><p>请求对象。可以新建一个，也可以从已有的对象中继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Url = <span class="string">'/users'</span>;</span><br><span class="line"><span class="keyword">let</span> req = <span class="keyword">new</span> Request(Url,&#123;<span class="attr">method</span>:<span class="string">'GET'</span>,headers&#125;)</span><br><span class="line"><span class="comment">// 扩展 request</span></span><br><span class="line"><span class="keyword">let</span> postReq= <span class="keyword">new</span> Requset(req,&#123;<span class="attr">method</span>:<span class="string">'POST'</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="response"><a class="markdownIt-Anchor" href="#response"></a> Response</h2><p>Response 实例是 fertch 处理完 promise 之后的返回的。也可以手动创建，在<code>servoceWorkers</code> 中才真实有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="keyword">new</span> Response(body,init)</span><br></pre></td></tr></table></figure><p>body 可以是<code>Bolb</code>、<code>BufferSource</code>、<code>FormData</code>、<code>URLSearchParams</code>、<code>USVString</code> 这些值。</p><p>init 是一个对象，可包含以下字段：</p><ul><li>status：响应状态码；</li><li>statusText：状态文本；</li><li>headers：头部信息，普通对象或Headers 的实例。</li></ul><p>response 的实例还有一些可读属性：</p><ul><li>ok：请求是否成功，状态码为 2xx 都为 <code>true</code> ；</li><li>status：状态码；</li><li>statusText：状态文本；</li><li>bodyUesed：响应数据是否被用过；</li><li>headers：头部信息；</li><li>url：响应地址；</li><li>type：响应类型：<ul><li>basic：同源；</li><li>cors：跨域；</li><li>error：出错；</li><li>opaque：Request mode 设置为 <code>no-cors</code> 的响应。</li></ul></li></ul><p>response 有一些方法来 reslove 响应信息。</p><ul><li>json，解析响应信息为对象，resolve promise；</li><li>text，…………字符串…………；</li><li>bolb，转化响应Bold，resolve;</li><li>formData,………………；</li><li>arrayBuffer，…………。</li></ul><h2 id="fetch-vs-ajax"><a class="markdownIt-Anchor" href="#fetch-vs-ajax"></a> Fetch Vs AJAX</h2><ul><li>响应状态为404或5xx，都resolve，但是 <code>ok</code> 为false。只有当网络故障或者请求被阻止了，才会 <code>reject</code>；</li><li>默认情况不发送不接收cookies，需要设置；</li><li>POST 的数据需要转为JSON;</li><li>不能设置超时和取消请求，可以通过<code>Promise.race</code>，了模拟两者；</li><li>文件上传和下载获取不到进度，可使用 response.body 是可读流，具有<code>getReader</code>，可根据这个来获取下载进度。；</li><li>不能直接获取到响应数据，需要调用响应方法，resolve 一下；</li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>Fetch API 很底层，使用起来并不丝滑；</li><li>Fetch 错误处理有点复杂；</li><li>Fetch 不支持取消和超时设置；</li><li>上传和下载进度没有，使用可读流来获取，复杂性突然升高了。</li></ul><p>还是使用原生的 xhr 和 axios 库来的爽快。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://javascript.info/fetch-progress" target="_blank" rel="noopener">Fetch: Download progress</a></li><li><a href="https://javascript.info/fetch-abort" target="_blank" rel="noopener">Fetch: Abort</a></li><li><a href="https://aotu.io/notes/2017/04/10/fetch-API/index.html" target="_blank" rel="noopener">了解 Fetch API</a></li><li><a href="http://louiszhai.github.io/2016/11/02/fetch/" target="_blank" rel="noopener">Fetch进阶指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;html5 引入了新的网络请求接口&lt;code&gt;Fetch API&lt;/code&gt;，原生支持Promise，可配合 async/await 语法使用。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://JackChouMine.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="html5" scheme="https://JackChouMine.github.io/categories/html5/"/>
    
    
      <category term="fetch" scheme="https://JackChouMine.github.io/tags/fetch/"/>
    
      <category term="html5" scheme="https://JackChouMine.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>vue 组件封装</title>
    <link href="https://JackChouMine.github.io/2019/06/05/vue-%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    <id>https://JackChouMine.github.io/2019/06/05/vue-组件封装/</id>
    <published>2019-06-04T17:30:29.000Z</published>
    <updated>2020-07-29T13:50:13.663Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录一下 Vue 组件封装的基本实践和一些组件的相关知识。主要涉及以下知识点：</p><ul><li>封装一个组件的代码组织形式；</li><li>vue 组件的三大核心：<ul><li>属性（props、data）;</li><li>事件</li><li>插槽</li></ul></li><li>样式</li><li>其他一些杂项<ul><li>$nextTick 函数的使用</li><li>获取 DOM 元素及在父级组件中执行子组件方法</li></ul></li></ul><p>使用第三方计数库 <a href="https://inorganik.github.io/countUp.js/" target="_blank" rel="noopener">countup.js</a> 创建一个 <code>count-to</code> 组件对以上知识进行总结。</p><a id="more"></a><h2 id="文件组织形式"><a class="markdownIt-Anchor" href="#文件组织形式"></a> 文件组织形式</h2><p>在组件文件夹 <code>component</code> 下创建一个与组件名相同的文件，文件夹内必须有 <code>index.js</code>,并将组件导入到该文件中，这样方便我们引用组件。</p><p><code>count-to</code> 文件夹内：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'./count-to.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CountTo</span><br></pre></td></tr></table></figure><p>使用组件时，只需这样引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span> <span class="comment">// _c 是组件存放路径</span></span><br></pre></td></tr></table></figure><h2 id="vue-组件的三大核心"><a class="markdownIt-Anchor" href="#vue-组件的三大核心"></a> Vue 组件的三大核心</h2><h3 id="属性props-data-和样式"><a class="markdownIt-Anchor" href="#属性props-data-和样式"></a> 属性（props、data 和样式）</h3><p>props 定义了组件<code>可配置</code>的数据，确定的组件的核心功能。封装组件时，props 推荐写成对象形式，方便对数据进行验证，提高了代码健壮性也能明确如何使用。</p><p>常见的检查类型：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、<code>构造函数</code>。<code>null|undefined</code> 会通过所有类型。</p><p>还可以自定义验证函数，指定是否必须和默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"><span class="comment">// 多个可能的类型</span></span><br><span class="line">  propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line"><span class="comment">// 必填的字符串</span></span><br><span class="line">  propC: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 带有默认值的数字</span></span><br><span class="line">  propD: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 带有默认值的对象</span></span><br><span class="line">  propE: &#123;</span><br><span class="line">    type: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义验证函数</span></span><br><span class="line">  propF: &#123;</span><br><span class="line">    validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过阅读 <a href="https://github.com/inorganik/CountUp.js" target="_blank" rel="noopener">countUP 文档</a>，了解到构造函数<code>CountUp</code> 的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CountUp(eleDOM, startValue, endValue, decimals, duration, options) <span class="comment">// eleDOM 是数值显示的元素；endValue 是数值的最终值，这两个参数必须的。</span></span><br></pre></td></tr></table></figure><p>组件代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountUp <span class="keyword">from</span> <span class="string">'countup'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'CountTo'</span>,</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       * @description 起始值</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      startValue: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       * @description 终止值</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      endValue: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       * @description 小数点后保留几位小数（精度）</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      decimals: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       * @description 渐变时长(秒)</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      duration: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       *@description 变速效果</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      useEasing: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       *@description 分组</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      useGrouping: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       *@description 分组符号 2,2234</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      separator: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">','</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       *@description 整数小数分隔符 34.56</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      decimal: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">'.'</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       * @description  动画延迟（秒）</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      delay: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="undefined">      eleId() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 this.uid 生成组件内唯一id</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`count_up_uid<span class="subst">$&#123;<span class="keyword">this</span>._uid&#125;</span>`</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    mounted() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// <span class="doctag">TODO:</span> this.$nextTick</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> options = &#123;</span></span><br><span class="line"><span class="actionscript">          useEasing: <span class="keyword">this</span>.useEasing,</span></span><br><span class="line"><span class="actionscript">          useGrouping: <span class="keyword">this</span>.useGrouping,</span></span><br><span class="line"><span class="actionscript">          separator: <span class="keyword">this</span>.separator,</span></span><br><span class="line"><span class="actionscript">          decimal: <span class="keyword">this</span>.decimal,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter = <span class="keyword">new</span> CountUp(</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.eleId,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.startValue,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.endValue,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.decimals,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.duration,</span></span><br><span class="line"><span class="undefined">          options</span></span><br><span class="line"><span class="undefined">        )</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码说明：<br><code>this._uid</code> 用于生成<code>组件内唯一</code>的 id 值，可用作元素的 id，值是递增的。<br><code>this.$nextTick</code> 函数接收一个回调函数作为参数，回调函数会在 <code>DOM更新</code> 之后执行，如果某些操作必须在 DOM 更新之后，可将这些操作作为其参数。</p><p>计数组件的基本功能就满足了。</p><p>这样使用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">"这个会挂载到组件根元素上"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'count_to'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      CountTo,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        endValue: 4000,</span></span><br><span class="line"><span class="undefined">        decimals: 2,</span></span><br><span class="line"><span class="actionscript">        className: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">count-to</span> <span class="attr">:end-value</span>=<span class="string">"endValue"</span> <span class="attr">:decimals</span>=<span class="string">"decimals"</span> <span class="attr">:duration</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prop 的命名：</p><p>组件中使用<code>小驼峰</code>命名，传递值是使用<code>-</code>。</p><p>关于 props 传递静态值：</p><p>不使用 <code>v-bind</code> 即 <code>:</code> 传递的是静态值，是一个字符串字常量，而不是变量，而使用<code>:</code>指令传递的值，是有类型的。<code>:duration=&quot;5&quot;</code> 传递是 数值 5，<code>duration=&quot;5&quot;</code> 传递字符串<code>'5'</code>。<br><code>duration=&quot;true&quot;</code> 传递的是字符串<code>true</code> 而不是 Boolean 值真值。</p><p>默认值：</p><p>传递是引用类型的值（对象和数组），默认值需要使用一个工厂函数返回一个引用类型的值。</p><p>inheritAttrs：</p><p>如果传递一个组件中没有声明的属性，该属性会挂载都组件元素上，可在组件中将 <code>inheritAttrs</code> 设置为 <code>false</code> 取消这一行为。上面的 <code>title</code> 属性会挂载到组件的 <code>div</code> 上。该属性不应 style 和 calss 的传递。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"会挂载到组件的根元素上"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">test</span>=<span class="string">"test"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure><p>title 会成为<code>count-to</code> 组件的根元素的属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"这是标题"</span> <span class="attr">test</span>=<span class="string">"测试"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"count_up_uid14"</span>&gt;</span>10,000.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>$attrs 接收没有声明的属性</p><p>title 和 test 属性没有在组件中声明，依然可以在组件中使用 <code>attrs</code> 接收到些属性：<br><code>&lt;span&gt;没有props接收的父组件数据：&lt;/span&gt;&lt;br/&gt;</code></p><p>最后的结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"这是标题"</span> <span class="attr">test</span>=<span class="string">"测试"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>没有props接收的父组件数据：&#123; "title": "这是标题", "test": "测试" &#125;<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"count_up_uid14"</span>&gt;</span>10,000.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>inheritAttrs: false 和 $attrs 结合使用：</p><p><strong>有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素，而不需要声明变量接收</strong>。</p><p class="codepen" data-height="551" data-theme-id="0" data-default-tab="js,result" data-user="JackZhouMine" data-slug-hash="yWZdRv" style="height: 551px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="$attrs使用">  <span>See the Pen <a href="https://codepen.io/JackZhouMine/pen/yWZdRv/" target="_blank" rel="noopener">  $attrs使用</a> by JackZhouMine (<a href="https://codepen.io/JackZhouMine" target="_blank" rel="noopener">@JackZhouMine</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="data-vs-props"><a class="markdownIt-Anchor" href="#data-vs-props"></a> data vs props</h4><p>props 从父级组件入，传入的值由父级组件维护，不允许在子组件中<strong>直接操作</strong>,是否必需和数据类型都是确定的，我们不能改变。</p><p>data 是组件内部维护的状态，组件可直接操作，可随时改变值、类型等。</p><p>相同点：都是组件的属性，改变两者都会响应到模板上。</p><h4 id="打破-props-单向数据流"><a class="markdownIt-Anchor" href="#打破-props-单向数据流"></a> 打破 props 单向数据流</h4><p>Vue 不允许在子组件中<strong>直接操作</strong> props ,否则会报错，因为父组件和子组件都可直接操作 props，会使得 props 的管理变得混乱。可通过一些间接的方式操作 props:</p><ol><li>将 props 赋值给 data ，然后操作 data;</li><li>在计算属性中返回 props;</li></ol><p>以上两种方式，修改后的值，是不能会响应到父组件的，想要在父级组件中也看到修改，需要用到下面的方式：</p><ol start="3"><li>.sync 和 $emit 结合</li></ol><p>传递 props 时加上 <code>.sync</code> 修饰符，在子组件内部使用 <code>$emit</code> 更新 props。</p><p>使用 <code>.sync</code> 需要注意：</p><ul><li>不能和表达式一起使用：<code>v-bind:title.sync=&quot;doc.title + '!'&quot;</code>;</li><li>不能传递对象字面量：<code>v-bind.sync=&quot;{ title: doc.title }&quot;</code>。</li></ul><ol start="4"><li>传递引用类型的 props</li></ol><p>传递数组和对象，在子组件中修改他们，会直接反应到父组件上。</p><h3 id="事件"><a class="markdownIt-Anchor" href="#事件"></a> 事件</h3><p>传统的 web 开发使用事件驱动：</p><ul><li>查询节点 → 绑定事件监听；</li><li>用在页面上触发事件 → 执行监听器，修改 DOM,反馈到页面上；<br>这种模式开发效率低成本高。</li></ul><p>Vue 的核心思想是数据驱动，视图由数据决定。MVVM 架构的页面变化流程：</p><p>View(用户操作) → 执行 DOMlistenrs (ViewModel) → Data 改变 （Model）→ View 改变。</p><p>组件和绑定原生事件和自定义事件，绑定原生事件时，需要添加<code>native</code>修饰符。</p><p>可以在组件的原生事件处理器中触发一个自定义事件，就能在父级组件中监听该事件，执行相关操作。</p><p>在 <code>count-to</code> 声明一个 <code>changeValue</code> 事件：</p><p>增加一个按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在事件处理器<code>add</code>中触发一个自定义事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add() &#123;</span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"changeValue"</span>, <span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$emit</code> 的第一个参数是事件名称，第二个参数是传递到该事件监听器的参数。</p><p>在组件上监听 <code>changValue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">changeValue</span>=<span class="string">"changeValue"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'count_to'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      CountTo,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        endValue: 4000,</span></span><br><span class="line"><span class="undefined">        decimals: 2,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      changeValue(value) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.endValue += value</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义一个更新结束事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountUp <span class="keyword">from</span> <span class="string">'countup'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'CountTo'</span>,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      getCount() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 id 获取 DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> span = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.eleId)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> currentValue = <span class="built_in">Number</span>.parseFloat(span.innerText.split(<span class="string">','</span>).join(<span class="string">''</span>))</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> currentValue.toFixed(<span class="keyword">this</span>.decimals)</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      emitEnd() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'on-end'</span>, <span class="keyword">this</span>.getCount())</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.$emit('on-end', this.endValue) 使用 endValue 不是 库处理后的值，所有使用 DOM 元素获取更新后的值</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 监听 props 属性的变化</span></span></span><br><span class="line"><span class="undefined">    watch: &#123;</span></span><br><span class="line"><span class="undefined">      endValue(newValue) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// update 是库的方法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter.update(newValue)</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.emitEnd()</span></span><br><span class="line"><span class="actionscript">        &#125;, <span class="keyword">this</span>.duration * <span class="number">1000</span> + <span class="number">2</span>)</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件上使用监听<code>on-end</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">on-end</span>=<span class="string">"endUp"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'count_to'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      CountTo,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        endValue: 4000,</span></span><br><span class="line"><span class="undefined">        decimals: 2,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 更新接收后，会触发自定义事件，然后执行该函数</span></span></span><br><span class="line"><span class="undefined">      endUp(value) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'endValue =&gt; '</span>, value)</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单修饰符"><a class="markdownIt-Anchor" href="#表单修饰符"></a> 表单修饰符</h4><ul><li>lazy ： 在<code>change</code>事件同步数据；</li><li>trim ： 删除首尾空格；</li><li>number ：只能输入数字；</li></ul><h4 id="事件修饰符"><a class="markdownIt-Anchor" href="#事件修饰符"></a> 事件修饰符</h4><ul><li>stop：阻止冒泡；</li><li>prevent :阻止默认行为；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on</span> <span class="attr">:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on</span> <span class="attr">:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽"><a class="markdownIt-Anchor" href="#插槽"></a> 插槽</h3><p>props 传递普通的数据类型，插槽提供了<code>传递 HTML 代码</code>的方式，父组件中给的插槽内容，会被放置到子组件的指定为位置。</p><p>父组件决定是否显示插槽和怎样显示，子组件决定插槽显示的位置。</p><p>三种插槽：</p><ul><li>匿名插槽；</li><li>命名插槽；</li><li>作用域插槽。</li></ul><p>我们现在想要在 数值左边显示一个从父级组件传递到组件中的文字提示，数值右边显示人民币符号。</p><p>可使用插槽接收文字提示和人民币符号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 匿名插槽 找不到放置的位置，就放在这里--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 命名插槽--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父级组件传递插槽内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span> <span class="attr">:end-value</span>=<span class="string">"endValue"</span> <span class="attr">:decimals</span>=<span class="string">"decimals"</span> <span class="attr">:duration</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>金额：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span> ￥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后的 html 是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>金额：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"count_up_uid13"</span>&gt;</span>4,000.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> ￥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不传递插槽内容时，可以在组件中设置一个默认的插槽内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>奖金额度：<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span> ￥<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父级组件的作用域和子组件的作用是独立的，在父级组件的插槽内容中，获取不到子组件的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span> <span class="attr">:end-value</span>=<span class="string">"endValue"</span> <span class="attr">:decimals</span>=<span class="string">"parentDecimals"</span> <span class="attr">:duration</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>精确到几位小数：&#123;&#123;parentDecimals&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span>&#123;&#123;decimals&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>parentDecimals</code> 是父级组件中的属性，插槽内容属于父级作用域，可获取父级的数据；<br><code>decimals</code> 是子级组件中的属性，插槽内容属于父级作用域，获取不到值；</p><p>想要在父级插槽内容中获取子组件的数据，就需要用到作用域插槽。</p><p>现在想要把数值前面的文字从父级组件传递到子组件，并且还要传递文字的颜色：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text: &#123;</span><br><span class="line">name: <span class="string">"本月工资"</span>,</span><br><span class="line">color: <span class="string">"#F4D03F"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>子组件这样定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--向父级组件传递text 并起了名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span>奖金额度：<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span> <span class="attr">ref</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span> 元<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountUp <span class="keyword">from</span> <span class="string">'countup'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'CountTo'</span>,</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 增加 prop</span></span></span><br><span class="line"><span class="undefined">      text: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样使用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:text</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"data"</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;color:data.color&#125;"</span>&gt;</span>&#123;&#123;data.name&#125;&#125;：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span>￥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'count_to'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      CountTo,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        text: &#123;</span></span><br><span class="line"><span class="actionscript">          name: <span class="string">'本月工资'</span>,</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'#F4D03F'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        endValue: 4000,</span></span><br><span class="line"><span class="undefined">        decimals: 2,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;slot v-bind=&quot;text&quot;&gt;奖金额度：&lt;/slot&gt;</code>，向父级组件传递数据；<br><code>slot-scope=&quot;data&quot;</code> 用来接收插槽传递到父组件的数据；</p><h4 id="新指令-v-slot"><a class="markdownIt-Anchor" href="#新指令-v-slot"></a> 新指令 v-slot</h4><p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 。</p><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 向父级组件传递 textFromChild --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:textFromChild</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span>奖金额度：<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span> <span class="attr">ref</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span> 元<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountUp <span class="keyword">from</span> <span class="string">'countup'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'CountTo'</span>,</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 增加 prop</span></span></span><br><span class="line"><span class="undefined">      text: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样使用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:text</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:left</span>=<span class="string">"&#123;textFromChild&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;color:textFromChild.color&#125;"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span>￥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件传递过来的变量被放置在一个对象中，使用解构赋值的方式提取出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:left</span>=<span class="string">"&#123;textFromChild&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;color:textFromChild.color&#125;"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-slot</code> 指令后跟一个 slot 的名字，插槽具有名字时，可简写为<code>#</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">left</span>=<span class="string">"&#123;textFromChild&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;color:textFromChild.color&#125;"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不管有几个插槽，都把插槽内容放置在 <code>template</code> 中是很好的做法。</p><h2 id="其他杂项"><a class="markdownIt-Anchor" href="#其他杂项"></a> 其他杂项</h2><h3 id="组件生成-id"><a class="markdownIt-Anchor" href="#组件生成-id"></a> 组件生成 id</h3><p>使用<code>this_uid</code>其他字母，可成组件内唯一的 id。<br><code>count-to</code>组件中，我们使用计算属性，设置 span 的 id。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eleId() &#123;</span><br><span class="line">      <span class="comment">// 使用 this.uid 生成全局唯一id</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`count_up_uid<span class="subst">$&#123;<span class="keyword">this</span>._uid&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在组件内部，可以通过 id 或者 class 等获取到 dom，但是不推荐这么做。可通过<code>ref</code> 属性，获取到<code>DOM</code>，更加简洁，并且可以直接通过<code>ref</code> 获取组件或者<code>DOM</code>元素。</p><p>在下面的函数中获取 DOM：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getCount() &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 获取 DOM</span></span><br><span class="line">  <span class="comment">// 使用 ref 属性获取 DOM 元素</span></span><br><span class="line">  <span class="comment">// console.log(this.$refs.number.innerText)</span></span><br><span class="line">  <span class="comment">// return this.$refs.number.innerText</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 id 获取 DOM</span></span><br><span class="line">  <span class="keyword">let</span> span = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.eleId);</span><br><span class="line">  <span class="keyword">let</span> currentValue = <span class="built_in">Number</span>.parseFloat(span.innerText.split(<span class="string">","</span>).join(<span class="string">""</span>));</span><br><span class="line">  <span class="keyword">return</span> currentValue.toFixed(<span class="keyword">this</span>.decimals);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="nexttick-函数的使用"><a class="markdownIt-Anchor" href="#nexttick-函数的使用"></a> $nextTick 函数的使用</h3><p><code>this.$nextTick</code> 接收一个回调函数作为参数，参数会在 Vue 完成 DOM 更新后立即调用。如果某些操作是依赖 DOM 更新后的，可以把这些操作放在回调函数里执行。</p><ul><li>在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。</li><li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。</li></ul><p><code>Vue.$nexttick</code> 全局的，<code>this.$nexttick</code> 是局部的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'123'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">vm.message = <span class="string">'new message'</span> <span class="comment">// 更改数据</span></span><br><span class="line">vm.$el.textContent === <span class="string">'new message'</span> <span class="comment">// false  此时DOM还没渲染</span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  vm.$el.textContent === <span class="string">'new message'</span> <span class="comment">// true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vue DOM 的更新是异步的，数据变化后，组件不会立即渲染，而是在事件队列刷新时，在下一个事件循环 <code>tick</code> 中渲染。</p><p><code>$nexttick</code> 返回一个 Promise，可使用 <code>await</code> 关键词调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  updateMessage: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'已更新'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '未更新'</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.$nextTick()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '已更新'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在父级组件中调用子组件的方法"><a class="markdownIt-Anchor" href="#在父级组件中调用子组件的方法"></a> 在父级组件中调用子组件的方法</h3><p>有时候需要再父级组件中调用子组件的方法。可以在使用组件时指定 <code>ref</code> ，然后使用 <code>ref</code> 调用。<br>比如调用组件的暂停方法，使得数据变化暂停。</p><p>在组件中定义暂停方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:textFromChild</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span>奖金额度：<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span> <span class="attr">ref</span>=<span class="string">"number"</span> <span class="attr">:class</span>=<span class="string">"countClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span> 元<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountUp <span class="keyword">from</span> <span class="string">'countup'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'CountTo'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// <span class="doctag">TODO:</span> 在父级组件中使用封装组件内部的方法</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 在父级组件中调用该方法，实现暂停</span></span></span><br><span class="line"><span class="undefined">      pause() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter.pauseResume()</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父组件中使用调用组件暂停方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:end-value</span>=<span class="string">"endValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:decimals</span>=<span class="string">"decimals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:duration</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"countTo"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定 ref --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">left</span>=<span class="string">"&#123;textFromChild&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;color:textFromChild.color&#125;"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span>￥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"pasue"</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'count_to'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      CountTo,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        endValue: 4000,</span></span><br><span class="line"><span class="undefined">        decimals: 2,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      pasue() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 refs 访问组件，然后调用器方法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.countTo.pause()</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式"><a class="markdownIt-Anchor" href="#样式"></a> 样式</h2><p>组件使用样式，用三种方式：</p><ul><li>外部样式；</li><li>内部样式；</li><li>通过 props 传入 类名，以指定使用内部样式中的哪个类名。</li></ul><p>外部样式两种方法引入：<br>在 <code>script</code> 标签中引入和在 <code>style</code> 标签中引入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:textFromChild</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span>奖金额度：<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 props 中的类绑定到 class 上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:id</span>=<span class="string">"eleId"</span> <span class="attr">ref</span>=<span class="string">"number"</span> <span class="attr">:class</span>=<span class="string">"countClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span> 元<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 引入样式方法一：</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// import './count-to.css'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CountUp <span class="keyword">from</span> <span class="string">'countup'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'CountTo'</span>,</span></span><br><span class="line"><span class="actionscript">    inheritAttrs: <span class="literal">true</span>, <span class="comment">// 不让父作用域的属性挂载到组件的根元素上</span></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      /**</span></span><br><span class="line"><span class="undefined">       * @description  自定义样式类名</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">      className: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 引入样式方法二 */</span></span></span><br><span class="line"><span class="css">  <span class="comment">/* @import './count-to.css' */</span></span></span><br><span class="line"><span class="css">  <span class="comment">/*  内部样式 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.count-to-number</span> &#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 props 传递类名，实际是在父级组件中指定使用内部样式中的哪个类。</p><p>通过 <code>style</code> 也可以应用样式到组件上。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>封装一个组件 props 和 data 决定了组件的核心功能，插槽用于向组件传递 html 标签，使得组件更加具有扩展性。通过事件我们可以对组件进行某些操作。改天分析一个第三方组件，好好体会一下这些概念。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&amp;mid=2247483942&amp;idx=1&amp;sn=bb123cb4d34f94f79881f0fa226da26b&amp;chksm=c06683b0f7110aa6baf6e8ab59870a10fbf9a07083910054a25e67e50d306985103570d88ca2&amp;mpshare=1&amp;scene=24&amp;srcid=&amp;key=ae82afc765e556e1414e399de49e6bc8869fd285d0066971f5cc9b598ff7de811cb0d815acce725f87095b807115ec769907ccf0085d396ef53cc02e077effe6860c3ee0bd74fdf19ca63f73b15a6ba4&amp;ascene=14&amp;uin=MTMzNjE2MjkyMg%3D%3D&amp;devicetype=Windows+7&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=ErOTla1jgsmijn6aCklGP3WGqdRSH9bBBL5cgmhDAhNizyP7X0BxM9stZwgKIQOG" target="_blank" rel="noopener">详解 vue 组件三大核心概念</a></li><li><a href="https://juejin.im/post/5a6fdb846fb9a01cc0268618" target="_blank" rel="noopener">简单理解 Vue 中的 nextTick</a></li><li><a href="https://segmentfault.com/a/1190000012861862" target="_blank" rel="noopener">vue.nextTick 的原理和用途</a></li><li><a href="https://ustbhuangyi.github.io/vue-analysis/reactive/next-tick.html#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">nextTick</a></li><li><a href="https://vuejsdevelopers.com/2019/01/22/vue-what-is-next-tick/" target="_blank" rel="noopener">What the Tick is Vue.nextTick?</a></li><li><a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener">vue 文档 Prop</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录一下 Vue 组件封装的基本实践和一些组件的相关知识。主要涉及以下知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装一个组件的代码组织形式；&lt;/li&gt;
&lt;li&gt;vue 组件的三大核心：
&lt;ul&gt;
&lt;li&gt;属性（props、data）;&lt;/li&gt;
&lt;li&gt;事件&lt;/li&gt;
&lt;li&gt;插槽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;样式&lt;/li&gt;
&lt;li&gt;其他一些杂项
&lt;ul&gt;
&lt;li&gt;$nextTick 函数的使用&lt;/li&gt;
&lt;li&gt;获取 DOM 元素及在父级组件中执行子组件方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用第三方计数库 &lt;a href=&quot;https://inorganik.github.io/countUp.js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;countup.js&lt;/a&gt; 创建一个 &lt;code&gt;count-to&lt;/code&gt; 组件对以上知识进行总结。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://JackChouMine.github.io/categories/vue/"/>
    
      <category term="前端框架" scheme="https://JackChouMine.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="https://JackChouMine.github.io/tags/vue/"/>
    
      <category term="前端框架" scheme="https://JackChouMine.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
